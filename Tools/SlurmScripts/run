#!/bin/bash -i
#
# To write this script we used:
# https://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options
#
usage()
{
cat << EOF
usage: $0 [options]

This script builds an execution script for MN4 that exectues the command defined in the file command_template.

OPTIONS:
   -h --help 
        Show this message
   -i --identifier
        A name for the directorty to store the calculation (to be appended with number of tasks, nodes, threads and threads for the last task)
   -t --total_num_tasks
        Number of MPI tasks to run (defaults to 1)
   -n --num_nodes 
        Number of nodes to use (defaults to 1)
      --num_threads_per_task
        Number of threads per task (defaults to 1)
      --num_threads_last_task
        If positive the last task is allocated on a separate node (defaults to 0)
   -r --num_repeats
        Number of repetitions of the execution (defaults to 1)
   -w --max_wall_time
        Maximum wall clock time to be set in the batch script in minutes (defaults to 10)
EOF
}
# NOTE: This requires GNU getopt.
TEMP=`getopt -o hi:t:n:r:w: --long help,identifier:,total_num_tasks:,num_nodes:,num_repeats:,num_threads_per_task:,num_threads_last_task:,max_wall_time: -n 'run' -- "$@"`

if [ $? != 0 ] ; then usage >&2 ; exit 1 ; fi

# Note the quotes around `$TEMP': they are essential!
#echo "$TEMP"
eval set -- "$TEMP"

#echo $1
tnt=1
nno=1
nrp=1
tht=1
thl=0
wcm=10
idt=exec
while true; do
    case "$1" in
	-h | --help )     usage; exit 1;;
        -i | --identifier      ) idt=$2; shift 2;;
	-t | --total_num_tasks ) tnt=$2; shift 2;;
	-n | --num_nodes       ) nno=$2; shift 2;;
	-r | --num_repeats     ) nrp=$2; shift 2;;
	--num_threads_per_task ) tht=$2; shift 2;;
	--num_threads_last_task  ) thl=$2; shift 2;;
	-w | --max_wall_time   ) wcm=$2; shift 2;;
	-- ) shift; break ;;
	* ) break ;;
    esac
done

#
if [ $thl -gt 0 ]
then
    odd=true
    if [ $nno -lt 2  ]
    then
        echo "We need at least two nodes"
        exit
    else
        tpn=$(( ($tnt-1) / ($nno-1) )) # Tasks per node
        rmd=$(( $tnt - 1 - ($nno-1)*$tpn ))
        cpt=$(( 48 / $tpn ))
        last_task_rank=$(( $tnt - 1 ))
    fi
else
    unset odd
    tpn=$(expr $tnt / $nno) # Tasks per node
    rmd=$(( $tnt - $nno*$tpn ))
    cpt=$(expr 48 / $tpn)
    last_task_rank=-1
fi
#
if [ $rmd != 0 ]
then
    echo Incompatible number of tasks and nodes
    exit 1
fi
script_dir=$(dirname ${BASH_SOURCE[0]})
echo This is dir $script_dir
echo "tpn=$tpn"
echo "cpt=$cpt"

wch=$((wcm / 60))
wcm=$(( wcm - wch*60))
echo hours=$wch
echo minutes=$wcm

identifier=$idt"_with_""$tnt""_tasks_in_""$nno""_nodes_with_""$tht""_threads_and_"$thl"_last_threads"
echo $identifier
mkdir -p $identifier
# Build script to run
cat $script_dir/slurm_template_head.sh | sed "s:HH:$wch:g" | sed "s:MM:$wcm:g" | sed "s:ODD:$odd:g" | sed "s:NNO:$nno:g" | sed "s:TPN:$tpn:g" | sed "s:TNT:$tnt:g" | sed "s:NAME:$idt:g" | sed "s:CPT:$cpt:g" | sed "s:TPN:$tpn:g" | sed "s:NRP:$nrp:g"  > "$identifier"".sh"
cat $script_dir/command_template >>  "$identifier"".sh"
echo command_to_run=\"mpirun -np $tnt -machinefile machinefile -print-rank-map -envlist I_MPI_PIN,I_MPI_DEBUG ../launch.sh $tht $thl $last_task_rank \\\"\$COMMAND\\\"\" >>  "$identifier"".sh"
cat $script_dir/slurm_template_body.sh | sed "s:LAUNCH_DIR:$PWD/$identifier:g" | sed "s:ODD:$odd:g" | sed "s:TNT:$tnt:g" | sed "s:NNO:$nno:g" | sed "s:CPT:$cpt:g" | sed "s:TPN:$tpn:g" | sed "s:NRP:$nrp:g" >> "$identifier"".sh"

# Run it
sbatch "$identifier"".sh"
