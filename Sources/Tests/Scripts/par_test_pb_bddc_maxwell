#!/bin/sh
export MKL_NUM_THREADS=1
export OMP_NUM_THREADS=1
SCRIPT_NAME=$(basename $0)
MPIEXEC_PATH="$1"
MPIEXEC_NP_FLAG="$2"
MPIEXEC_PREFLAGS="$3"
TEST_BINARY_PATH="$4"
TEST_INPUT_DATA_PATH="$5"
TEST_SCRIPTS_PATH="$6"
final_exit_code=0
DIR=$(dirname "$TEST_BINARY_PATH")
echo "$DIR"
TMP_OUTPUT="tmp_output_""$SCRIPT_NAME"

# Load FEMPAR CLAs
. $TEST_SCRIPTS_PATH/fempar_cla_names

# Allowed variation (%) in the number of iterations  w.r.t. the reference solution to return a PASSED test
allowed_variation=0.05 
final_exit_code=0

if [ -d "$DIR" ]
then
    if [ -f "$TEST_BINARY_PATH" ]
    then
        if [ -d "$TEST_INPUT_DATA_PATH" ] 
        then

             #test 1 2D - Analytical 3D known function test with unit constant coefficients --------------------
            for order in 1 2 3; do 
                source $TEST_INPUT_DATA_PATH/test1_params.sh 
                COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 5 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH $static_triang_generate_from_flag struct_hex_mesh_generator $prefix_flag 'square' $struct_hex_mesh_generator_num_dims_flag 2 $struct_hex_mesh_generator_num_cells_x_dim_flag 10 10 0 $struct_hex_mesh_generator_num_parts_x_dim_flag 2 2 0 1 1 0 $struct_hex_mesh_generator_num_levels_flag 2  $coarse_space_use_faces_flag .false. -order $order -wsolution .false. -edge_cont tangential_average -materials_case homogeneous $bddc_scaling_function_case_flag cardinality -bmass_trick .false. -coefficient_case unit_constant"
                echo $COMMAND
                eval $COMMAND
            done 


             #test 1 3D - Analytical 3D known function test with unit constant coefficients --------------------
            for order in 1 2; do 
                source $TEST_INPUT_DATA_PATH/test1_params.sh 
                COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH $static_triang_generate_from_flag struct_hex_mesh_generator $prefix_flag 'square' $struct_hex_mesh_generator_num_dims_flag 3 $struct_hex_mesh_generator_num_cells_x_dim_flag 10 10 10 $struct_hex_mesh_generator_num_parts_x_dim_flag 2 2 2 1 1 1 $struct_hex_mesh_generator_num_levels_flag 2  $coarse_space_use_faces_flag .false. -order $order -wsolution .false. -edge_cont tangential_average_and_first_order_moment -materials_case homogeneous $bddc_scaling_function_case_flag cardinality -bmass_trick .false. -coefficient_case unit_constant"
                echo $COMMAND
                eval $COMMAND
            done 

            #test 2 - Unknown solution w/ checkerboard distrib. of materials ------------------------------
            COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH $static_triang_generate_from_flag struct_hex_mesh_generator $prefix_flag 'square'  $struct_hex_mesh_generator_num_dims_flag 3 $struct_hex_mesh_generator_num_cells_x_dim_flag 8 8 8 $struct_hex_mesh_generator_num_parts_x_dim_flag 2 2 2 1 1 1 $struct_hex_mesh_generator_num_levels_flag 2  $coarse_space_use_faces_flag .false. -order 1 -wsolution .false. -edge_cont tangential_average_and_first_order_moment -mass_coeff_white 1.0 -curl_curl_coeff_white 1e2 -mass_coeff_black 1e-2 -curl_curl_coeff_black 1e4 -materials_case checkerboard $bddc_scaling_function_case_flag curl_curl_coeff -bmass_trick .true. -coefficient_case constant | tee $TMP_OUTPUT"
            echo $COMMAND
            eval $COMMAND

            # Check Number of iterations is within allowed range 
            exit_code1=0
            n1=$(grep "CG converged to " $TMP_OUTPUT |sed s/" "" "*/"#"/g|cut -f6 -d#)
            n2=$(grep "CG converged to " $TEST_INPUT_DATA_PATH/test2_convergence |sed s/" "" "*/"#"/g|cut -f6 -d#)
            if [ $(python -c "print \"%d\" % (1 if abs($n1-$n2)>$allowed_variation*$n2 else 0)") = 1 ]; then 
                final_exit_code=1
                exit $final_exit_code 
            fi 
            rm -f $TMP_OUTPUT  


            #test 3 - Unknown solution w/ channel inclusions -----------------------------------------------
            COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH $static_triang_generate_from_flag struct_hex_mesh_generator $prefix_flag 'square' $struct_hex_mesh_generator_num_dims_flag 3 $struct_hex_mesh_generator_num_cells_x_dim_flag 12 12 12 $struct_hex_mesh_generator_num_parts_x_dim_flag 2 2 2 1 1 1 $struct_hex_mesh_generator_num_levels_flag 2  $coarse_space_use_faces_flag .false. -order 1 -wsolution .false. -edge_cont tangential_average_and_first_order_moment -materials_case channels -channels_ratio 0.5 $bddc_scaling_function_case_flag curl_curl_coeff -bmass_trick .true. -coefficient_case constant -mass_coeff_white 1.0 -curl_curl_coeff_white 1e2 -mass_coeff_black 1e-2 -curl_curl_coeff_black 1e4  | tee $TMP_OUTPUT"
            echo $COMMAND
            eval $COMMAND


            # Check Number of iterations is within allowed range 
            exit_code1=0
            n1=$(grep "CG converged to " $TMP_OUTPUT |sed s/" "" "*/"#"/g|cut -f6 -d#)
            n2=$(grep "CG converged to " $TEST_INPUT_DATA_PATH/test3_convergence |sed s/" "" "*/"#"/g|cut -f6 -d#)
            if [ $(python -c "print \"%d\" % (1 if abs($n1-$n2)>$allowed_variation*$n2 else 0)") = 1 ]; then 
                final_exit_code=1
                exit $final_exit_code 
            fi 
            rm -f $TMP_OUTPUT


            #test 4 - Unknown solution w/ analytical functions describing coeffs ---------------------------------
            COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH $static_triang_generate_from_flag struct_hex_mesh_generator $prefix_flag 'square' $struct_hex_mesh_generator_num_dims_flag 3 $struct_hex_mesh_generator_num_cells_x_dim_flag 12 12 12 $struct_hex_mesh_generator_num_parts_x_dim_flag 2 2 2 1 1 1 $struct_hex_mesh_generator_num_levels_flag 2 $coarse_space_use_faces_flag .false. -order 1 -wsolution .false. -edge_cont tangential_average_and_first_order_moment -materials_case heterogeneous $bddc_scaling_function_case_flag weighted_coefficients -bmass_trick .false. -rpb_bddc_threshold 1e3 -coefficient_case sinusoidal -mass_coeff_white 3 -curl_curl_coeff_white 3 -num_peaks_curl_curl_coeff 2 -num_peaks_mass_coeff 2  | tee $TMP_OUTPUT"
            echo $COMMAND
            eval $COMMAND


            # Check Number of iterations is within allowed range 
            exit_code1=0
            n1=$(grep "CG converged to " $TMP_OUTPUT |sed s/" "" "*/"#"/g|cut -f6 -d#)
            n2=$(grep "CG converged to " $TEST_INPUT_DATA_PATH/test4_convergence |sed s/" "" "*/"#"/g|cut -f6 -d#)
            if [ $(python -c "print \"%d\" % (1 if abs($n1-$n2)>$allowed_variation*$n2 else 0)") = 1 ]; then 
                final_exit_code=1
                exit $final_exit_code 
            fi 
            rm -f $TMP_OUTPUT  


            #test 5 - Analytical solution w/ unit constant coeffs and tetrahedral, unstructured mesh with pathological edge cases (see art031, sect 4) --------------
            COMMAND="$DIR/part $dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $dir_path_out_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $prefix_flag cube_tetrahedra $num_parts_flag 2 $num_levels_distribution_flag 2 $num_parts_x_level_flag 8 1 0 0 0 "
            echo $COMMAND
            eval $COMMAND

            for order in 1 2; do
                COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 9 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH $static_triang_generate_from_flag mesh_data_files $coarse_space_use_faces_flag .false. -edge_cont tangential_average_and_first_order_moment -order $order $dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $prefix_flag 'cube_tetrahedra' -wsolution .false. | tee $TMP_OUTPUT "
                echo $COMMAND
                eval $COMMAND

                # Check Number of iterations is within allowed range 
                exit_code1=0
                n1=$(grep "CG converged to " $TMP_OUTPUT |sed s/" "" "*/"#"/g|cut -f6 -d#)
                n2=$(grep "CG converged to " $TEST_INPUT_DATA_PATH/test5_convergence_order$order |sed s/" "" "*/"#"/g|cut -f6 -d#)
                if [ $(python -c "print \"%d\" % (1 if abs($n1-$n2)>$allowed_variation*$n2 else 0)") = 1 ]; then 
                  final_exit_code=1
                  exit $final_exit_code 
                fi 
                rm -f $TMP_OUTPUT  
            done 

            rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.mesh.*
            rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.prt.*
            rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.env.*
            rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.*post.*

        else
            echo "$0: input data directory not found!"
            final_exit_code=1
        fi
    else
        echo "$0: BINARY not found! Value PROVIDED: $4."
        final_exit_code=1
    fi
else
    echo "$0: PART not found! Value PROVIDED: $DIR/part."
    final_exit_code=1
fi
rm -Rf $TEST_COMBINATIONS_FILE_NAME
exit $final_exit_code 
