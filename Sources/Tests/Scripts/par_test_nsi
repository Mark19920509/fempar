#!/bin/sh
export MKL_NUM_THREADS=1
export OMP_NUM_THREADS=1
MPIEXEC_PATH="$1"
MPIEXEC_NP_FLAG="$2"
MPIEXEC_PREFLAGS="$3"
TEST_BINARY_PATH="$4"
TEST_INPUT_DATA_PATH="$5"
TEST_SCRIPTS_PATH="$6"
final_exit_code=0
DIR=$(dirname "$TEST_BINARY_PATH")

# Load FEMPAR CLAs
. $TEST_SCRIPTS_PATH/fempar_cla_names

if [ -d "$DIR" ]
then
if [ -f "$TEST_BINARY_PATH" ]
then
  if [ -d "$TEST_INPUT_DATA_PATH" ] 
  then

    # Square + Quads (4 parts)
    if [ $final_exit_code -eq 0 ] 
    then
      for p_order in 1
      do
        for v_order in 2 3
        do
            COMMAND="$DIR/$mesh_partitioner_program $dir_path_flag $TEST_INPUT_DATA_PATH/square_quads.gid $mesh_partitioner_dir_path_flag $TEST_INPUT_DATA_PATH/square_quads.gid $mesh_partitioner_prefix_flag square_quads $prefix_flag square_quads $mesh_partitioner_num_levels_distribution_flag 2 $mesh_partitioner_num_parts_x_level_flag 4 1"
            echo $COMMAND
            eval $COMMAND

            COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 5 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH -order $v_order $p_order $static_triang_generate_from_flag mesh_data_files $static_triang_mesh_data_files_dir_path_flag $TEST_INPUT_DATA_PATH/square_quads.gid $static_triang_mesh_data_files_prefix_flag 'square_quads' $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/square_quads.gid $mesh_prefix_flag 'square_quads' $dir_path_flag $TEST_INPUT_DATA_PATH/square_quads.gid $prefix_flag 'square_quads'"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
               final_exit_code=1
            fi
            rm -f $TEST_INPUT_DATA_PATH/square_quads.gid/square_quads.mesh.* 
    	    rm -f $TEST_INPUT_DATA_PATH/square_quads.gid/square_quads.prt.* 
    	    rm -f $TEST_INPUT_DATA_PATH/square_quads.gid/square_quads.env.*
    	    rm -f $TEST_INPUT_DATA_PATH/square_quads.gid/square_quads.*post.*
             if [ $final_exit_code -eq 1 ] 
             then
               break 2
             fi
        done
      done
    fi


    # Square + Tets        
    if [ $final_exit_code -eq 0 ] 
    then
      for p_gorder in 1
      do
       for v_order in 2 3
        do
	         COMMAND="$DIR/$mesh_partitioner_program $dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $mesh_partitioner_dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $mesh_partitioner_prefix_flag square_tetrahedra $prefix_flag square_tetrahedra $mesh_partitioner_num_levels_distribution_flag 2 $mesh_partitioner_num_parts_x_level_flag 4 1"
             echo $COMMAND
             eval $COMMAND

             COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 5 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH -order $v_order $p_order $static_triang_generate_from_flag mesh_data_files $static_triang_mesh_data_files_dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $static_triang_mesh_data_files_prefix_flag 'square_tetrahedra' $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $mesh_prefix_flag 'square_tetrahedra' $dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $prefix_flag 'square_tetrahedra'"
             echo $COMMAND
             eval $COMMAND
             if [ $? -ne 0 ]
             then
               final_exit_code=1
             fi
             rm $TEST_INPUT_DATA_PATH/square_tetrahedra.gid/square_tetrahedra.mesh.* 
    	     rm $TEST_INPUT_DATA_PATH/square_tetrahedra.gid/square_tetrahedra.prt.* 
    	     rm $TEST_INPUT_DATA_PATH/square_tetrahedra.gid/square_tetrahedra.env.*
    	     rm $TEST_INPUT_DATA_PATH/square_tetrahedra.gid/square_tetrahedra.*post.*
             if [ $final_exit_code -eq 1 ] 
             then
               break 2
             fi
        done
      done
    fi

    # Cube + Hexas
    if [ $final_exit_code -eq 0 ] 
    then        
      for p_order in 1
      do
       for v_order in 2 3
        do
	         COMMAND="$DIR/$mesh_partitioner_program $dir_path_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid $mesh_partitioner_dir_path_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid $mesh_partitioner_prefix_flag cube_hexas $prefix_flag cube_hexas $mesh_partitioner_num_levels_distribution_flag 2 $mesh_partitioner_num_parts_x_level_flag 4 1"
             echo $COMMAND
             eval $COMMAND

             COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 5 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH -order $v_order $p_order $static_triang_generate_from_flag mesh_data_files $static_triang_mesh_data_files_dir_path_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid $static_triang_mesh_data_files_prefix_flag 'cube_hexas' $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid $mesh_prefix_flag 'cube_hexas' $dir_path_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid $prefix_flag 'cube_hexas'"
             echo $COMMAND
             eval $COMMAND
             if [ $? -ne 0 ] 
             then
               final_exit_code=1
             fi
             rm $TEST_INPUT_DATA_PATH/cube_hexas.gid/cube_hexas.mesh.*
    	     rm $TEST_INPUT_DATA_PATH/cube_hexas.gid/cube_hexas.prt.*
    	     rm $TEST_INPUT_DATA_PATH/cube_hexas.gid/cube_hexas.env.*
    	     rm $TEST_INPUT_DATA_PATH/cube_hexas.gid/cube_hexas.*post.*
             if [ $final_exit_code -eq 1 ] 
             then
               break 2
             fi
         done
      done
    fi

    # Cube + Tets        
    if [ $final_exit_code -eq 0 ] 
    then
      for p_order in 1
      do
       for v_order in 2 
        do
             COMMAND="$DIR/$mesh_partitioner_program $dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $mesh_partitioner_dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $mesh_partitioner_prefix_flag cube_tetrahedra $prefix_flag cube_tetrahedra $mesh_partitioner_num_levels_distribution_flag 2 $mesh_partitioner_num_parts_x_level_flag 4 1"
             echo $COMMAND
             eval $COMMAND

             COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 5 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH -order $v_order $p_order $static_triang_generate_from_flag mesh_data_files $static_triang_mesh_data_files_dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $static_triang_mesh_data_files_prefix_flag 'cube_tetrahedra' $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $mesh_prefix_flag 'cube_tetrahedra' $dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $prefix_flag 'cube_tetrahedra'"
             echo $COMMAND
             eval $COMMAND
             if [ $? -ne 0 ] 
             then
               final_exit_code=1
             fi
             rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.mesh.*
    	     rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.prt.*
    	     rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.env.*
    	     rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.*post.*
             if [ $final_exit_code -eq 1 ] 
             then
               break 2
             fi
         done
      done
    fi


   else
      echo "$0: input data directory not found!"
      final_exit_code=1
   fi
else
  echo "$0: BINARY not found! Value PROVIDED: $4."
  final_exit_code=1
fi
else
  echo "$0: PART not found! Value PROVIDED: $DIR/part."
  final_exit_code=1
fi
rm -Rf $TEST_COMBINATIONS_FILE_NAME
exit $final_exit_code 

