#!/bin/sh
TEST_BINARY_PATH="$1"
TEST_INPUT_DATA_PATH="$2"
TEST_SCRIPTS_PATH="$3"
final_exit_code=0

# Load FEMPAR CLAs
. $TEST_SCRIPTS_PATH/fempar_cla_names

if [ -f "$TEST_BINARY_PATH" ]
then
 if [ -d "$TEST_INPUT_DATA_PATH" ] 
   then
    ###############################################################################################################################
    # Scalar-valued tests
    ###############################################################################################################################

    # Square + Quads    
    if [ $final_exit_code -eq 0 ] 
    then      
      for gorder in 1 2 5
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/square_quads.gid $mesh_prefix_flag square_quads -order $order -gorder $gorder "
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Square + Quads + dG 
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 2 5
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/square_quads.gid $mesh_prefix_flag square_quads -order $order -gorder $gorder -f dG"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Square + Quads + Hybrid Void/Full FEs (half pattern)
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_dims_flag 2 $struct_hex_mesh_generator_num_cells_x_dim_flag 10 10 $struct_hex_mesh_generator_domain_limits_flag 0.0 1.0 0.0 1.0 -order $order -gorder $gorder -use-voids T -use-voids-case half "
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi
      
    # Square + Quads + Hybrid Void/Full FEs + dG (half pattern)
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_dims_flag 2 $struct_hex_mesh_generator_num_cells_x_dim_flag 10 10 $struct_hex_mesh_generator_domain_limits_flag 0.0 1.0 0.0 1.0 -order $order -gorder $gorder -use-voids T -use-voids-case half -f dG"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Square + Quads + Hybrid Void/Full FEs (quarter pattern)
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_dims_flag 2 $struct_hex_mesh_generator_num_cells_x_dim_flag 10 10 $struct_hex_mesh_generator_domain_limits_flag 0.0 1.0 0.0 1.0 -order $order -gorder $gorder -use-voids T -use-voids-case quarter "
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi
      
    # Square + Quads + Hybrid Void/Full FEs + dG (quarter pattern)
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_dims_flag 2  $struct_hex_mesh_generator_num_cells_x_dim_flag 10 10 $struct_hex_mesh_generator_domain_limits_flag 0.0 1.0 0.0 1.0 -order $order -gorder $gorder -use-voids T -use-voids-case quarter -f dG"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Circle + Quads
    if [ $final_exit_code -eq 0 ] 
    then          
      for gorder in 1 2 5
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/circle.gid $mesh_prefix_flag circle -order $order -gorder $gorder"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Square +  Tetrahedra       
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 #2 3 4 5 6
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $mesh_prefix_flag square_tetrahedra -order $order -gorder $gorder"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Square +  Tetrahedra + dG      
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 #2 3 4 5 6
      do
       for order in 1 2 5
       do
         if [ $order -ge $gorder ]
         then
           COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $mesh_prefix_flag square_tetrahedra -order $order -gorder $gorder -f dG"
           echo $COMMAND
           eval $COMMAND
           if [ $? -ne 0 ]
           then
            final_exit_code=1
             break 2
           fi
         fi
       done
      done
    fi

    # Cube + Hexas       
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 #2 3 4 5 6
      do
       for order in 1 2 3 #4 5 6
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid/ $mesh_prefix_flag cube_hexas -order $order -gorder $gorder"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Cube + Hexas + dG  
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 #2 3 4 5 6
      do
       for order in 1 2 3 #4 5 6
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid/ $mesh_prefix_flag cube_hexas -order $order -gorder $gorder -f dG"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Cube + Hexas + Hybrid Void/Full FEs (popcorn pattern)
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 1 2 #5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_cells_x_dim_flag 18 18 18 -order $order -gorder $gorder -use-voids T -use-voids-case popcorn "
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi
      
    # Cube + Hexas + Hybrid Void/Full FEs + dG (popcorn pattern)
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 1 #2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_cells_x_dim_flag 18 18 18 -order $order -gorder $gorder -use-voids T -use-voids-case popcorn -f dG "
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Cube + Tetrahedra
    if [ $final_exit_code -eq 0 ] 
    then        for gorder in 1 #2 3 4 5 6
      do
        for order in 1 2 4
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH  $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ $mesh_prefix_flag cube_tetrahedra -order $order -gorder $gorder"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done
    fi
      
    # Cube + Tetrahedra + dG
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 #2 3 4 5 6
      do
        for order in 1 2 4
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH  $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ $mesh_prefix_flag cube_tetrahedra -order $order -gorder $gorder -f dG"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done
    fi

    ###############################################################################################################################
    # Vector-valued tests
    ###############################################################################################################################

    # Square + Quads        
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 2 5
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/square_quads.gid $mesh_prefix_flag square_quads -order $order -gorder $gorder  -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done
    fi

    # Square + Quads + Hybrid Void/Full FEs (half pattern)
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_dims_flag 2 $struct_hex_mesh_generator_num_cells_x_dim_flag 10 10 $struct_hex_mesh_generator_domain_limits_flag 0.0 1.0 0.0 1.0 -order $order -gorder $gorder -use-voids T -use-voids-case half -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done
    fi

    # Square + Quads + Hybrid Void/Full FEs (quarter pattern)
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_dims_flag 2 $struct_hex_mesh_generator_num_cells_x_dim_flag 10 10 $struct_hex_mesh_generator_domain_limits_flag 0.0 1.0 0.0 1.0 -order $order -gorder $gorder -use-voids T -use-voids-case quarter -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done
    fi

    # Circle + Quads        
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 2 5
      do
       for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/circle.gid $mesh_prefix_flag circle -order $order -gorder $gorder  -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done
    fi

    # Square +  Tetrahedra       
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 #2 3 4 5 6
      do
        for order in 1 2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $mesh_prefix_flag square_tetrahedra -order $order -gorder $gorder  -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done
    fi

    # Cube + Hexas       
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 #2 3 4 5 6
      do
       for order in 1 2 3 #4 5 6
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid/ $mesh_prefix_flag cube_hexas -order $order -gorder $gorder  -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done
    fi
      
    # Cube + Hexas + Hybrid Void/Full FEs (popcorn pattern)
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 1 #2 5
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_cells_x_dim_flag 18 18 18 -order $order -gorder $gorder -use-voids T -use-voids-case popcorn -lt vector "
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
            fi
          fi
        done
      done
    fi

    # Cube + Tetrahedra
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 #2 3 4 5 6
      do
        for order in 1 2 4
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH  $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ $mesh_prefix_flag cube_tetrahedra -order $order -gorder $gorder  -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
            fi
          fi
        done
      done
    fi

   else
      echo "$0: input data directory not found!"
      final_exit_code=1
   fi
else
  echo "$0: BINARY not found! Value PROVIDED: $1."
  final_exit_code=1
fi
rm -Rf $TEST_INPUT_FILE
exit $final_exit_code
