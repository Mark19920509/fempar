#!/bin/sh
TEST_BINARY_PATH="$1"
TEST_INPUT_DATA_PATH="$2"
TEST_SCRIPTS_PATH="$3"
final_exit_code=0

# Load FEMPAR CLAs
. $TEST_SCRIPTS_PATH/fempar_cla_names

if [ -f "$TEST_BINARY_PATH" ]
then
 if [ -d "$TEST_INPUT_DATA_PATH" ] 
   then
    ###############################################################################################################################
    # Scalar-valued tests
    ###############################################################################################################################

    # Square + Quads + Hybrid Void/Full FEs + dG (quarter pattern)
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 4
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_cells_x_dim_flag 5 5 -order $order -gorder $gorder -use-voids T -use-voids-case quarter -f dG"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Circle + Quads        
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 4
      do
       for order in 4
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/circle.gid $mesh_prefix_flag circle $dir_path_flag $TEST_INPUT_DATA_PATH/circle.gid $output_handler_prefix_flag circle -order $order -gorder $gorder"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Square + Triangles + dG      
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
       for order in 1
       do
         if [ $order -ge $gorder ]
         then
           COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $mesh_prefix_flag square_tetrahedra $mesh_prefix_flag square_tetrahedra $dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $output_handler_prefix_flag square_tetrahedra -order $order -gorder $gorder -f dG"
           echo $COMMAND
           eval $COMMAND
           if [ $? -ne 0 ]
           then
            final_exit_code=1
            break 2
           fi
         fi
       done
      done
    fi
     
    # Cube + Tetrahedra + dG
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1
      do
        for order in 1
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH  $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ $mesh_prefix_flag cube_tetrahedra $dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ $output_handler_prefix_flag cube_tetrahedra -order $order -gorder $gorder -f dG"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    ###############################################################################################################################
    # Vector-valued tests
    ###############################################################################################################################

    # Circle + Quads        
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 4
      do
       for order in 4
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/circle.gid $mesh_prefix_flag circle $dir_path_flag $TEST_INPUT_DATA_PATH/circle.gid $output_handler_prefix_flag circle -order $order -gorder $gorder  -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Cube + Tetrahedra
    if [ $final_exit_code -eq 0 ] 
    then  
      for gorder in 1 
      do
        for order in 1
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH  $static_triang_generate_from_flag MESH_DATA_FILES $mesh_dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ $mesh_prefix_flag cube_tetrahedra $dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/ $output_handler_prefix_flag cube_tetrahedra -order $order -gorder $gorder  -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

   else
      echo "$0: input data directory not found!"
      final_exit_code=1
   fi
else
  echo "$0: BINARY not found! Value PROVIDED: $1."
  final_exit_code=1
fi
rm -Rf $TEST_INPUT_FILE
exit $final_exit_code
