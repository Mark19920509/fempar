#!/bin/sh
export MKL_NUM_THREADS=1
export OMP_NUM_THREADS=1
MPIEXEC_PATH="$1"
MPIEXEC_NP_FLAG="$2"
MPIEXEC_PREFLAGS="$3"
TEST_BINARY_PATH="$4"
TEST_INPUT_DATA_PATH="$5"
TEST_SCRIPTS_PATH="$6"
final_exit_code=0
DIR=$(dirname "$TEST_BINARY_PATH")
echo "$DIR"

# Load FEMPAR CLAs
. $TEST_SCRIPTS_PATH/fempar_cla_names

if [ -d "$DIR" ]
then
if [ -f "$TEST_BINARY_PATH" ]
then
  if [ -d "$TEST_INPUT_DATA_PATH" ] 
  then

    # Square + Quads (4 parts)
    if [ $final_exit_code -eq 0 ] 
    then
        for order in 1 2 3 # 4 5 6
        do
            COMMAND="$DIR/part $dir_path_flag $TEST_INPUT_DATA_PATH/square_quads.gid $dir_path_out_flag $TEST_INPUT_DATA_PATH/square_quads.gid $prefix_flag square_quads $num_parts_flag 3 $num_levels_distribution_flag 3 $num_parts_x_level_flag 4 2 1 0 0 "
            echo $COMMAND
            eval $COMMAND

            COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 7 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH $dir_path_flag $TEST_INPUT_DATA_PATH/square_quads.gid $prefix_flag 'square_quads' $struct_hex_mesh_generator_num_levels_flag 3 -order $order"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
              final_exit_code=1
            fi
	        rm -f $TEST_INPUT_DATA_PATH/square_quads.gid/square_quads.mesh.* 
    	    rm -f $TEST_INPUT_DATA_PATH/square_quads.gid/square_quads.prt.* 
    	    rm -f $TEST_INPUT_DATA_PATH/square_quads.gid/square_quads.env.*
    	    rm -f $TEST_INPUT_DATA_PATH/square_quads.gid/square_quads.*post.*
             if [ $final_exit_code -eq 1 ] 
             then
               break 2
             fi
        done
    fi

    # Square + Tets        
    if [ $final_exit_code -eq 0 ] 
    then
       for order in 1 2 3 #4 5 6
        do
	         COMMAND="$DIR/part $dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $dir_path_out_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $prefix_flag square_tetrahedra $num_parts_flag 3 $num_levels_distribution_flag 3 $num_parts_x_level_flag 4 2 1 0 0 "
             echo $COMMAND
             eval $COMMAND

             COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 7 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH $dir_path_flag $TEST_INPUT_DATA_PATH/square_tetrahedra.gid $prefix_flag 'square_tetrahedra' $struct_hex_mesh_generator_num_levels_flag 3 -order $order"
             echo $COMMAND
             eval $COMMAND
             if [ $? -ne 0 ]
             then
               final_exit_code=1
             fi
             rm $TEST_INPUT_DATA_PATH/square_tetrahedra.gid/square_tetrahedra.mesh.* 
    	     rm $TEST_INPUT_DATA_PATH/square_tetrahedra.gid/square_tetrahedra.prt.* 
    	     rm $TEST_INPUT_DATA_PATH/square_tetrahedra.gid/square_tetrahedra.env.*
    	     rm $TEST_INPUT_DATA_PATH/square_tetrahedra.gid/square_tetrahedra.*post.*
             if [ $final_exit_code -eq 1 ] 
             then
               break 2
             fi
        done
    fi

    # Cube + Hexas
    if [ $final_exit_code -eq 0 ] 
    then        
       for order in 1 2 3 #1 2 3 4 5 6
        do
             COMMAND="$DIR/part $dir_path_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid $dir_path_out_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid $prefix_flag cube_hexas $num_parts_flag 3 $num_levels_distribution_flag 3 $num_parts_x_level_flag 4 2 1 0 0 "
             echo $COMMAND
             eval $COMMAND

             COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 7 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH $dir_path_flag $TEST_INPUT_DATA_PATH/cube_hexas.gid $prefix_flag 'cube_hexas' $struct_hex_mesh_generator_num_levels_flag 3 -order $order"
             echo $COMMAND
             eval $COMMAND
             if [ $? -ne 0 ] 
             then
               final_exit_code=1
             fi
             rm $TEST_INPUT_DATA_PATH/cube_hexas.gid/cube_hexas.mesh.*
    	     rm $TEST_INPUT_DATA_PATH/cube_hexas.gid/cube_hexas.prt.*
    	     rm $TEST_INPUT_DATA_PATH/cube_hexas.gid/cube_hexas.env.*
    	     rm $TEST_INPUT_DATA_PATH/cube_hexas.gid/cube_hexas.*post.*
             if [ $final_exit_code -eq 1 ] 
             then
               break 2
             fi
        done
    fi

    # Cube + Tets
    if [ $final_exit_code -eq 0 ] 
    then        
       for order in 1 2 #1 2 3 4 5 6
        do
             COMMAND="$DIR/part $dir_path_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $dir_path_out_flag $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $prefix_flag cube_tetrahedra $num_parts_flag 3 $num_levels_distribution_flag 3 $num_parts_x_level_flag 4 2 1 0 0 "
             echo $COMMAND
             eval $COMMAND

             COMMAND="$MPIEXEC_PATH $MPIEXEC_NP_FLAG 7 $MPIEXEC_PREFLAGS $TEST_BINARY_PATH $dir_path_flag  $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid $prefix_flag 'cube_tetrahedra' $struct_hex_mesh_generator_num_levels_flag 3 -order $order"
             echo $COMMAND
             eval $COMMAND
             if [ $? -ne 0 ] 
             then
               final_exit_code=1
             fi
             rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.mesh.*
    	     rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.prt.*
    	     rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.env.*
    	     rm $TEST_INPUT_DATA_PATH/cube_tetrahedra.gid/cube_tetrahedra.*post.*
             if [ $final_exit_code -eq 1 ] 
             then
               break 2
             fi
        done
    fi


   else
      echo "$0: input data directory not found!"
      final_exit_code=1
   fi
else
  echo "$0: BINARY not found! Value PROVIDED: $4."
  final_exit_code=1
fi
else
  echo "$0: PART not found! Value PROVIDED: $DIR/part."
  final_exit_code=1
fi
rm -Rf $TEST_COMBINATIONS_FILE_NAME
exit $final_exit_code 

