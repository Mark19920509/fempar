#!/bin/sh
SCRIPT_NAME=$(basename $0)
TEST_BINARY_PATH="$1"
TEST_INPUT_DATA_PATH="$2"
TEST_SCRIPTS_PATH="$3"
final_exit_code=0

# Load FEMPAR CLAs
. $TEST_SCRIPTS_PATH/fempar_cla_names

if [ -f "$TEST_BINARY_PATH" ]
then

    ###############################################################################################################################
    # Scalar-valued tests
    ###############################################################################################################################

    # Square + Quads 
    if [ $final_exit_code -eq 0 ] 
    then    
       for order in 3 4 5 6 7 8 #2 
        do
            COMMAND="$TEST_BINARY_PATH $p4est_triang_num_dims_flag 2 $p4est_triang_domains_limits_flag 0.0 1.0 0.0 1.0 -order $order -wsolution .true. $output_handler_dir_path_flag $SCRIPT_NAME $prefix_flag  $SCRIPT_NAME"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
        done
    fi      

    # Square + Quads + dG
    if [ $final_exit_code -eq 0 ] 
    then    
       for order in 3 4 5 6 7 8 #2
        do
            COMMAND="$TEST_BINARY_PATH $p4est_triang_num_dims_flag 2 $p4est_triang_domains_limits_flag 0.0 1.0 0.0 1.0 -order $order -f dG"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
        done
    fi
      
    # Square + Quads + Hybrid Void/Full FEs (half pattern)
    if [ $final_exit_code -eq 0 ] 
    then
       for order in 2
        do
            COMMAND="$TEST_BINARY_PATH $p4est_triang_num_dims_flag 2 $p4est_triang_domains_limits_flag 0.0 1.0 0.0 1.0 -order $order -use-voids T -use-voids-case half -wsolution .true. $output_handler_dir_path_flag $SCRIPT_NAME $prefix_flag  $SCRIPT_NAME"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
        done
    fi
      
    # Square + Quads + Hybrid Void/Full FEs + dG (half pattern)
    if [ $final_exit_code -eq 0 ] 
    then    
       for order in 2
        do
            COMMAND="$TEST_BINARY_PATH $p4est_triang_num_dims_flag 2 $p4est_triang_domains_limits_flag 0.0 1.0 0.0 1.0 -order $order -use-voids T -use-voids-case half -wsolution .true. -f dG $output_handler_dir_path_flag $SCRIPT_NAME $prefix_flag  $SCRIPT_NAME"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
        done
    fi
      
    ###############################################################################################################################
    # Vector-valued tests
    ###############################################################################################################################

    # Square + Quads
    if [ $final_exit_code -eq 0 ] 
    then
       for order in 3 4 5 6 7 8 #2 
        do
            COMMAND="$TEST_BINARY_PATH $p4est_triang_num_dims_flag 2 $p4est_triang_domains_limits_flag 0.0 1.0 0.0 1.0 -order $order -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
        done
    fi

    # Cube + Hexas
    if [ $final_exit_code -eq 0 ] 
    then     
       for order in 3 4 #2
        do
            COMMAND="$TEST_BINARY_PATH $p4est_triang_num_dims_flag 3  -order $order -wsolution .true. $output_handler_dir_path_flag $SCRIPT_NAME $prefix_flag  $SCRIPT_NAME"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
        done
    fi

else
  echo "$0: BINARY not found! Value PROVIDED: $1."
  final_exit_code=1
fi
rm -Rf $TEST_INPUT_FILE
exit $final_exit_code
