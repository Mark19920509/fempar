#!/bin/bash
TEST_BINARY_PATH="$1"
TEST_INPUT_DATA_PATH="$2"
TEST_SCRIPTS_PATH="$3"
final_exit_code=0

# Load FEMPAR CLAs
. $TEST_SCRIPTS_PATH/fempar_cla_names

lst_integration_schemes="forward_euler#backward_euler#trapezoidal_rule#mid_point_implicit#mid_point_explicit#imex_rk_2_2_1_implicit#imex_rk_2_2_1_explicit#imex_rk_2_2_2_implicit#imex_rk_2_2_2_explicit#imex_rk_2_3_implicit#imex_rk_2_3_explicit#runge_kutta_3#runge_kutta_4#runge_kutta_4_3_8#imex_rk_4_3_implicit#imex_rk_4_3_explicit"

num_integration_schemes=16

if [ -f "$TEST_BINARY_PATH" ]
then
# if [ -d "$TEST_INPUT_DATA_PATH" ] 
#   then
      ###############################################################################################################################
      # Convergence order tests of transient poisson
      ###############################################################################################################################

      id_scheme=1
      while [ $id_scheme -le $num_integration_schemes ]
      do 
          integration_scheme=$(echo $lst_integration_schemes|cut -f$id_scheme -d#)
          COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_dims_flag 2 $struct_hex_mesh_generator_num_cells_x_dim_flag 3 3 $struct_hex_mesh_generator_is_dir_periodic_flag 0 0 $struct_hex_mesh_generator_domain_limits_flag 0.0 1.0 0.0 1.0 -rk-scheme $integration_scheme -test .true."
          echo $COMMAND
          eval $COMMAND
          if [ $? -ne 0 ]
          then
            final_exit_code=1
            break
          fi
          
          if [ "$(echo $integration_scheme | grep -E 'backward|implicit')" != "" ]
          then
            COMMAND="$TEST_BINARY_PATH $static_triang_generate_from_flag STRUCT_HEX_MESH_GENERATOR $struct_hex_mesh_generator_num_dims_flag 2 $struct_hex_mesh_generator_num_cells_x_dim_flag 3 3 $struct_hex_mesh_generator_is_dir_periodic_flag 0 0 $struct_hex_mesh_generator_domain_limits_flag 0.0 1.0 0.0 1.0 -rk-scheme $integration_scheme -dt 1 -tf 10"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ]
            then
              final_exit_code=1
              break
            fi
          fi
      let id_scheme=id_scheme+1
      done
# Add more size and shape variations for non-fast test
#   else
#      echo "$0: input data directory not found!"
#      final_exit_code=1
#   fi
else
  echo "$0: BINARY not found! Value PROVIDED: $1."
  final_exit_code=1
fi
rm -Rf $TEST_INPUT_FILE
exit $final_exit_code
