#!/bin/sh
SCRIPT_NAME=$(basename $0)
TEST_BINARY_PATH="$1"
TEST_INPUT_DATA_PATH="$2"
TEST_SCRIPTS_PATH="$3"
final_exit_code=0

# Load FEMPAR CLAs
. $TEST_SCRIPTS_PATH/fempar_cla_names

if [ -f "$TEST_BINARY_PATH" ]
then
    ###############################################################################################################################
    # Scalar-valued tests
    ###############################################################################################################################

    # Square + Quads 
    if [ $final_exit_code -eq 0 ] 
    then    
      for gorder in 1
      do
       for order in 2 
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $triang_generate_flag 1 $p4est_triang_num_dims_flag 2  -order $order -wsolution .true. $dir_path_out_flag $SCRIPT_NAME $prefix_flag $SCRIPT_NAME"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

    # Square + Quads + dG
    if [ $final_exit_code -eq 0 ] 
    then    
      for gorder in 1
      do
       for order in 2
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $triang_generate_flag 1 $p4est_triang_num_dims_flag 2 -order $order -f dG"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi
            
    # Square + Quads + Hybrid Void/Full FEs (quarter pattern)

    if [ $final_exit_code -eq 0 ] 
    then    
      for gorder in 1
      do
       for order in 2
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $triang_generate_flag 1 $p4est_triang_num_dims_flag 2 -order $order -use-voids T -use-voids-case quarter -wsolution .true. $dir_path_out_flag $SCRIPT_NAME $prefix_flag $SCRIPT_NAME"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi
      
    # Square + Quads + Hybrid Void/Full FEs + dG (quarter pattern)
    if [ $final_exit_code -eq 0 ] 
    then    
      for gorder in 1
      do
       for order in 2
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $triang_generate_flag 1 $p4est_triang_num_dims_flag 2 -order $order -use-voids T -use-voids-case quarter -wsolution .true. -f dG $dir_path_out_flag $SCRIPT_NAME $prefix_flag $SCRIPT_NAME"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi
      
    ###############################################################################################################################
    # Vector-valued tests
    ###############################################################################################################################

    # Square + Quads
    if [ $final_exit_code -eq 0 ] 
    then    
      for gorder in 1
      do
       for order in 2 
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $triang_generate_flag 1 $p4est_triang_num_dims_flag 2  -order $order -lt vector"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi
      
    # Cube + Hexas 
    if [ $final_exit_code -eq 0 ] 
    then    
      for gorder in 1
      do
       for order in 2 
        do
          if [ $order -ge $gorder ]
          then
            COMMAND="$TEST_BINARY_PATH $triang_generate_flag 1 $p4est_triang_num_dims_flag 3  -order $order -wsolution .true. $dir_path_out_flag $SCRIPT_NAME $prefix_flag $SCRIPT_NAME"
            echo $COMMAND
            eval $COMMAND
            if [ $? -ne 0 ] 
            then
             final_exit_code=1
             break 2
            fi
          fi
        done
      done
    fi

else
  echo "$0: BINARY not found! Value PROVIDED: $1."
  final_exit_code=1
fi
rm -Rf $TEST_INPUT_FILE
exit $final_exit_code
