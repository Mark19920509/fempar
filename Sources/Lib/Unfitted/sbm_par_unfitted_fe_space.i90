! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!========================================================================================
subroutine pufs_create_same_reference_fes_on_all_cells(&
  this, &
  triangulation, &
  reference_fes, &
  conditions,    & 
  field_blocks,  &
  field_coupling, & 
  generate_global_dof_numbering )
  implicit none
  class(par_unfitted_fe_space_t)            , intent(inout) :: this
  class(triangulation_t)                    , intent(in)    :: triangulation
  type(p_reference_fe_t)                    , intent(in)    :: reference_fes(:)
  class(conditions_t)             , optional, intent(in)    :: conditions
  integer(ip)                     , optional, intent(in)    :: field_blocks(:)
  logical                         , optional, intent(in)    :: field_coupling(:,:)
  logical                         , optional, intent(in)    :: generate_global_dof_numbering
  mcheck(.false.,'You cannot create an unfitted fe space with the same reference fe on all cells (you need void and non void ref elems)')
end subroutine pufs_create_same_reference_fes_on_all_cells

!========================================================================================
subroutine pufs_create_different_ref_fes_between_cells( &
    this, &
    triangulation, &
    reference_fes, &
    set_ids_to_reference_fes, &
    conditions,    &
    field_blocks,  &
    field_coupling, & 
    generate_global_dof_numbering )
  implicit none
  class(par_unfitted_fe_space_t)            , intent(inout)  :: this
  class(triangulation_t)                    , intent(in)     :: triangulation
  type(p_reference_fe_t)                    , intent(in)     :: reference_fes(:)
  integer(ip)                               , intent(in)     :: set_ids_to_reference_fes(:,:)
  class(conditions_t)               , optional, intent(in)   :: conditions
  integer(ip)                       , optional, intent(in)   :: field_blocks(:)
  logical                           , optional, intent(in)   :: field_coupling(:,:)
  logical                           , optional , intent(in)  :: generate_global_dof_numbering

  call this%free()
  call this%par_fe_space_t%create(triangulation, &
                                  reference_fes, &
                                  set_ids_to_reference_fes, &
                                  conditions, &
                                  field_blocks, &
                                  field_coupling, &
                                  generate_global_dof_numbering)
  select type(triangulation)
  class is (par_unfitted_triangulation_t)
    call this%set_par_unfitted_triangulation(triangulation)
    call this%unfitted_integration%create(this)
  class default
    check(.false.)
  end select
end subroutine pufs_create_different_ref_fes_between_cells

!========================================================================================
subroutine pufs_free(this)
  implicit none
  class(par_unfitted_fe_space_t), intent(inout) :: this
  call this%par_fe_space_t%free()
  this%unfitted_triangulation => null()
  call this%unfitted_integration%free()
end subroutine pufs_free

!========================================================================================
subroutine pufs_create_fe_cell_iterator(this, fe, fe_cell_predicate)
  implicit none
  class(par_unfitted_fe_space_t),                          intent(in)    :: this
  class(fe_cell_iterator_t),                 allocatable,  intent(inout) :: fe
  class(fe_cell_predicate_t),      optional,               intent(in)    :: fe_cell_predicate
  integer(ip) :: istat
  call this%free_fe_cell_iterator(fe)
  allocate(unfitted_fe_cell_iterator_t :: fe, stat=istat); check(istat==0)
  call fe%create(this,fe_cell_predicate)
end subroutine pufs_create_fe_cell_iterator

!!========================================================================================
!subroutine pufs_create_fe_facet_iterator(this, fe_face)
!  implicit none
!  class(par_unfitted_fe_space_t), target,    intent(in)    :: this
!  class(fe_facet_iterator_t), allocatable, intent(inout) :: fe_face
!  class(vef_iterator_t), allocatable :: vef
!  class(triangulation_t), pointer :: triangulation
!  integer(ip)          :: istat
!  call this%free_fe_facet_iterator(fe_face)
!  triangulation => this%get_triangulation()
!  call triangulation%create_vef_iterator(vef)
!  allocate(unfitted_fe_facet_iterator_t :: fe_face, stat=istat); check(istat==0)
!  call fe_face%create(this,vef)
!  call triangulation%free_vef_iterator(vef)
!end subroutine pufs_create_fe_facet_iterator

!========================================================================================
subroutine pufs_set_up_cell_integration ( this, interpolation_duties, cell_map_duties )
  implicit none
  class(par_unfitted_fe_space_t), target, intent(inout) :: this
  type(interpolation_duties_t), optional, intent(in) :: interpolation_duties(:)
  type(cell_map_duties_t)     , optional, intent(in)    :: cell_map_duties

  class(triangulation_t), pointer :: triangulation
  type(environment_t), pointer :: environment

  call this%par_fe_space_t%set_up_cell_integration(interpolation_duties, cell_map_duties)
  
  call this%set_cell_integration_was_set_up(.false.)
  
  triangulation => this%get_triangulation()
  environment => triangulation%get_environment()
  if ( environment%am_i_l1_task() ) then
    call this%unfitted_integration%init_cut_integration()
    call this%unfitted_integration%init_cut_boundary_integration()
  end if
  
  call this%set_cell_integration_was_set_up(.true.)

end subroutine pufs_set_up_cell_integration

!========================================================================================
subroutine pufs_set_up_facet_integration ( this )
  implicit none
  class(par_unfitted_fe_space_t), target, intent(inout) :: this
  call this%serial_fe_space_t%set_up_facet_integration()
  mcheck(.false.,'Not yer supported for par_unfitted_fe_space_t')
  !call this%unfitted_integration%init_cut_fitted_facets_integration()
end subroutine pufs_set_up_facet_integration

subroutine pufs_set_par_unfitted_triangulation ( this, par_unfitted_triangulation ) 
  implicit none
  class(par_unfitted_fe_space_t)             , intent(inout) :: this
  class(par_unfitted_triangulation_t), target, intent(in)    :: par_unfitted_triangulation 
  this%unfitted_triangulation => par_unfitted_triangulation 
end subroutine pufs_set_par_unfitted_triangulation 


