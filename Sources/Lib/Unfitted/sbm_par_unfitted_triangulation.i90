! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!========================================================================================
subroutine put_create(this, parameters, level_set_function, par_environment)
  !$ use omp_lib
  implicit none
  class(par_unfitted_triangulation_t), target, intent(inout) :: this
  type(ParameterList_t),                       intent(in)    :: parameters
  class(level_set_function_t),         target, intent(in)    :: level_set_function
  type(environment_t) ,                target, intent(inout) :: par_environment
  call this%free()
  call this%par_triangulation_t%create(par_environment,parameters)
  
  allocate( marching_cubes_t :: this%boundary_cutter )
  select type ( cutter => this%boundary_cutter )
    type is ( marching_cubes_t )
      call cutter%create(this, level_set_function)
    class DEFAULT
      check( .false. )
  end select
  
end subroutine put_create

!========================================================================================
subroutine put_free(this)
  implicit none
  class(par_unfitted_triangulation_t), target, intent(inout) :: this
  if( allocated( this%boundary_cutter ) ) then
    call this%boundary_cutter%free()
    deallocate( this%boundary_cutter )
  end if
  call this%par_triangulation_t%free()
end subroutine put_free

!========================================================================================
subroutine put_par_triangulation_create( this, environment, parameters)
  implicit none
  class(par_unfitted_triangulation_t), target, intent(inout) :: this
  type(environment_t),                 target, intent(inout) :: environment
  type(ParameterList_t),                       intent(in)    :: parameters
  check(.false.)
end subroutine put_par_triangulation_create

!========================================================================================
subroutine put_create_cell_iterator ( this, cell )
  implicit none
  class(par_unfitted_triangulation_t), intent(in)    :: this
  class(cell_iterator_t), allocatable, intent(inout) :: cell
  integer(ip) :: istat
  call this%free_cell_iterator(cell)
  allocate(unfitted_cell_iterator_t :: cell, stat=istat); check(istat==0)
  call cell%create(this)
end subroutine put_create_cell_iterator

!!!========================================================================================
!!subroutine put_create_vef_iterator ( this, vef )
!!  implicit none
!!  class(par_unfitted_triangulation_t), intent(in)    :: this
!!  class(vef_iterator_t), allocatable, intent(inout) :: vef
!!  integer(ip) :: istat
!!  call this%free_vef_iterator(vef)
!!  allocate(unfitted_vef_iterator_t :: vef, stat=istat); check(istat==0)
!!  call vef%create(this)
!!end subroutine put_create_vef_iterator

!========================================================================================
function put_get_unfitted_boundary_cutter(this) result (val)
  implicit none
  class(par_unfitted_triangulation_t), target, intent(in)    :: this
  class(unfitted_boundary_cutter_t), pointer :: val
  val => this%boundary_cutter
end function put_get_unfitted_boundary_cutter

!========================================================================================
function put_get_num_cut_cells(this) result (val)
  implicit none
  class(par_unfitted_triangulation_t), intent(in)    :: this
  integer(ip) :: val
  val = this%boundary_cutter%get_num_cut_cells()
end function put_get_num_cut_cells

!========================================================================================
function put_get_num_interior_cells(this) result (val)
  implicit none
  class(par_unfitted_triangulation_t), intent(in)    :: this
  integer(ip) :: val
  val = this%boundary_cutter%get_num_interior_cells()
end function put_get_num_interior_cells

!========================================================================================
function put_get_num_exterior_cells(this) result (val)
  implicit none
  class(par_unfitted_triangulation_t), intent(in)    :: this
  integer(ip) :: val
  val = this%boundary_cutter%get_num_exterior_cells()
end function put_get_num_exterior_cells

!========================================================================================
function put_get_max_num_nodes_in_subcell(this) result (val)
  implicit none
  class(par_unfitted_triangulation_t), intent(in)    :: this
  integer(ip) :: val
  val = this%boundary_cutter%get_max_num_nodes_in_subcell()
end function put_get_max_num_nodes_in_subcell

!========================================================================================
function put_get_total_num_subcells(this) result (val)
  implicit none
  class(par_unfitted_triangulation_t), intent(in)    :: this
  integer(ip) :: val
  val = this%boundary_cutter%get_total_num_subcells()
end function put_get_total_num_subcells

!========================================================================================
function put_get_max_num_nodes_in_subfacet(this) result (val)
  implicit none
  class(par_unfitted_triangulation_t), intent(in)    :: this
  integer(ip) :: val
  val = this%boundary_cutter%get_max_num_nodes_in_subfacet()
end function put_get_max_num_nodes_in_subfacet

!========================================================================================
function put_get_total_num_subfacets(this) result (val)
  implicit none
  class(par_unfitted_triangulation_t), intent(in)    :: this
  integer(ip) :: val
  val = this%boundary_cutter%get_total_num_subfacets()
end function put_get_total_num_subfacets

!========================================================================================
subroutine put_print(this)
  implicit none
  class(par_unfitted_triangulation_t), intent(in)    :: this
  call this%boundary_cutter%print()
end subroutine put_print

