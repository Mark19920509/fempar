! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!========================================================================================
subroutine uim_create(this,fe_space)
  implicit none
  class(unfitted_integration_manager_t),intent(inout) :: this
  class(serial_fe_space_t), target, intent(in)    :: fe_space
  class(triangulation_t), pointer :: triangulation
  type(environment_t), pointer :: environment
  call this%free()
  this%fe_space => fe_space
  triangulation => fe_space%get_triangulation()
  environment => triangulation%get_environment()
  if ( environment%am_i_l1_task() ) then
#ifdef DEBUG
    call this%check_assumptions()
#endif
    call this%init_reference_subelem()
  end if
end subroutine uim_create

!========================================================================================
subroutine uim_free( this )
  implicit none
  class(unfitted_integration_manager_t), intent(inout) :: this
  call this%free_reference_subelem()
  call this%free_cut_integration()
  call this%free_cut_boundary_integration()
  call this%free_cut_fitted_facets_integration()
  this%fe_space => null()
end subroutine uim_free

!========================================================================================
subroutine uim_check_assumptions(this)
  implicit none
  class(unfitted_integration_manager_t), intent(inout) :: this

  class(fe_cell_iterator_t), allocatable :: fe
  integer(ip) :: num_fields, ifield
  class(reference_fe_t), pointer :: ref_fe
  class(reference_fe_t), pointer :: ref_fe_1
  class(reference_fe_t), pointer :: geo_ref_fe
  class(reference_fe_t), pointer :: geo_ref_fe_1

  ! Hypothesis:
  ! Same geom ref element in all cells
  ! Same ref elem in all cells, but possibly different among fields

  call this%fe_space%create_fe_cell_iterator(fe)
  num_fields = this%fe_space%get_num_fields()

  ! Check geom ref element
  ! TODO how to check the fe_type? EDIT: I think it is not necessary
  call fe%first()
  geo_ref_fe_1 => fe%get_reference_fe_geo()
  do while (.not. fe%has_finished())
    if (fe%is_local()) then
      geo_ref_fe => fe%get_reference_fe_geo()
      assert( geo_ref_fe_1%get_topology()          ==    geo_ref_fe%get_topology()          )
      assert( geo_ref_fe_1%get_num_dims() ==    geo_ref_fe%get_num_dims() )
      assert( geo_ref_fe_1%get_order()             ==    geo_ref_fe%get_order()             )
      assert( geo_ref_fe_1%get_field_type()        ==    geo_ref_fe%get_field_type()        )
      assert( geo_ref_fe_1%get_continuity()        .eqv. geo_ref_fe%get_continuity()        )
      assert( geo_ref_fe_1%get_conformity()        .eqv. geo_ref_fe%get_conformity()        )
    end if
    call fe%next()
  end do

  do ifield = 1, num_fields

    ! Find first non-empty fe in this field
    call fe%first_local_non_void(ifield)
    ref_fe_1 => fe%get_reference_fe(ifield)
    
    ! Check ref elems
    call fe%first()
    do while (.not. fe%has_finished())
      if (fe%is_local() .and. (.not. fe%is_void(ifield) )) then
        ref_fe     => fe%get_reference_fe(ifield)
        assert( ref_fe_1%get_topology()          ==    ref_fe%get_topology()         )
        assert( ref_fe_1%get_num_dims() ==    ref_fe%get_num_dims())
        assert( ref_fe_1%get_order()             ==    ref_fe%get_order()            )
        assert( ref_fe_1%get_field_type()        ==    ref_fe%get_field_type()       )
        assert( ref_fe_1%get_continuity()        .eqv. ref_fe%get_continuity()       )
        assert( ref_fe_1%get_conformity()        .eqv. ref_fe%get_conformity()       )
      end if
      call fe%next()
    end do

  end do

  call this%fe_space%free_fe_cell_iterator(fe)

end subroutine uim_check_assumptions

!========================================================================================
subroutine uim_init_reference_subelem( this )
  implicit none
  class(unfitted_integration_manager_t), intent(inout) :: this
  
  integer(ip) :: num_dim
  integer(ip) :: p
  
  call this%free_reference_subelem()
  
  num_dim = this%fe_space%get_num_dims()

  ! Create the reference sub-element
  ! TODO a better way to create a reference element?
  ! TODO we assume that the sub-element is always either a triangle or a tetrahedron
  ! TODO We assume also order 1 in the geometrical representation of the unfitted boundary
  call this%geo_reference_subelem%create( topology = topology_tet,&
                                      num_dims = num_dim,&
                                      order = 1,&
                                      field_type = field_type_scalar,&
                                      conformity = .true., &
                                      continuity = .false. )
  
  call this%geo_reference_subfacet%create( topology = topology_tet,&
                                      num_dims = num_dim-1,&
                                      order = 1,&
                                      field_type = field_type_scalar,&
                                      conformity = .true., &
                                      continuity = .false. )
  
  ! Find the max degree
  p = this%fe_space%get_max_order()
  
  ! Create the quadrature for the sub-element
  ! degree 2*(d*p-1) needed for integrate stifness matrix
  ! If you need to integrate the mass matrix this would be 2*d*p
  call this%geo_reference_subelem%create_quadrature(this%quadrature_subelem,degree=2*(num_dim*p-1))
  
  ! Create the quadrature for the sub-face
  ! degree 2*(d*p-1) needed for integrate (n*grad(u))*(n*grad(u))
  ! 2*d*p Needed for the penalty terms 
  call this%geo_reference_subelem%create_facet_quadrature(this%quadrature_subfacet,degree=2*num_dim*p)
  
  call this%geo_reference_subelem%create_facet_quadrature(this%quadrature_fitted_subfacet,degree=2*(num_dim-1)*p)
  
  ! Create the fe maps
  call this%cell_map_subelem%create( this%quadrature_subelem, this%geo_reference_subelem )
  call this%cell_map_subfacet%create( this%quadrature_fitted_subfacet, this%geo_reference_subfacet )

end subroutine uim_init_reference_subelem

!========================================================================================
subroutine uim_free_reference_subelem( this )
  implicit none
  class(unfitted_integration_manager_t), intent(inout) :: this
  call this%cell_map_subfacet%free()
  call this%cell_map_subelem%free()
  call this%geo_reference_subfacet%free()
  call this%geo_reference_subelem%free()
  call this%quadrature_subelem%free()
  call this%quadrature_subfacet%free()
  call this%quadrature_fitted_subfacet%free()
end subroutine uim_free_reference_subelem

!========================================================================================
subroutine uim_init_cut_integration( this )
  implicit none
  class(unfitted_integration_manager_t), intent(inout) :: this

  integer(ip) :: num_dim, num_gp, num_gp_subelem, num_fields
  integer(ip) :: istat, ifield
  integer(ip) :: num_subcells, max_pos, ipos

  class(fe_cell_iterator_t), allocatable :: fe
  class(reference_fe_t),     pointer        :: reference_elem
  class(reference_fe_t), pointer :: geo_reference_elem
  integer(ip) :: jpos
  type(std_vector_integer_ip_t) :: pos_to_num_sub_cells

  call this%free_cut_integration()
  call this%fe_space%create_fe_cell_iterator(fe)

  num_fields = this%fe_space%get_num_fields()
  num_dim = this%fe_space%get_num_dims()
  num_gp_subelem = this%quadrature_subelem%get_num_quadrature_points()

  call this%num_sub_cells_to_pos%init()
  call pos_to_num_sub_cells%resize(0)
  max_pos = 1
  do while (.not. fe%has_finished())
    if (fe%is_local()) then
      if (fe%is_cut()) then
        num_subcells = fe%get_num_subcells()
        assert(num_subcells>0)
        call this%num_sub_cells_to_pos%put( key=num_subcells, val=max_pos, stat=istat )
        if (istat == now_stored) then
          call pos_to_num_sub_cells%push_back(num_subcells)
          max_pos = max_pos + 1
        end if
      end if
    end if
    call fe%next()
  end do
  max_pos = max_pos - 1

  call fe%first()
  geo_reference_elem => fe%get_reference_fe_geo()

  allocate( this%cut_quadratures(max_pos), stat=istat ); check(istat==0_ip)
  allocate( this%cut_cell_maps(max_pos), stat=istat ); check(istat==0_ip)
  allocate( this%cut_cell_integrators(max_pos,num_fields), stat=istat ); check(istat==0_ip)

  do ipos = 1, max_pos

    num_subcells = pos_to_num_sub_cells%get(ipos)
    assert( num_subcells > 0)

    call this%num_sub_cells_to_pos%get( key=num_subcells, val=jpos, stat=istat )
    assert(istat == key_found)
    assert(ipos==jpos)

    num_gp = num_gp_subelem*num_subcells

    call this%cut_quadratures(ipos)%create( num_dim, num_gp )

    call this%cut_cell_maps(ipos)%create( this%cut_quadratures(ipos), geo_reference_elem )

    do ifield = 1,num_fields

      ! Find the fist non void ref FE in the field
      call fe%first_local_non_void(ifield)
      if (fe%has_finished()) call fe%first()
      reference_elem => fe%get_reference_fe(field_id=ifield)

      call this%cut_cell_integrators(ipos,ifield)%create( this%cut_quadratures(ipos), reference_elem )

    end do

  end do

  ! Create empty dummy objects
  call this%empty_quadrature%create(num_dim,0)
  call this%empty_cell_map%create( this%empty_quadrature, geo_reference_elem )
  allocate (this%empty_cell_integrator(1:num_fields), stat=istat); check(istat==0)
  do ifield = 1,num_fields

    ! Find the fist non void ref FE in the field
    call fe%first_local_non_void(ifield)
    if (fe%has_finished()) call fe%first()
    reference_elem => fe%get_reference_fe(field_id=ifield)
    call this%empty_cell_integrator(ifield)%create( this%empty_quadrature, reference_elem )
  end do

  call this%fe_space%free_fe_cell_iterator(fe)
  call pos_to_num_sub_cells%free()

end subroutine uim_init_cut_integration

!========================================================================================
subroutine uim_free_cut_integration( this )

  implicit none
  class(unfitted_integration_manager_t), intent(inout) :: this

  integer(ip) :: ind, istat, jnd

  if ( allocated(this%cut_quadratures) ) then
    do ind = 1,size(this%cut_quadratures)
      call this%cut_quadratures(ind)%free()
    end do
    deallocate( this%cut_quadratures, stat=istat ); check(istat==0_ip)
  end if

  if ( allocated(this%cut_cell_maps) ) then
    do ind = 1,size(this%cut_cell_maps)
      call this%cut_cell_maps(ind)%free()
    end do
    deallocate( this%cut_cell_maps, stat=istat ); check(istat==0_ip)
  end if

  if ( allocated(this%cut_cell_integrators) ) then
    do ind = 1,size(this%cut_cell_integrators,1)
      do jnd = 1,size(this%cut_cell_integrators,2)
        call this%cut_cell_integrators(ind,jnd)%free()
      end do
    end do
    deallocate( this%cut_cell_integrators, stat=istat ); check(istat==0_ip)
  end if

  call this%empty_quadrature%free()
  call this%empty_cell_map%free()

  if ( allocated(this%empty_cell_integrator) ) then
    do ind = 1,size(this%empty_cell_integrator)
      call this%empty_cell_integrator(ind)%free()
    end do
    deallocate( this%empty_cell_integrator, stat=istat ); check(istat==0_ip)
  end if

  call this%num_sub_cells_to_pos%free()

end subroutine uim_free_cut_integration

!========================================================================================
subroutine uim_init_cut_boundary_integration( this )

  implicit none
  class(unfitted_integration_manager_t), intent(inout) :: this

  class(fe_cell_iterator_t), allocatable :: fe
  class(reference_fe_t),     pointer        :: reference_elem
  class(reference_fe_t), pointer :: geo_reference_elem

  integer(ip) :: istat, pini, pend, subfacet, ifield
  integer(ip) :: num_dim, num_gp, num_subfacets, num_fields
  integer(ip) :: max_pos, ipos, jpos

  real(rp), pointer :: quad_coords(:,:), sub_quad_coords(:,:)
  real(rp), pointer :: quad_weight(:), sub_quad_weight(:)
  type(std_vector_integer_ip_t) :: pos_to_num_sub_facets

  call this%free_cut_boundary_integration()
  call this%fe_space%create_fe_cell_iterator(fe)

  num_gp = this%quadrature_subfacet%get_num_quadrature_points()
  num_dim = this%fe_space%get_num_dims()
  num_fields = this%fe_space%get_num_fields()

  call this%num_unfitted_sub_facets_to_pos%init()
  call pos_to_num_sub_facets%resize(0)
  max_pos = 1
  do while (.not. fe%has_finished())
    if (fe%is_local()) then
      if (fe%is_cut()) then
        num_subfacets = fe%get_num_subfacets()
        assert(num_subfacets>0)
        call this%num_unfitted_sub_facets_to_pos%put( key=num_subfacets, val=max_pos, stat=istat )
        if (istat == now_stored) then
          call pos_to_num_sub_facets%push_back(num_subfacets)
          max_pos = max_pos + 1
        end if
      end if
    end if
    call fe%next()
  end do
  max_pos = max_pos - 1

  call fe%first()
  geo_reference_elem => fe%get_reference_fe_geo()

  allocate( this%cut_boundary_quadratures_cell_dim(max_pos), stat = istat ); check(istat==0)
  allocate( this%cut_boundary_piecewise_cell_maps(max_pos), stat = istat ); check(istat==0)
  allocate( this%cut_boundary_cell_maps(max_pos), stat = istat ); check(istat==0)
  allocate( this%cut_boundary_cell_integrators(max_pos,num_fields), stat = istat ); check(istat==0)

  do ipos = 1,max_pos

    num_subfacets = pos_to_num_sub_facets%get(ipos)
    assert( num_subfacets > 0)

    call this%num_unfitted_sub_facets_to_pos%get( key=num_subfacets, val=jpos, stat=istat )
    assert(istat == key_found)
    assert(ipos==jpos)

    call this%cut_boundary_quadratures_cell_dim(ipos)%create(num_dim,     num_gp*num_subfacets)

    ! Fill the quadratures with the values of the reference subfacet
    sub_quad_coords => this%quadrature_subfacet%get_pointer_coordinates()
    sub_quad_weight => this%quadrature_subfacet%get_pointer_weights()
    quad_coords     => this%cut_boundary_quadratures_cell_dim(ipos)%get_pointer_coordinates()
    quad_weight     => this%cut_boundary_quadratures_cell_dim(ipos)%get_pointer_weights()
    do subfacet = 1, num_subfacets
      pend = subfacet*num_gp
      pini = pend -  num_gp + 1
      quad_coords(:,pini:pend) = sub_quad_coords(:,:)
      quad_weight(pini:pend) = sub_quad_weight(:)
    end do

    call this%cut_boundary_piecewise_cell_maps(ipos)%create_facet_map(&
         this%quadrature_subfacet, this%geo_reference_subelem, num_subfacets  )

    call this%cut_boundary_cell_maps(ipos)%create(&
         this%cut_boundary_quadratures_cell_dim(ipos), geo_reference_elem)

    do ifield = 1, num_fields

      ! Find the fist non void ref FE in the field
      call fe%first_local_non_void(ifield)
      if (fe%has_finished()) call fe%first()
      reference_elem => fe%get_reference_fe(field_id=ifield)

      call this%cut_boundary_cell_integrators(ipos,ifield)%create(&
             this%cut_boundary_quadratures_cell_dim(ipos), reference_elem )

    end do

  end do

  call this%empty_piecewise_cell_map%create_facet_map( this%empty_quadrature, geo_reference_elem, 0 )

  call this%fe_space%free_fe_cell_iterator(fe)
  call pos_to_num_sub_facets%free()

end subroutine uim_init_cut_boundary_integration

!========================================================================================
subroutine uim_free_cut_boundary_integration( this )

  implicit none
  class(unfitted_integration_manager_t), intent(inout) :: this

  integer(ip) :: id, istat, jd

  if ( allocated( this%cut_boundary_quadratures_cell_dim ) ) then
    do id = 1, size(this%cut_boundary_quadratures_cell_dim)
      call this%cut_boundary_quadratures_cell_dim(id)%free()
    end do
    deallocate( this%cut_boundary_quadratures_cell_dim , stat = istat ); check(istat==0)
  end if

  if ( allocated( this%cut_boundary_piecewise_cell_maps ) ) then
    do id = 1, size(this%cut_boundary_piecewise_cell_maps )
      call this%cut_boundary_piecewise_cell_maps(id)%free()
    end do
    deallocate( this%cut_boundary_piecewise_cell_maps , stat = istat ); check(istat==0)
  end if

  if ( allocated( this%cut_boundary_cell_maps ) ) then
    do id = 1, size(this%cut_boundary_cell_maps )
      call this%cut_boundary_cell_maps(id)%free()
    end do
    deallocate( this%cut_boundary_cell_maps , stat = istat ); check(istat==0)
  end if

  if ( allocated( this%cut_boundary_cell_integrators ) ) then
    do id = 1, size(this%cut_boundary_cell_integrators,1)
      do jd = 1, size(this%cut_boundary_cell_integrators,2)
        call this%cut_boundary_cell_integrators(id,jd)%free()
      end do
    end do
    deallocate( this%cut_boundary_cell_integrators , stat = istat ); check(istat==0)
  end if

  call this%empty_piecewise_cell_map%free()

  call this%num_unfitted_sub_facets_to_pos%free()

end subroutine uim_free_cut_boundary_integration

!========================================================================================
subroutine uim_init_cut_fitted_facets_integration( this )
  implicit none
  class(unfitted_integration_manager_t), intent(inout) :: this

  integer(ip) :: num_dim, num_gp, num_gp_subfacet, num_subfacets, num_fields
  integer(ip) :: istat
  integer(ip) :: ipos, max_pos, jpos
  integer(ip) :: field_id
  class(fe_cell_iterator_t), allocatable :: fe
  class(fe_facet_iterator_t), allocatable :: fe_facet
  class(reference_fe_t), pointer :: geo_reference_elem
  class(reference_fe_t), pointer :: geo_reference_elem_null
  class(reference_fe_t), pointer :: reference_elem
  class(reference_fe_t), pointer :: reference_elem_null
  type(std_vector_integer_ip_t) :: pos_to_num_fitted_sub_facets

  call this%free_cut_fitted_facets_integration()
  call this%fe_space%create_fe_cell_iterator(fe)
  call this%fe_space%create_fe_facet_iterator(fe_facet)

  geo_reference_elem => fe%get_reference_fe_geo()
  num_dim = this%quadrature_fitted_subfacet%get_num_dims()
  num_gp_subfacet = this%quadrature_fitted_subfacet%get_num_quadrature_points()

  call this%num_fitted_sub_facets_to_pos%init()
  call pos_to_num_fitted_sub_facets%resize(0)
  max_pos = 1
  do while (.not. fe_facet%has_finished())
    if (fe_facet%is_local()) then
      if (fe_facet%is_cut()) then
        num_subfacets = fe_facet%get_num_subvefs()
        assert(num_subfacets>0)
        call this%num_fitted_sub_facets_to_pos%put( key=num_subfacets, val=max_pos, stat=istat )
        if (istat == now_stored) then
          call pos_to_num_fitted_sub_facets%push_back(num_subfacets)
          max_pos = max_pos + 1
        end if
      end if
    end if
    call fe_facet%next()
  end do
  max_pos = max_pos - 1

  call fe%first()
  geo_reference_elem_null => null()
  field_id = 1
  call fe%first_local_non_void(field_id)
  if (fe%has_finished()) call fe%first()
  reference_elem_null => null()

  allocate( this%cut_fitted_facet_quadratures(max_pos), stat=istat ); check(istat==0_ip)
  allocate( this%cut_fitted_facet_maps(pos_map_max_id,max_pos), stat=istat ); check(istat==0_ip)
  allocate( this%cut_fitted_facet_integrators(fe%get_num_fields(),pos_map_max_id,max_pos), stat=istat ); check(istat==0_ip)
  allocate( this%empty_facet_integrators(fe%get_num_fields(),pos_map_max_id), stat=istat ); check(istat==0_ip)
  do ipos = 1, max_pos

    num_subfacets = pos_to_num_fitted_sub_facets%get(ipos)
    assert( (num_subfacets>0) )

    call this%num_fitted_sub_facets_to_pos%get( key=num_subfacets, val=jpos, stat=istat )
    assert(istat == key_found)
    assert(ipos==jpos)

    num_gp = num_gp_subfacet*num_subfacets

    call this%cut_fitted_facet_quadratures(ipos)%create( num_dim, num_gp )

    call this%cut_fitted_facet_maps(pos_map_in_domain,ipos)%create(&
      this%cut_fitted_facet_quadratures(ipos), geo_reference_elem, geo_reference_elem )

    call this%cut_fitted_facet_maps(pos_map_on_boundary,ipos)%create(&
      this%cut_fitted_facet_quadratures(ipos), geo_reference_elem, geo_reference_elem_null )

    do field_id = 1,fe%get_num_fields()
      reference_elem => fe%get_reference_fe(field_id)
      call this%cut_fitted_facet_integrators(field_id,pos_map_in_domain,ipos)%create(&
        this%cut_fitted_facet_quadratures(ipos), reference_elem, reference_elem, is_identity_perm = .true. )
      
      call this%cut_fitted_facet_integrators(field_id,pos_map_on_boundary,ipos)%create(&
        this%cut_fitted_facet_quadratures(ipos), reference_elem, reference_elem_null, is_identity_perm = .true. )
    end do

  end do
  
  ! Cerate dummy objects
  call this%empty_facet_quadrature%create(num_dim,0)
  call this%empty_facet_maps(pos_map_in_domain)%create(this%empty_facet_quadrature,geo_reference_elem, geo_reference_elem)
  call this%empty_facet_maps(pos_map_on_boundary)%create(this%empty_facet_quadrature,geo_reference_elem, geo_reference_elem_null)

  do field_id = 1,fe%get_num_fields()
    reference_elem => fe%get_reference_fe(field_id)
    call this%empty_facet_integrators(field_id,pos_map_in_domain)%create(this%empty_facet_quadrature,reference_elem, reference_elem)
    call this%empty_facet_integrators(field_id,pos_map_on_boundary)%create(this%empty_facet_quadrature,reference_elem, reference_elem_null)
  end do

  call this%fe_space%free_fe_cell_iterator(fe)
  call this%fe_space%free_fe_facet_iterator(fe_facet)
  call pos_to_num_fitted_sub_facets%free()

end subroutine uim_init_cut_fitted_facets_integration

!========================================================================================
subroutine uim_free_cut_fitted_facets_integration( this )

  implicit none
  class(unfitted_integration_manager_t), intent(inout) :: this

  integer(ip) :: id, istat, jd, kd

  if ( allocated( this%cut_fitted_facet_quadratures ) ) then
    do id = 1, size(this%cut_fitted_facet_quadratures,1)
      call this%cut_fitted_facet_quadratures(id)%free()
    end do
    deallocate( this%cut_fitted_facet_quadratures , stat = istat ); check(istat==0)
  end if

  if ( allocated( this%cut_fitted_facet_maps ) ) then
    do jd = 1, size(this%cut_fitted_facet_maps,2)
      do id = 1, size(this%cut_fitted_facet_maps,1)
        call this%cut_fitted_facet_maps(id,jd)%free()
      end do
    end do
    deallocate( this%cut_fitted_facet_maps , stat = istat ); check(istat==0)
  end if

  if ( allocated( this%cut_fitted_facet_integrators ) ) then
    do id = 1, size(this%cut_fitted_facet_integrators,1 )
      do jd = 1, size(this%cut_fitted_facet_integrators,2 )
        do kd = 1, size(this%cut_fitted_facet_integrators,3 )
          call this%cut_fitted_facet_integrators(id,jd,kd)%free()
        end do
      end do
    end do
    deallocate( this%cut_fitted_facet_integrators , stat = istat ); check(istat==0)
  end if

  if ( allocated( this%empty_facet_integrators ) ) then
    do id = 1, size(this%empty_facet_integrators,1 )
      do jd = 1, size(this%empty_facet_integrators,2 )
      call this%empty_facet_integrators(id,jd)%free()
      end do
    end do
    deallocate( this%empty_facet_integrators , stat = istat ); check(istat==0)
  end if

  call this%num_fitted_sub_facets_to_pos%free()
  
  call this%empty_facet_quadrature%free()
  call this%empty_facet_maps(pos_map_in_domain)%free()
  call this%empty_facet_maps(pos_map_on_boundary)%free()

end subroutine uim_free_cut_fitted_facets_integration
