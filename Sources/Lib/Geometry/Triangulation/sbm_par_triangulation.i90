 ! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine par_triangulation_create ( this, environment, parameters)
  !$ use omp_lib
  implicit none
  class(par_triangulation_t), target, intent(inout) :: this
  type(environment_t)      ,  target, intent(in)    :: environment
  type(ParameterList_t)             , intent(inout) :: parameters

  type(uniform_hex_mesh_t) :: uniform_hex_mesh

  type(mesh_t)              :: mesh
  type(mesh_distribution_t) :: mesh_distribution
  type(p_reference_fe_t)    :: reference_fe_geo_list(1)

  real(rp)    , allocatable :: coordinates(:,:)
  real(rp)    , allocatable :: cell_coordinates(:,:)
  real(rp)    , allocatable :: cell_coordinates_ghost_extended(:,:)

  type(list_t), pointer     :: boundary_vefs
  integer(ip) , pointer     :: boundary_vefs_geometry_id(:), boundary_vefs_set(:)

  integer(igp), allocatable :: cells_gid(:)
  integer(ip) , allocatable :: cells_set(:)
  integer(igp), allocatable :: vertx_gid(:)
  integer(ip) , allocatable :: ptr_vefs_x_cell(:)
  integer(ip) , allocatable :: lst_vefs_lids(:)
  integer(igp), allocatable :: lst_vefs_gids(:)

  integer(ip)               :: i, ipart,npart
  integer(ip)               :: num_local_cells, num_itfc_cells
  integer(ip) , allocatable :: lst_itfc_cells(:)
  integer(ip) , allocatable :: ptr_ext_neighs_x_itfc_cell(:) 
  integer(igp), allocatable :: lst_ext_neighs_gids(:)
  integer(ip) , allocatable :: lst_ext_neighs_part_ids(:)

  integer(igp), allocatable :: lst_vefs_gids_ghost_extended(:)
  integer(ip) , allocatable :: lst_vefs_dim_ghost_extended(:)

  character(len=:), allocatable   :: triangulation_generate
  character(len=:), allocatable   :: dir_path
  character(len=:), allocatable   :: prefix
  character(len=:), allocatable   :: name
  integer(ip)                     :: geometric_interpolation_order
  character(len=:), allocatable   :: subparts_coupling_criteria 
  integer(ip)                     :: lunio
  integer(ip)                     :: istat
  type(environment_t), pointer    :: env
  integer(ip) :: num_edges, num_faces
  integer(igp) :: num_global_cells
  
  integer(ip), pointer :: mesh_vertices_x_cell_pointers(:), &
                          mesh_vertices_x_cell(:), &
                          mesh_cells_set(:)
                          
  real(rp), pointer :: mesh_vertex_coordinates(:,:)

    ! Mandatory parameters
    assert(parameters%isAssignable(dir_path_key, 'string'))
    istat = parameters%GetAsString(key = dir_path_key, string = dir_path)
    assert(istat==0)

    assert(parameters%isAssignable(prefix_key, 'string'))
    istat = parameters%GetAsString(key = prefix_key, string = prefix)
    assert(istat==0)

  ! Optional parameters
  if( parameters%isPresent(static_triang_generate_from_key) ) then
     assert(parameters%isAssignable(static_triang_generate_from_key, triangulation_generate))
     istat = parameters%GetAsString(key = static_triang_generate_from_key, string = triangulation_generate)
     assert(istat==0)
  else
     triangulation_generate = static_triang_generate_from_mesh_data_files
  end if


  if( parameters%isPresent(static_triang_geometric_interpolation_order_key) ) then
     assert(parameters%isAssignable(static_triang_geometric_interpolation_order_key, geometric_interpolation_order))
     istat = parameters%Get(key = static_triang_geometric_interpolation_order_key, Value = geometric_interpolation_order)
     assert(istat==0)
  else
     geometric_interpolation_order = 1
  end if
  
  if(triangulation_generate==static_triang_generate_from_mesh_data_files) then
     if( parameters%isPresent(subparts_coupling_criteria_key) ) then
        assert(parameters%isAssignable(subparts_coupling_criteria_key, subparts_coupling_criteria))
        istat = parameters%GetAsString(key = subparts_coupling_criteria_key, string = subparts_coupling_criteria) 
        assert(istat==0)
        call this%set_subparts_coupling_criteria(subparts_coupling_criteria)
     else
        call this%set_subparts_coupling_criteria(loose_coupling) 
     end if
  elseif(triangulation_generate==static_triang_generate_from_struct_hex_mesh_generator) then
     call this%set_subparts_coupling_criteria(all_coupled)
  end if

  call this%free()

  call this%set_environment(environment)

  if(this%environment%am_i_l1_task()) then

     ! Generate triangulation
     if(triangulation_generate==static_triang_generate_from_mesh_data_files) then
        call this%set_single_octree_mesh(.false.)
  
        if(geometric_interpolation_order>1) call the_GiD_geometry_reader%fill_geometry(parameters, this%geometry)

        ! Read mesh
        call mesh%mesh_fempar_gid_problem_type_format_compose_name ( prefix, name )
        if(this%environment%get_l1_size()>1) &
             &  call numbered_filename_compose( this%environment%get_l1_rank()+1, this%environment%get_l1_size(), name )
        lunio = io_open( trim(dir_path) // '/' // trim(name), 'read' ); check(lunio>0)
        call mesh%read_fempar_gid_problem_type_format (lunio) 
        call io_close(lunio)
        
        ! Extract data from mesh
        this%num_dims = mesh%get_num_dims()
        this%num_vertices = mesh%get_num_vertices()
        this%num_local_cells = mesh%get_num_cells()
        
        this%num_global_cells = this%num_local_cells
        call this%environment%l1_sum(this%num_global_cells)
        this%num_vefs=this%num_vertices
                
        mesh_vertices_x_cell_pointers => mesh%get_vertices_x_cell_pointers()
        call memalloc (size(mesh_vertices_x_cell_pointers), ptr_vefs_x_cell, __FILE__, __LINE__)
        ptr_vefs_x_cell = mesh_vertices_x_cell_pointers
     
        mesh_vertices_x_cell => mesh%get_vertices_x_cell()
        call memalloc (size(mesh_vertices_x_cell), lst_vefs_lids, __FILE__, __LINE__)
        lst_vefs_lids = mesh_vertices_x_cell
     
        mesh_cells_set => mesh%get_cells_set()
        call memalloc (size(mesh_cells_set), cells_set, __FILE__, __LINE__)
        cells_set = mesh_cells_set
        
        mesh_vertex_coordinates => mesh%get_vertex_coordinates()
        call memalloc (size(mesh_vertex_coordinates,1), &
                       size(mesh_vertex_coordinates,2), &
                       coordinates, __FILE__, __LINE__)
        coordinates = mesh_vertex_coordinates
        
        boundary_vefs => mesh%get_boundary_vefs()
        boundary_vefs_geometry_id => mesh%get_boundary_vefs_geometry_id()
        boundary_vefs_set => mesh%get_boundary_vefs_set()
        
        ! Read mesh distribution 
        if(this%environment%get_l1_size()>1) then
           call mesh_distribution%mesh_distribution_compose_name ( prefix, name )
           call numbered_filename_compose( this%environment%get_l1_rank()+1, this%environment%get_l1_size(), name )
           lunio = io_open (trim(dir_path) // '/' // trim(name)); check(lunio>0)
           call mesh_distribution%read(lunio)
           call io_close(lunio)
        else
           call mesh_distribution%create_empty()
        end if
        call mesh_distribution%get_sizes(ipart,npart)

        ! Extract data from mesh_distribution
        call mesh_distribution%move_gids(cells_gid,vertx_gid)
        call mesh_distribution%move_external_elements_info( num_itfc_cells, &
             &                                              lst_itfc_cells, &
             &                                              ptr_ext_neighs_x_itfc_cell, &
             &                                              lst_ext_neighs_gids, &
             &                                              lst_ext_neighs_part_ids)

        ! Build cell-wise vefs_gid and vefs_dim (we only have vertices here)
        call memalloc(ptr_vefs_x_cell(this%num_local_cells+1)-1,lst_vefs_gids,__FILE__,__LINE__)
        call memalloc(SPACE_DIM,ptr_vefs_x_cell(this%num_local_cells+1)-1,cell_coordinates,__FILE__,__LINE__)
        if(this%environment%get_l1_size()>1) then
           do i=1,ptr_vefs_x_cell(this%num_local_cells+1)-1
              lst_vefs_gids(i) = vertx_gid(lst_vefs_lids(i))
              cell_coordinates(:,i) = coordinates(:,lst_vefs_lids(i))
           end do
        end if
        ! We need to fill the element_import data structure first
        ! in order to determine the number of ghost elements. This
        ! in turn is required as a precondition for the allocate_cell_array
        ! TBP below.
        call this%cell_import%create  ( this%environment%get_l1_rank()+1, &
             this%environment%get_l1_size(), &
             this%num_local_cells, &
             num_itfc_cells, &
             lst_itfc_cells, &
             ptr_ext_neighs_x_itfc_cell, &
             lst_ext_neighs_gids, &
             lst_ext_neighs_part_ids)
        this%num_ghost_cells = this%cell_import%get_num_ghost_elements()

        ! Allocate + fill cells-related data
        call this%allocate_and_fill_ptr_vefs_x_cell(ptr_vefs_x_cell)
        call this%allocate_cells_ggid()
        call this%fill_local_cells_ggid(cells_gid)
        call this%allocate_cells_mypart()
        call this%fill_local_cells_mypart()
        call this%fetch_ghost_cells_data(lst_vefs_gids, lst_vefs_gids_ghost_extended, &
             &   coordinates=cell_coordinates,coordinates_ghost_extended=cell_coordinates_ghost_extended)

        ! Extend lids to ghost vefs and update number of vefs (=vertices at this point)
        call this%allocate_and_fill_lst_vefs_gids(lst_vefs_lids,lst_vefs_gids_ghost_extended, vertx_gid)
        this%num_vertices=this%num_vefs

        ! Realloc coordinates to hold ghost vertices and fill them
        call memrealloc (SPACE_DIM,this%num_vertices, coordinates, __FILE__, __LINE__ )
        if(this%environment%get_l1_size()>1) then
           do i=1,this%ptr_vefs_x_cell(this%num_local_cells+this%num_ghost_cells+1)-1
              coordinates(:,this%lst_vefs_gids(i)) = cell_coordinates_ghost_extended(:,i)
           end do
        end if

        ! Generate edges and faces
        call this%allocate_and_fill_cells_around()
        call this%fill_reference_fe_geo_list(geometric_interpolation_order)
        ! IMPORTANT NOTE: Both lst_vefs_gids_ghost_extended and cell_coordinates_ghost_extended are inconsistent
        ! after renumbering the local nodes in procedure this%orient_tet_mesh. If any of these two arrays has to
        ! be used, it must be done before the call to this%orient_tet_mesh.
        if (this%is_tet_mesh()) call this%orient_tet_mesh(lst_vefs_gids_ghost_extended)
        call this%generate_vefs(geometric_interpolation_order)
        call this%allocate_and_fill_geometry_and_set(boundary_vefs,boundary_vefs_geometry_id,boundary_vefs_set)

        if(this%environment%get_l1_size()>1) then
           call memfree (cells_gid,                    __FILE__, __LINE__)
           call memfree (vertx_gid,                    __FILE__, __LINE__)
        end if
        call memfree (ptr_vefs_x_cell              , __FILE__, __LINE__)
        call memfree (cell_coordinates               , __FILE__, __LINE__)
        call memfree (cell_coordinates_ghost_extended, __FILE__, __LINE__)
     else if(triangulation_generate==static_triang_generate_from_struct_hex_mesh_generator) then
        call this%set_single_octree_mesh(.true.)
   
        ! Get num_dims from FPL
        assert(parameters%isAssignable(struct_hex_mesh_generator_num_dims_key, this%num_dims))
        istat = parameters%get(key = struct_hex_mesh_generator_num_dims_key, value = this%num_dims)
        assert(istat==0)

        call uniform_hex_mesh%get_data_from_parameter_list(parameters)

        if(geometric_interpolation_order>1) call the_GiD_geometry_reader%fill_geometry(parameters, this%geometry)

        call uniform_hex_mesh%generate_connectivities(this%num_local_cells,   &
             &                                        this%num_vefs,          & ! All n_faces
             &                                        this%num_vertices,      & ! All dim 0 n_faces
             &                                        num_edges,         & ! All faces with 0<dim<n-1
             &                                        num_faces,         & ! All dim n-1 n_faces
             &                                        this%ptr_vefs_x_cell, &
             &                                        lst_vefs_lids,     &
             &                                        this%vefs_set,          &
             &                                        coordinates,            &
             &                                        this%num_ghost_cells,   &
             &                                        this%cells_ggid,         &
             &                                        this%cells_mypart,      &
             &                                        this%vefs_ggid,          &
             &                                        num_itfc_cells,         &
             &                                        lst_itfc_cells,         &
             &                                        ptr_ext_neighs_x_itfc_cell, &
             &                                        lst_ext_neighs_gids,          &
             &                                        lst_ext_neighs_part_ids,      &
             &                                        this%environment%get_l1_rank()+1)
        this%num_global_cells = this%num_local_cells
        call this%environment%l1_sum(this%num_global_cells)
        
        ! Allocate and fill to default values cells_set==0 local variable
        call memalloc(this%num_local_cells, cells_set, __FILE__, __LINE__)
        cells_set = 0

        ! Generate import
        call this%cell_import%create  ( this%environment%get_l1_rank()+1, &
             this%environment%get_l1_size(), &
             this%num_local_cells, &
             num_itfc_cells, &
             lst_itfc_cells, & ! I was forced to provide l/u bounds to let gfortran 5.3.0 compile
             ptr_ext_neighs_x_itfc_cell, &
             lst_ext_neighs_gids, &
             lst_ext_neighs_part_ids)


        ! Build cell-wise vefs_gid and vefs_dim
        call memalloc(this%ptr_vefs_x_cell(this%num_local_cells+1)-1,lst_vefs_gids,__FILE__,__LINE__)
        if(this%environment%get_l1_size()>1) then
           do i=1,this%ptr_vefs_x_cell(this%num_local_cells+1)-1 
              lst_vefs_gids(i) = this%vefs_ggid(lst_vefs_lids(i))
           end do
        else
           lst_vefs_gids = lst_vefs_lids
        end if
        call this%fetch_ghost_cells_data(lst_vefs_gids, lst_vefs_gids_ghost_extended)
        call this%allocate_and_fill_lst_vefs_gids(lst_vefs_lids,lst_vefs_gids_ghost_extended, this%vefs_ggid)

        ! Generate reference fe
        call this%reference_fe_geo_index%init(1)
        if(this%num_dims==2) then
           call this%reference_fe_geo_index%put(key=8,val=1,stat=istat)
           reference_fe_geo_list(1) = &
                &    make_reference_fe ( topology = topology_hex, fe_type = fe_type_lagrangian, &
                &                        num_dims = this%num_dims, order = geometric_interpolation_order, &
                &                        field_type = field_type_scalar, conformity = .true. )
        else
           call this%reference_fe_geo_index%put(key=26,val=1,stat=istat)
           reference_fe_geo_list(1) = &
                &    make_reference_fe ( topology = topology_hex, fe_type = fe_type_lagrangian, &
                &                        num_dims = this%num_dims, order = geometric_interpolation_order, &
                &                        field_type = field_type_scalar, conformity = .true. )
        end if
        ! Transfer allocated target from local variable to member variable of base_static_triangulation
        select type(reference_fe => reference_fe_geo_list(1)%p)
           class is(lagrangian_reference_fe_t)
           this%reference_fe_geo_list(1)%p => reference_fe
        end select

        call uniform_hex_mesh%free()

     end if

     call this%allocate_cells_set()
     call this%fill_cells_set(cells_set)
     call this%allocate_and_fill_cells_around()
     call this%compute_vefs_dim()
     call this%find_vefs_at_boundary()
     call this%find_local_ghost_vefs()
     call this%set_up_lst_itfc_vefs()
     call this%allocate_and_fill_nodes()
     call this%allocate_and_fill_coordinates(coordinates)     

     call mesh%free()
     call mesh_distribution%free()
     call memfree (lst_itfc_cells,               __FILE__, __LINE__)
     call memfree (ptr_ext_neighs_x_itfc_cell, __FILE__, __LINE__)
     call memfree (lst_ext_neighs_gids,          __FILE__, __LINE__)
     call memfree (lst_ext_neighs_part_ids,      __FILE__, __LINE__)
     call memfree (lst_vefs_lids,                __FILE__, __LINE__)
     call memfree (lst_vefs_gids,                __FILE__, __LINE__)
     call memfree (lst_vefs_gids_ghost_extended, __FILE__, __LINE__)
     call memfree (coordinates, __FILE__, __LINE__ )
     call memfree (cells_set, __FILE__, __LINE__)

  end if

end subroutine par_triangulation_create

subroutine par_triangulation_allocate_and_fill_lst_vefs_gids ( this, lst_vefs_lids, lst_vefs_gids, vefs_gids)                                                     
  implicit none
  class(par_triangulation_t), intent(inout) :: this
  integer(ip)               , intent(in)    :: lst_vefs_lids(this%ptr_vefs_x_cell(this%num_local_cells+1)-1)
  integer(igp)              , intent(in)    :: lst_vefs_gids(this%ptr_vefs_x_cell(this%num_local_cells+this%num_ghost_cells+1)-1)
  integer(igp)              , intent(in)    :: vefs_gids(this%num_vefs)

  type(hash_table_igp_ip_t) :: next_vef_lid_avail
  integer(ip)               :: icell, istat, j, init_pos, end_pos, current, ivef           

  !assert ( associated ( this%environment ) )
  assert ( this%environment%am_i_l1_task() )
  assert ( this%num_local_cells + this%num_ghost_cells >=0 )

  call this%free_lst_vefs_gids()

  call memalloc ( this%ptr_vefs_x_cell(this%num_local_cells+this%num_ghost_cells+1)-1, this%lst_vefs_gids, __FILE__, __LINE__ )
  !call next_vef_lid_avail%init ( max(int(real( this%ptr_vefs_x_cell(this%num_local_cells+this%num_ghost_cells+1))*0.1_rp),5) )
  call next_vef_lid_avail%init ( max(this%num_vefs, 5) )
  do ivef =1,this%num_vefs
     call next_vef_lid_avail%put(key=vefs_gids(ivef), val=ivef, stat=istat)
  end do
  
  ! Local cells contain vertices already locally numbered
  do icell=1, this%num_local_cells
     init_pos = this%ptr_vefs_x_cell(icell)
     end_pos  = this%ptr_vefs_x_cell(icell+1)-1
     do j=init_pos, end_pos
        this%lst_vefs_gids(j)=lst_vefs_lids(j)
     end do
  end do

  ! Ghost cells contain vefs not locally numbered
  do icell = this%num_local_cells +1, this%num_local_cells + this%num_ghost_cells
     init_pos = this%ptr_vefs_x_cell(icell)
     end_pos  = this%ptr_vefs_x_cell(icell+1)-1
     do j=init_pos, end_pos
        call next_vef_lid_avail%put(key=lst_vefs_gids(j), val=this%num_vefs+1, stat=istat)
        if (istat == now_stored) then
           this%num_vefs=this%num_vefs+1
        end if
        call next_vef_lid_avail%get(key=lst_vefs_gids(j), val=this%lst_vefs_gids(j), stat=istat)
     end do
  end do
  call next_vef_lid_avail%free()

end subroutine par_triangulation_allocate_and_fill_lst_vefs_gids

function par_triangulation_generate_non_consecutive_vef_ggid (cell_ggid, ivef_within_cell) result(vef_ggid)
  implicit none
  integer(igp), intent(in) :: cell_ggid
  integer(ip) , intent(in) :: ivef_within_cell
  integer(igp)             :: vef_ggid
  assert ( cell_ggid_shift >= 1  )
  assert ( vefs_x_reference_fe_shift >= 1  )
  assert ( cell_ggid < ISHFT(int(1,igp),int(cell_ggid_shift,igp) ) ) 
  assert ( ivef_within_cell < ISHFT(int(1,igp),int(vefs_x_reference_fe_shift,igp) ) )
  vef_ggid = (cell_ggid-1) + &
            ISHFT(int(ivef_within_cell-1,igp),int(cell_ggid_shift,igp))
end function par_triangulation_generate_non_consecutive_vef_ggid
