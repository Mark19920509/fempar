! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

subroutine serial_triangulation_create ( this, environment, parameters)
  implicit none
  class(serial_triangulation_t), target, intent(inout) :: this
  type(environment_t)          ,  target, intent(in)   :: environment
  type(ParameterList_t)        , intent(inout)         :: parameters

  type(uniform_hex_mesh_t) :: uniform_hex_mesh

  type(mesh_t)                  :: mesh
  type(list_t), pointer         :: given_vefs
  integer(ip) , pointer         :: lst_vefs_geo(:), lst_vefs_set(:)
  real(rp)    , allocatable     :: coordinates(:,:)
  character(len=:), allocatable :: triangulation_generate
  integer(ip)                   :: execution_context
  integer(ip)                   :: istat
  integer(ip)                   :: geometric_interpolation_order
  type(p_reference_fe_t)        :: reference_fe_geo_list(1)
  integer(ip)                   :: ivef 
  integer(ip), allocatable      :: cells_set(:)
  !type(environment_t), pointer :: environment
  integer(ip)                   :: max_vefs_x_cell, num_edges, num_faces

  ! Optional parameters
  if( parameters%isPresent(static_triang_generate_from_key) ) then
     assert(parameters%isAssignable(static_triang_generate_from_key, triangulation_generate))
     istat = parameters%GetAsString(key = static_triang_generate_from_key, string = triangulation_generate)
     assert(istat==0)
  else
     triangulation_generate = static_triang_generate_from_mesh_data_files
  end if

  if( parameters%isPresent(static_triang_geometric_interpolation_order_key) ) then
     assert(parameters%isAssignable(static_triang_geometric_interpolation_order_key, geometric_interpolation_order))
     istat = parameters%get(key = static_triang_geometric_interpolation_order_key , value = geometric_interpolation_order)
     assert(istat==0)
  else
     geometric_interpolation_order = 1
  end if

  call this%free()

  call this%set_environment(environment)
  
  if(geometric_interpolation_order>1) call the_GiD_geometry_reader%fill_geometry(parameters, this%geometry)

  if(triangulation_generate==static_triang_generate_from_mesh_data_files) then
     
     call this%set_single_octree_mesh(.false.)
  
     call mesh%read(parameters)

     ! Extract data from mesh
     call mesh%get_sizes(this%num_dims,this%num_vertices,max_vefs_x_cell,this%num_local_cells)
     this%num_global_cells=this%num_local_cells
     this%num_vefs=this%num_vertices
     this%num_ghost_cells=0
     call mesh%move_cells(this%ptr_vefs_x_cell,this%lst_vefs_gids, cells_set)
     call mesh%get_given_vefs(given_vefs,lst_vefs_geo,lst_vefs_set)

     call mesh%move_coordinates(coordinates)

     ! Generate dual mesh (at this point around vertices only)
     call this%allocate_and_fill_cells_around()
     call this%fill_reference_fe_geo_list(geometric_interpolation_order)
     if (this%is_tet_mesh()) call this%orient_tet_mesh()
     call this%generate_vefs(geometric_interpolation_order)
     call this%allocate_and_fill_geometry_and_set(given_vefs,lst_vefs_geo,lst_vefs_set)
     call mesh%free()

  else if(triangulation_generate==static_triang_generate_from_struct_hex_mesh_generator) then

     call this%set_single_octree_mesh(.true.)
  
     this%num_ghost_cells=0

     ! Get num_dims from FPL
     assert(parameters%isAssignable(struct_hex_mesh_generator_num_dims_key, this%num_dims ))
     istat = parameters%get(key = struct_hex_mesh_generator_num_dims_key, value = this%num_dims)
     assert(istat==0)

     call uniform_hex_mesh%get_data_from_parameter_list(parameters)

     call uniform_hex_mesh%generate_connectivities(this%num_local_cells,   &
          &                                        this%num_vefs,          & ! All n_faces
          &                                        this%num_vertices,      & ! All dim 0 n_faces
          &                                        num_edges,         & ! All faces with 0<dim<n-1
          &                                        num_faces,         & ! All dim n-1 n_faces
          &                                        this%ptr_vefs_x_cell, &
          &                                        this%lst_vefs_gids,     &
          &                                        this%vefs_set,          &
          &                                        coordinates)
     this%num_global_cells=this%num_local_cells
     ! Allocate and fill to default values cells_set==1 local variable
     call memalloc(this%num_local_cells, cells_set, __FILE__, __LINE__)
     cells_set = 0

     call this%reference_fe_geo_index%init(1)
     if(this%num_dims==2) then
        call this%reference_fe_geo_index%put(key=8,val=1,stat=istat)
        reference_fe_geo_list(1) = &
             &    make_reference_fe ( topology = topology_hex, fe_type = fe_type_lagrangian, &
             &                        num_dims = this%num_dims, order = geometric_interpolation_order, &
             &                        field_type = field_type_scalar, conformity = .true. )
     else
        call this%reference_fe_geo_index%put(key=26,val=1,stat=istat)
        reference_fe_geo_list(1) = &
             &    make_reference_fe ( topology = topology_hex, fe_type = fe_type_lagrangian, &
             &                        num_dims = this%num_dims, order = geometric_interpolation_order, &
             &                        field_type = field_type_scalar, conformity = .true. )
     end if
     ! Transfer allocated target from local variable to member variable of base_static_triangulation
     select type(reference_fe => reference_fe_geo_list(1)%p)
        class is(lagrangian_reference_fe_t)
        this%reference_fe_geo_list(1)%p => reference_fe
     end select
     call uniform_hex_mesh%free()
  end if

  ! Allocate and fill this%cells_set from cells_set member variable
  call this%allocate_cells_set()
  call this%fill_cells_set(cells_set)

  ! Generate dual mesh (around all vefs now)
  call this%allocate_and_fill_cells_around()
  call this%compute_vefs_dim()
  call this%find_vefs_at_boundary()
  call this%find_local_ghost_vefs()
  call this%set_up_lst_itfc_vefs()
  call this%allocate_and_fill_nodes()
  call this%allocate_and_fill_coordinates(coordinates)
  call memfree(cells_set, __FILE__, __LINE__)
  call memfree(coordinates, __FILE__, __LINE__)
end subroutine serial_triangulation_create
