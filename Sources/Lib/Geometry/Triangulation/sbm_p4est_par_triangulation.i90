! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

subroutine p4est_par_triangulation_create (this, environment, parameters)
  implicit none
  class(p4est_par_triangulation_t), target, intent(inout) :: this
  type(environment_t)             , target, intent(in)    :: environment
  type(ParameterList_t)                   , intent(inout) :: parameters
  integer(ip) :: istat
  type(std_vector_integer_ip_t) :: old_lst_vefs_gids
  class(environment_t)      , pointer :: p_environment
  class(execution_context_t), pointer :: context
  type(mpi_context_t)       , pointer :: mpi_context
  integer(ip) :: num_dims, idime  
  logical                  :: is_present
  integer(ip), allocatable :: array_size(:)
  real(rp)   , allocatable :: bounding_box_limits(:)
  character(len=:), allocatable :: subparts_coupling_criteria 
  character(1) :: dummy_string
  integer(ip) :: p4est_log_level
  
#ifdef ENABLE_P4EST
  call this%free()
  
  call this%set_single_octree_mesh(.true.)

  call this%set_environment(environment)
  p_environment => this%get_environment()
  
  if( parameters%isPresent(subparts_coupling_criteria_key) ) then
     massert(parameters%isAssignable(subparts_coupling_criteria_key, dummy_string), 'Subparts coupling criteria not found or un-usable')
     istat = parameters%GetAsString(key = subparts_coupling_criteria_key, string = subparts_coupling_criteria); assert(istat==0) 
     call this%set_subparts_coupling_criteria( subparts_coupling_criteria ) 
  else 
     call this%set_subparts_coupling_criteria(loose_coupling) 
  end if
     
  if ( p_environment%am_i_l1_task() ) then  
     ! Get num_dims from FPL
     massert(parameters%isAssignable(p4est_triang_num_dims_key, num_dims), 'num_dims not found or un-usable')
     istat = parameters%get(key = p4est_triang_num_dims_key, value = num_dims); assert(istat==0)
     call this%set_num_dims(num_dims)
     if( parameters%isPresent(key = p4est_triang_domain_limits_cla_name) ) then
       istat = parameters%GetShape(key = p4est_triang_domain_limits_cla_name, shape = array_size); check(istat==0)
       assert(array_size(1) >= 2*this%get_num_dims())
       call memalloc(array_size(1), bounding_box_limits,__FILE__,__LINE__)
       assert(parameters%isAssignable(struct_hex_triang_domain_limits_key, bounding_box_limits))
       istat = parameters%get(key = p4est_triang_domain_limits_cla_name , value = bounding_box_limits); check(istat==0)
       do idime = 1,this%get_num_dims()
         this%bounding_box_limits(idime,1) = bounding_box_limits(2*idime-1)
         this%bounding_box_limits(idime,2) = bounding_box_limits(2*idime)
         assert(this%bounding_box_limits(idime,2)>this%bounding_box_limits(idime,1))
       end do
       call memfree(bounding_box_limits,__FILE__,__LINE__)
     else
       this%bounding_box_limits(:,1) = 0.0_rp
       this%bounding_box_limits(:,2) = 1.0_rp
     end if
     
     if( parameters%isPresent(key = p4est_triang_log_level_key) ) then
       assert(parameters%isAssignable(p4est_triang_log_level_key, p4est_log_level))
       istat = parameters%get(key = p4est_triang_log_level_key, value = p4est_log_level); check(istat==0)
     else
       p4est_log_level = p4est_triang_log_level_cla_name
     end if
     
     if( parameters%isPresent(key = p4est_triang_2_1_k_balance_key ) ) then
       assert(parameters%isAssignable(p4est_triang_2_1_k_balance_key, this%k_2_1_balance))
       istat = parameters%get(key = p4est_triang_2_1_k_balance_key, value = this%k_2_1_balance); check(istat==0)
     else
       this%k_2_1_balance = default_p4est_triang_2_1_k_balance
     end if

     if( parameters%isPresent(key = p4est_triang_k_ghost_cells_key ) ) then
       assert(parameters%isAssignable(p4est_triang_k_ghost_cells_key, this%k_ghost_cells))
       istat = parameters%get(key = p4est_triang_k_ghost_cells_key, value = this%k_ghost_cells); check(istat==0)
     else
       this%k_ghost_cells = default_p4est_triang_k_ghost_cells
     end if

     call this%reference_fe_geo%create( topology_hex, &
                                        this%get_num_dims(), &
                                        1, &
                                        field_type_scalar, & 
                                        conformity=.true.)  
    
     call this%allocate_and_gen_reference_fe_geo_scratch_data()
 
     context => p_environment%get_l1_context()
     select type(context)
     class is (mpi_context_t)
       mpi_context => context
     class default
       mcheck(.false., "mpi_context_t required by p4est_par_triangulation")
     end select
     call F90_p4est_init(mpi_context%get_icontxt(),p4est_log_level)
     
     if ( this%get_num_dims() == 2 ) then
        call F90_p4est_connectivity_new_unitsquare(this%p4est_connectivity)
        call F90_p4est_connectivity_set_bounding_box_limits(this%p4est_connectivity, c_loc(this%bounding_box_limits) )
        call F90_p4est_new(mpi_context%get_icontxt(),this%p4est_connectivity, this%p4est)
        call this%update_p4est_mesh()
        call this%update_topology_from_p4est_mesh()
        call this%update_cell_import()
        call this%update_cell_ggids()
        call this%update_cell_myparts()
        call this%extend_p4est_topology_arrays_to_ghost_cells()
        call this%update_lst_vefs_gids_and_cells_around(old_lst_vefs_gids)
        call this%fill_x_cell_vertex_coordinates()
        call old_lst_vefs_gids%free()
        call this%clear_refinement_and_coarsening_flags()
        call this%clear_cell_weights()
        call this%clear_cell_set_ids()
        call this%clear_disconnected_cells_set_ids() 
        call this%set_up_lst_itfc_vefs()
        call this%clear_vef_set_ids()
     else if ( this%get_num_dims() == 3 ) then
        call F90_p8est_connectivity_new_unitcube(this%p4est_connectivity)
        call F90_p4est_connectivity_set_bounding_box_limits(this%p4est_connectivity, c_loc(this%bounding_box_limits) )
        call F90_p8est_new(mpi_context%get_icontxt(),this%p4est_connectivity, this%p4est)
        call this%update_p4est_mesh()
        call this%update_topology_from_p4est_mesh()
        call this%update_cell_import()
        call this%update_cell_ggids()
        call this%update_cell_myparts()
        call this%extend_p4est_topology_arrays_to_ghost_cells()
        call this%find_missing_corner_neighbours()
        call this%update_lst_vefs_gids_and_cells_around(old_lst_vefs_gids)
        call this%fill_x_cell_vertex_coordinates()
        call old_lst_vefs_gids%free()
        call this%clear_refinement_and_coarsening_flags()
        call this%clear_cell_weights()
        call this%clear_cell_set_ids()
        call this%clear_disconnected_cells_set_ids()
        call this%set_up_lst_itfc_vefs()
        !call this%update_lst_vef_gids_and_cells_around_ghost_cells()
        call this%clear_vef_set_ids()
        ! IMPORTANT NOTE: we need to RE-SETUP lst_itfc_vefs as we may have added 
        ! new proper interface VEFs in update_lst_vef_gids_and_cells_around_ghost_cells()
        call this%set_up_lst_itfc_vefs()
     end if
  end if 
#else
  call this%not_enabled_error()
#endif
end subroutine p4est_par_triangulation_create  

subroutine p4est_par_triangulation_free ( this)
  implicit none
  class(p4est_par_triangulation_t), target, intent(inout) :: this
  class(environment_t), pointer :: p_environment
  class(execution_context_t), pointer :: context
  type(cell_import_t), pointer :: cell_import
  
#ifdef ENABLE_P4EST
  p_environment => this%get_environment()
  if ( associated(p_environment) ) then
     if ( p_environment%am_i_l1_task() ) then
        if ( this%get_num_dims() == 2 ) then
           call F90_p4est_destroy(this%p4est)
           call F90_p4est_connectivity_destroy(this%p4est_connectivity)
           call F90_p4est_mesh_destroy(this%p4est_mesh)
           call F90_p4est_ghost_destroy(this%p4est_ghost)
        else if ( this%get_num_dims() == 3 ) then  
           call F90_p8est_destroy(this%p4est)
           call F90_p8est_connectivity_destroy(this%p4est_connectivity)
           call F90_p8est_mesh_destroy(this%p4est_mesh)
           call F90_p4est_locidx_buffer_destroy(this%QHE)
           call F90_p8est_ghost_destroy(this%p4est_ghost)
        end if

        this%p4est_connectivity = c_null_ptr
        this%p4est              = c_null_ptr
        this%p4est_mesh         = c_null_ptr
        this%QHE                = c_null_ptr
        this%p4est_ghost        = c_null_ptr
        
        call this%per_cell_vertex_coordinates%free()
        call this%lst_vefs_gids%free()
        call this%cell_ggids%free()
        call this%cell_myparts%free()
        call this%ptr_cells_around_proper_vefs%free()
        call this%lst_cells_around_proper_vefs%free()
        call this%ptr_cells_around_improper_vefs%free()
        call this%lst_cells_around_improper_vefs%free()
        call this%ptr_improper_cells_around%free()
        call this%lst_improper_cells_around%free()
        call this%improper_vefs_improper_cell_around_ivef%free()
        call this%improper_vefs_improper_cell_around_subvef%free()
        call this%proper_vefs_dim%free()
        call this%improper_vefs_dim%free()
        call this%proper_vefs_at_boundary%free()
        call this%proper_vefs_at_interface%free()
        call this%improper_vefs_at_interface%free()
        call this%proper_vefs_is_ghost%free()
        call this%improper_vefs_is_ghost%free()
        call this%refinement_and_coarsening_flags%free()
        call this%cell_set_ids%free()
        call this%cell_weights%free()
        call this%disconnected_cells_set_ids%free() 
        call this%proper_vefs_set_ids%free()
        call this%improper_vefs_set_ids%free()
        call this%new_vef_set_ids%free()
        call this%old_vef_set_ids%free()
        call this%old_vef_set_ids%free()
        call this%free_lst_itfc_vefs()
        
        cell_import => this%get_cell_import()
        call cell_import%free()

        if (associated(this%quad_to_quad))   deallocate(this%quad_to_quad)
        if (associated(this%quad_to_face))   deallocate(this%quad_to_face)
        if (associated(this%quad_to_half))   deallocate(this%quad_to_half)
        if (associated(this%quad_to_corner)) deallocate(this%quad_to_corner)
        if (associated(this%quad_to_half_by_edge) ) deallocate(this%quad_to_half_by_edge)
        
        if (allocated(this%quad_coords)) &
             call memfree(this%quad_coords, __FILE__, __LINE__)

        if (allocated(this%quad_level)) &
             call memfree(this%quad_level, __FILE__, __LINE__)

        if (allocated(this%quad_to_quad_by_edge)) &
             call memfree(this%quad_to_quad_by_edge, __FILE__, __LINE__)

        if (allocated(this%quad_to_edge)) &
             call memfree(this%quad_to_edge, __FILE__, __LINE__)
             
        if (allocated(this%global_first_quadrant)) &
             call memfree(this%global_first_quadrant, __FILE__, __LINE__)
        
        this%k_2_1_balance  = -1
        this%k_ghost_cells = -1
        this%num_proper_vefs = -1
        this%num_improper_vefs = -1
        this%previous_num_local_cells = -1
        this%previous_num_ghost_cells = -1

        this%bounding_box_limits = 0.0_rp
        
        call this%reference_fe_geo%free()
        call this%free_reference_fe_geo_scratch_data()
        
        context => p_environment%get_l1_context()
        select type(context)
           class is (mpi_context_t)
           call F90_p4est_finalize()
           class default
           mcheck(.false., "mpi_context_t required by p4est_par_triangulation")
        end select
        
        this%num_snd = -1
        call F90_p4est_locidx_buffer_destroy(this%p_lst_snd)
        this%p_lst_snd  = c_null_ptr
        call F90_p4est_locidx_buffer_destroy(this%p_snd_ptrs)
        this%p_snd_ptrs = c_null_ptr
        call F90_p4est_locidx_buffer_destroy(this%p_pack_idx)
        this%p_pack_idx = c_null_ptr
        call F90_p4est_locidx_buffer_destroy(this%p_old2new)
        this%p_old2new  = c_null_ptr
        nullify(this%lst_snd)
        nullify(this%snd_ptrs)
        nullify(this%pack_idx)
        nullify(this%old2new)
    
        this%num_rcv = -1
        call F90_p4est_locidx_buffer_destroy(this%p_lst_rcv)
        this%p_lst_rcv    = c_null_ptr
        call F90_p4est_locidx_buffer_destroy(this%p_rcv_ptrs)
        this%p_rcv_ptrs   = c_null_ptr
        call F90_p4est_locidx_buffer_destroy(this%p_unpack_idx)
        this%p_unpack_idx = c_null_ptr
        call F90_p4est_locidx_buffer_destroy(this%p_new2old)
        this%p_new2old  = c_null_ptr
        nullify(this%lst_rcv)
        nullify(this%rcv_ptrs)
        nullify(this%unpack_idx)
        nullify(this%new2old)
        this%clear_refinement_and_coarsening_flags_pending = .false.
     end if
  end if
  call triangulation_free(this)
#else
  call this%not_enabled_error()
#endif
end subroutine p4est_par_triangulation_free

subroutine p4est_par_triangulation_clear_disconnected_cells_set_ids(this)
  implicit none
  class(p4est_par_triangulation_t), intent(inout) :: this
  integer(ip) :: istat
  class(environment_t), pointer :: environment
#ifdef ENABLE_P4EST
  environment => this%get_environment()
  if (environment%am_i_l1_task()) then
    call this%disconnected_cells_set_ids%resize(0)
    call this%disconnected_cells_set_ids%resize(this%get_num_cells(), 0)
  end if  
#else
  call this%not_enabled_error()
#endif        
end subroutine p4est_par_triangulation_clear_disconnected_cells_set_ids

subroutine p4est_par_triangulation_redistribute ( this )
  implicit none
  class(p4est_par_triangulation_t), intent(inout) :: this
  class(environment_t), pointer :: p_environment
  type(std_vector_integer_ip_t) :: old_lst_vefs_gids
  type(c_ptr) :: p4est_old
  integer(ip), pointer :: user_pointer(:)

#ifdef ENABLE_P4EST  
  p_environment => this%get_environment()
  if ( p_environment%am_i_l1_task() ) then
    if ( this%get_num_dims() == 2 ) then
      user_pointer => this%cell_weights%get_pointer()
      if ( associated(user_pointer) ) then
        call F90_p4est_set_user_pointer(c_loc(user_pointer),this%p4est)
      else
        call F90_p4est_set_user_pointer(C_NULL_PTR,this%p4est)
      end if 
      p4est_old = c_null_ptr; call F90_p4est_copy(this%p4est,p4est_old) 
      call F90_p4est_partition(this%p4est)
    else if ( this%get_num_dims() == 3 ) then
      user_pointer => this%cell_weights%get_pointer()
      if ( associated(user_pointer) ) then
        call F90_p8est_set_user_pointer(c_loc(user_pointer),this%p4est)
      else
        call F90_p8est_set_user_pointer(C_NULL_PTR,this%p4est)
      end if
      p4est_old = c_null_ptr; call F90_p8est_copy(this%p4est,p4est_old) 
      call F90_p8est_partition(this%p4est)
    end if
    
    call this%update_p4est_mesh()
    call this%update_topology_from_p4est_mesh()
    call this%update_cell_import()
    call this%update_cell_ggids()
    call this%update_cell_myparts()
    call this%extend_p4est_topology_arrays_to_ghost_cells()
    call this%find_missing_corner_neighbours()
    call this%update_lst_vefs_gids_and_cells_around(old_lst_vefs_gids)
    call this%fill_x_cell_vertex_coordinates()
    call this%update_migration_control_data(p4est_old)
    call this%set_up_lst_itfc_vefs()

    call this%migrate_cell_set_ids()
    call this%migrate_cell_weights()
    call this%migrate_vef_set_ids(old_lst_vefs_gids)
    call old_lst_vefs_gids%free()
    call this%comm_cell_set_ids()
    call this%comm_cell_wise_vef_set_ids(this%new_vef_set_ids)
    call this%fill_ghost_cells_from_cell_wise_vef_set_ids(this%new_vef_set_ids)

    if ( this%get_num_dims() == 2 ) then
      call F90_p4est_destroy(p4est_old)
    else if ( this%get_num_dims() == 3 ) then
      call F90_p8est_destroy(p4est_old)
    end if
  end if
  
  ! Re-set up coarse_triangulation()
  if ( this%coarse_triangulation_is_set_up() ) then
    call this%setup_coarse_triangulation()
  end if 
  
#else
  call this%not_enabled_error()
#endif
end subroutine p4est_par_triangulation_redistribute


subroutine p4est_par_triangulation_update_migration_control_data(this, p4est_old)
  implicit none
  class(p4est_par_triangulation_t), intent(inout) :: this
  type(c_ptr)                     , intent(in)    :: p4est_old
#ifdef ENABLE_P4EST
  if ( this%get_num_dims() == 2 ) then
    call F90_p4est_compute_migration_control_data (p4est_old, &
                                                   this%p4est, &
                                                   this%num_snd, &
                                                   this%p_lst_snd, &
                                                   this%p_snd_ptrs, &
                                                   this%p_pack_idx, &
                                                   this%p_old2new)
  else if ( this%get_num_dims() == 3 ) then
    call F90_p8est_compute_migration_control_data (p4est_old, &
                                                   this%p4est, &
                                                   this%num_snd, &
                                                   this%p_lst_snd, &
                                                   this%p_snd_ptrs, &
                                                   this%p_pack_idx, &
                                                   this%p_old2new)
  end if 
    
  call c_f_pointer(this%p_lst_snd, &
                   this%lst_snd, &
                   [this%num_snd])
  call c_f_pointer(this%p_snd_ptrs, &
                   this%snd_ptrs,&
                   [this%num_snd+1])
  call c_f_pointer(this%p_pack_idx , &
                   this%pack_idx, &
                   [this%snd_ptrs(this%num_snd+1)-1])
  call c_f_pointer(this%p_old2new, &
                   this%old2new, &
                   [this%previous_num_local_cells])
  
  if ( this%get_num_dims() == 2 ) then
    call F90_p4est_compute_migration_control_data (this%p4est, &
                                                   p4est_old, &
                                                   this%num_rcv, &
                                                   this%p_lst_rcv, &
                                                   this%p_rcv_ptrs, &
                                                   this%p_unpack_idx, &
                                                   this%p_new2old)
  else if (this%get_num_dims() == 3) then
    call F90_p8est_compute_migration_control_data (this%p4est, &
                                                   p4est_old, &
                                                   this%num_rcv, &
                                                   this%p_lst_rcv, &
                                                   this%p_rcv_ptrs, &
                                                   this%p_unpack_idx, &
                                                   this%p_new2old)
  end if 
  call c_f_pointer(this%p_lst_rcv, &
                   this%lst_rcv, &
                   [this%num_rcv])
  call c_f_pointer(this%p_rcv_ptrs,&
                   this%rcv_ptrs,& 
                   [this%num_rcv+1])
  call c_f_pointer(this%p_unpack_idx,& 
                   this%unpack_idx,& 
                   [this%rcv_ptrs(this%num_rcv+1)-1] )
  call c_f_pointer(this%p_new2old, &
                   this%new2old, &
                   [this%get_num_local_cells()])
  
  
#else
  call this%not_enabled_error()
#endif
end subroutine p4est_par_triangulation_update_migration_control_data

subroutine p4est_par_triangulation_migrate_cell_set_ids(this)
  implicit none
  class(p4est_par_triangulation_t), intent(inout) :: this
  type(std_vector_integer_ip_t) :: old_cell_set_ids
  integer(ip), pointer :: p_old_cell_set_ids(:)
  integer(ip), pointer :: p_cell_set_ids(:)
  class(environment_t), pointer :: environment
  class(cell_import_t), pointer :: cell_import
  integer(ip) :: i 
#ifdef ENABLE_P4EST
  
  environment => this%get_environment()
  
  call old_cell_set_ids%copy(this%cell_set_ids)
  call this%cell_set_ids%resize(0)
  call this%cell_set_ids%resize(this%get_num_local_cells()+this%get_num_ghost_cells(),-1)
  p_old_cell_set_ids => old_cell_set_ids%get_pointer()
  p_cell_set_ids     => this%cell_set_ids%get_pointer()
  do i=1, this%get_num_local_cells()
    if (this%new2old(i) /= 0) then
      p_cell_set_ids (i) = p_old_cell_set_ids(this%new2old(i))
    end if  
  end do
  call environment%l1_neighbours_exchange (this%num_rcv, this%lst_rcv, this%rcv_ptrs , this%unpack_idx, &
                                           this%num_snd, this%lst_snd, this%snd_ptrs, this%pack_idx, &
                                           p_old_cell_set_ids, p_cell_set_ids )
  call old_cell_set_ids%free()
#else
  call this%not_enabled_error()
#endif
end subroutine p4est_par_triangulation_migrate_cell_set_ids

subroutine p4est_par_triangulation_migrate_cell_weights(this)
  implicit none
  class(p4est_par_triangulation_t), intent(inout) :: this
  type(std_vector_integer_ip_t) :: old_cell_weights
  integer(ip), pointer :: p_old_cell_weights(:)
  integer(ip), pointer :: p_cell_weights(:)
  class(environment_t), pointer :: environment
  class(cell_import_t), pointer :: cell_import
  integer(ip) :: i 
#ifdef ENABLE_P4EST
  
  environment => this%get_environment()
  
  call old_cell_weights%copy(this%cell_weights)
  call this%cell_weights%resize(0)
  call this%cell_weights%resize(this%get_num_local_cells()+this%get_num_ghost_cells(),-1)
  
  p_old_cell_weights => old_cell_weights%get_pointer()
  p_cell_weights     => this%cell_weights%get_pointer()
  do i=1, this%get_num_local_cells()
    if (this%new2old(i) /= 0) then
      p_cell_weights (i) = p_old_cell_weights(this%new2old(i))
    end if  
  end do
  call environment%l1_neighbours_exchange (this%num_rcv, this%lst_rcv, this%rcv_ptrs , this%unpack_idx, &
                                           this%num_snd, this%lst_snd, this%snd_ptrs, this%pack_idx, &
                                           p_old_cell_weights, p_cell_weights )
  call old_cell_weights%free()
#else
  call this%not_enabled_error()
#endif
end subroutine p4est_par_triangulation_migrate_cell_weights

subroutine p4est_par_triangulation_migrate_vef_set_ids(this, old_lst_vefs_gids)
  implicit none
  class(p4est_par_triangulation_t), intent(inout) :: this
  type(std_vector_integer_ip_t)   , intent(in)    :: old_lst_vefs_gids
  type(p4est_cell_iterator_t) :: cell
  type(p4est_vef_iterator_t)  :: vef  
  integer(ip) :: i, vef_lid
  integer(ip), pointer :: data_buffer(:)
  integer(ip) :: base_pos_old
  integer(ip) :: base_pos_new
  integer(ip) :: old_vef_set_id, new_vef_set_id
  integer(ip) :: old_vef_gid
  integer(ip), pointer :: p_old_vef_set_ids(:)
  integer(ip), pointer :: p_new_vef_set_ids(:)
  class(environment_t), pointer :: environment
  class(cell_import_t), pointer :: cell_import
  integer(ip) :: num_vefs

#ifdef ENABLE_P4EST
  environment => this%get_environment()
  num_vefs = this%get_ptr_vefs_x_cell(2)-this%get_ptr_vefs_x_cell(1)
  ! Re-build cell-wise old vef set IDs
  call this%old_vef_set_ids%resize(0)
  do i=1, this%previous_num_local_cells
    base_pos_old = this%get_ptr_vefs_x_cell(i)-1
    do vef_lid=1, num_vefs
      old_vef_gid = old_lst_vefs_gids%get(base_pos_old+vef_lid)
      if ( old_vef_gid > 0 ) then ! VEF is proper
        old_vef_set_id = this%proper_vefs_set_ids%get(old_vef_gid)
      else                        ! VEF is improper
        old_vef_set_id = this%improper_vefs_set_ids%get(abs(old_vef_gid))
      end if
      call this%old_vef_set_ids%push_back(old_vef_set_id)
    end do
  end do
  p_old_vef_set_ids => this%old_vef_set_ids%get_pointer()
  
  call this%improper_vefs_set_ids%resize(0)
  call this%improper_vefs_set_ids%resize(this%num_improper_vefs,0)
  
  call this%proper_vefs_set_ids%resize(0)
  call this%proper_vefs_set_ids%resize(this%num_proper_vefs,0)
  
  call this%new_vef_set_ids%resize(0)
  call this%new_vef_set_ids%resize((this%get_num_local_cells()+this%get_num_ghost_cells())*num_vefs,0)
  p_new_vef_set_ids => this%new_vef_set_ids%get_pointer()
  
  ! Transfer vef set IDs of local cells
  do i=1, this%get_num_local_cells()
    if (this%new2old(i) /= 0) then
       base_pos_old = this%get_ptr_vefs_x_cell(this%new2old(i))-1
       base_pos_new = this%get_ptr_vefs_x_cell(i)-1
       do vef_lid=1, num_vefs
         old_vef_set_id = p_old_vef_set_ids(base_pos_old+vef_lid)
         p_new_vef_set_ids(base_pos_new+vef_lid) = old_vef_set_id
       end do
    end if  
  end do
  
  ! Transfer vef set IDs of remote cells
  call environment%l1_neighbours_exchange (this%num_rcv, this%lst_rcv, this%rcv_ptrs , this%unpack_idx, &
                                           this%num_snd, this%lst_snd, this%snd_ptrs, this%pack_idx, &
                                           p_old_vef_set_ids, p_new_vef_set_ids, num_vefs )

  call this%fill_local_cells_from_cell_wise_vef_set_ids(this%new_vef_set_ids)
  
#else
  call this%not_enabled_error()
#endif
end subroutine p4est_par_triangulation_migrate_vef_set_ids

function p4est_par_triangulation_get_migration_num_snd(this)
  implicit none
  class(p4est_par_triangulation_t), intent(in) :: this
  integer(ip) :: p4est_par_triangulation_get_migration_num_snd
#ifdef ENABLE_P4EST  
  p4est_par_triangulation_get_migration_num_snd = this%num_snd
#else
  call this%not_enabled_error()
#endif
end function p4est_par_triangulation_get_migration_num_snd

function p4est_par_triangulation_get_migration_lst_snd(this)
  implicit none
  class(p4est_par_triangulation_t), intent(in) :: this
  integer(ip), pointer :: p4est_par_triangulation_get_migration_lst_snd(:)
#ifdef ENABLE_P4EST  
  p4est_par_triangulation_get_migration_lst_snd => this%lst_snd
#else
  call this%not_enabled_error()
#endif
end function p4est_par_triangulation_get_migration_lst_snd

function p4est_par_triangulation_get_migration_snd_ptrs(this)
  implicit none
  class(p4est_par_triangulation_t), intent(in) :: this
  integer(ip), pointer :: p4est_par_triangulation_get_migration_snd_ptrs(:)
#ifdef ENABLE_P4EST  
  p4est_par_triangulation_get_migration_snd_ptrs => this%snd_ptrs
#else
  call this%not_enabled_error()
#endif
end function p4est_par_triangulation_get_migration_snd_ptrs

function p4est_par_triangulation_get_migration_pack_idx(this)
  implicit none
  class(p4est_par_triangulation_t), intent(in) :: this
  integer(ip), pointer :: p4est_par_triangulation_get_migration_pack_idx(:)
#ifdef ENABLE_P4EST  
  p4est_par_triangulation_get_migration_pack_idx => this%pack_idx
#else
  call this%not_enabled_error()
#endif
end function p4est_par_triangulation_get_migration_pack_idx

function p4est_par_triangulation_get_migration_num_rcv(this)
  implicit none
  class(p4est_par_triangulation_t), intent(in) :: this
  integer(ip) :: p4est_par_triangulation_get_migration_num_rcv
#ifdef ENABLE_P4EST  
  p4est_par_triangulation_get_migration_num_rcv = this%num_rcv
#else
  call this%not_enabled_error()
#endif
end function p4est_par_triangulation_get_migration_num_rcv

function p4est_par_triangulation_get_migration_lst_rcv(this)
  implicit none
  class(p4est_par_triangulation_t), intent(in) :: this
  integer(ip), pointer :: p4est_par_triangulation_get_migration_lst_rcv(:)
#ifdef ENABLE_P4EST  
  p4est_par_triangulation_get_migration_lst_rcv => this%lst_rcv
#else
  call this%not_enabled_error()
#endif
end function p4est_par_triangulation_get_migration_lst_rcv

function p4est_par_triangulation_get_migration_rcv_ptrs(this)
  implicit none
  class(p4est_par_triangulation_t), intent(in) :: this
  integer(ip), pointer :: p4est_par_triangulation_get_migration_rcv_ptrs(:)
#ifdef ENABLE_P4EST  
  p4est_par_triangulation_get_migration_rcv_ptrs => this%rcv_ptrs
#else
  call this%not_enabled_error()
#endif
end function p4est_par_triangulation_get_migration_rcv_ptrs

function p4est_par_triangulation_get_migration_unpack_idx(this)
  implicit none
  class(p4est_par_triangulation_t), intent(in) :: this
  integer(ip), pointer :: p4est_par_triangulation_get_migration_unpack_idx(:)
#ifdef ENABLE_P4EST  
  p4est_par_triangulation_get_migration_unpack_idx => this%unpack_idx
#else
  call this%not_enabled_error()
#endif
end function p4est_par_triangulation_get_migration_unpack_idx

function p4est_par_triangulation_get_migration_new2old(this)
  implicit none
  class(p4est_par_triangulation_t), intent(in) :: this
  integer(ip), pointer :: p4est_par_triangulation_get_migration_new2old(:)
#ifdef ENABLE_P4EST  
  p4est_par_triangulation_get_migration_new2old => this%new2old
#else
  call this%not_enabled_error()
#endif
end function p4est_par_triangulation_get_migration_new2old

function p4est_par_triangulation_get_migration_old2new(this)
  implicit none
  class(p4est_par_triangulation_t), intent(in) :: this
  integer(ip), pointer :: p4est_par_triangulation_get_migration_old2new(:)
#ifdef ENABLE_P4EST  
  p4est_par_triangulation_get_migration_old2new => this%old2new
#else
  call this%not_enabled_error()
#endif  
end function p4est_par_triangulation_get_migration_old2new
