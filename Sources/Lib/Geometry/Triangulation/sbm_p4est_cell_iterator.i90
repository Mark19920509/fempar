! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
subroutine p4est_cell_iterator_create ( this, triangulation )
  implicit none
  class(p4est_cell_iterator_t)  , intent(inout) :: this
  class(triangulation_t), target, intent(in)    :: triangulation
  call this%free()
  call cell_iterator_create(this,triangulation)
  select type(triangulation)
  class is (p4est_base_triangulation_t)
    this%p4est_triangulation => triangulation
  class default
    assert(.false.)
  end select
  this%num_dims = triangulation%get_num_dims()
  this%num_vefs = this%get_num_vefs()
  this%base_pos_in_lst_vefs_gids = 0
  this%num_vertices = this%get_num_vertices()
  this%base_pos_in_vertex_coords = 0
  this%num_local_cells = this%p4est_triangulation%get_num_local_cells()
end subroutine p4est_cell_iterator_create

subroutine p4est_cell_iterator_free ( this)
  implicit none
  class(p4est_cell_iterator_t), intent(inout) :: this
  call cell_iterator_free(this)
  nullify ( this%p4est_triangulation )
  this%num_dims=0
  this%num_vefs = 0
  this%base_pos_in_lst_vefs_gids = 0
  this%num_vertices = 0
  this%base_pos_in_vertex_coords = 0
  this%num_local_cells = 0
end subroutine p4est_cell_iterator_free

subroutine p4est_cell_iterator_first ( this)
  implicit none
  class(p4est_cell_iterator_t), intent(inout) :: this
  call cell_iterator_first(this)
  this%base_pos_in_lst_vefs_gids = 0
  this%base_pos_in_vertex_coords = 0
end subroutine p4est_cell_iterator_first 

subroutine p4est_cell_iterator_next ( this)
  implicit none
  class(p4est_cell_iterator_t), intent(inout) :: this
  call cell_iterator_next(this)
  this%base_pos_in_lst_vefs_gids = this%base_pos_in_lst_vefs_gids + this%num_vefs
  this%base_pos_in_vertex_coords = this%base_pos_in_vertex_coords + this%num_vertices
end subroutine p4est_cell_iterator_next

subroutine p4est_cell_iterator_set_gid(this, gid)
  implicit none
  class(p4est_cell_iterator_t), intent(inout) :: this
  integer(ip)           , intent(in)    :: gid
  call cell_iterator_set_gid(this, gid)
  this%base_pos_in_lst_vefs_gids = (gid-1)*this%num_vefs
  this%base_pos_in_vertex_coords = (gid-1)*this%num_vertices
end subroutine p4est_cell_iterator_set_gid

subroutine p4est_cell_iterator_free_final(this)
  implicit none
  type(p4est_cell_iterator_t), intent(inout) :: this
  assert(.not. associated(this%p4est_triangulation ))
end subroutine p4est_cell_iterator_free_final

function p4est_cell_iterator_get_reference_fe (this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  class(reference_fe_t), pointer     :: p4est_cell_iterator_get_reference_fe
  p4est_cell_iterator_get_reference_fe => this%p4est_triangulation%reference_fe_geo
end function p4est_cell_iterator_get_reference_fe

function p4est_cell_iterator_get_reference_fe_id (this) 
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip) :: p4est_cell_iterator_get_reference_fe_id
  p4est_cell_iterator_get_reference_fe_id = 1 
end function p4est_cell_iterator_get_reference_fe_id

subroutine p4est_cell_iterator_get_nodes_coordinates (this, nodes_coordinates)
  implicit none
  class(p4est_cell_iterator_t), intent(in)    :: this
  type(point_t)        ,  intent(inout) :: nodes_coordinates(:)
  integer(ip) :: spos
  integer(ip) :: epos
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  spos = this%base_pos_in_vertex_coords+1
  epos = this%base_pos_in_vertex_coords+this%num_vertices
  nodes_coordinates(1:this%num_vertices) = this%p4est_triangulation%per_cell_vertex_coordinates%get_pointer(spos,epos)
end subroutine p4est_cell_iterator_get_nodes_coordinates

function p4est_cell_iterator_get_mypart (this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip) :: p4est_cell_iterator_get_mypart
  p4est_cell_iterator_get_mypart = this%p4est_triangulation%cell_myparts%get(this%get_gid())
end function p4est_cell_iterator_get_mypart

subroutine p4est_cell_iterator_set_set_id(this,set_id)
  implicit none
  class(p4est_cell_iterator_t), intent(inout) :: this
  integer(ip)                 ,  intent(in)   :: set_id
  assert ( this%is_local() )
  call this%p4est_triangulation%cell_set_ids%set(this%get_gid(),set_id)
end subroutine p4est_cell_iterator_set_set_id

function p4est_cell_iterator_get_set_id(this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip) :: p4est_cell_iterator_get_set_id
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  p4est_cell_iterator_get_set_id = this%p4est_triangulation%cell_set_ids%get(this%get_gid())
end function p4est_cell_iterator_get_set_id

function p4est_cell_iterator_get_disconnected_set_id(this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip) :: p4est_cell_iterator_get_disconnected_set_id
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  p4est_cell_iterator_get_disconnected_set_id = this%p4est_triangulation%disconnected_cells_set_ids%get(this%get_gid())
end function p4est_cell_iterator_get_disconnected_set_id

function p4est_cell_iterator_get_level(this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip) :: p4est_cell_iterator_get_level
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  p4est_cell_iterator_get_level = this%p4est_triangulation%quad_level(this%get_gid())
end function p4est_cell_iterator_get_level

function p4est_cell_iterator_get_num_vefs (this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip)                        :: p4est_cell_iterator_get_num_vefs
  p4est_cell_iterator_get_num_vefs = 0
  if ( this%num_dims == 2 ) then
    p4est_cell_iterator_get_num_vefs = NUM_VEFS_2D
  else if ( this%num_dims == 3 ) then
    p4est_cell_iterator_get_num_vefs = NUM_VEFS_3D
  end if
end function p4est_cell_iterator_get_num_vefs

function p4est_cell_iterator_get_num_vertices (this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip) :: p4est_cell_iterator_get_num_vertices
  p4est_cell_iterator_get_num_vertices = 0
  if ( this%num_dims == 2 ) then
    p4est_cell_iterator_get_num_vertices = NUM_CORNERS_2D
  else if ( this%num_dims == 3 ) then
    p4est_cell_iterator_get_num_vertices = NUM_CORNERS_3D
  end if
end function p4est_cell_iterator_get_num_vertices


function p4est_cell_iterator_get_num_nodes (this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip)                        :: p4est_cell_iterator_get_num_nodes
  class(reference_fe_t), pointer :: ref_element_geo
  ref_element_geo => this%get_reference_fe()
  p4est_cell_iterator_get_num_nodes = ref_element_geo%get_num_shape_functions()
end function p4est_cell_iterator_get_num_nodes

function p4est_cell_iterator_get_ggid (this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(igp) :: p4est_cell_iterator_get_ggid
  p4est_cell_iterator_get_ggid = this%p4est_triangulation%cell_ggids%get(this%get_gid())
end function p4est_cell_iterator_get_ggid

function p4est_cell_iterator_get_vef_gid (this, vef_lid)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip)                 , intent(in) :: vef_lid
  integer(ip)                        :: p4est_cell_iterator_get_vef_gid
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  assert ( this%p4est_triangulation%get_ptr_vefs_x_cell(this%get_gid())-1 == this%base_pos_in_lst_vefs_gids ) 
  p4est_cell_iterator_get_vef_gid = this%p4est_triangulation%lst_vefs_gids%get(this%base_pos_in_lst_vefs_gids+vef_lid)
end function p4est_cell_iterator_get_vef_gid

function p4est_cell_iterator_get_vefs_gid (this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip)                        :: ivef
  integer(ip), pointer               :: p4est_cell_iterator_get_vefs_gid(:)
  integer(ip) :: spos, epos
  assert ( this%p4est_triangulation%get_ptr_vefs_x_cell(this%get_gid())-1 == this%base_pos_in_lst_vefs_gids ) 
  spos = this%base_pos_in_lst_vefs_gids+1
  epos = this%base_pos_in_lst_vefs_gids+this%num_vefs
  p4est_cell_iterator_get_vefs_gid => this%p4est_triangulation%lst_vefs_gids%get_pointer(spos,epos)
end function p4est_cell_iterator_get_vefs_gid

function p4est_cell_iterator_get_vef_ggid (this, vef_lid)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip)                 , intent(in) :: vef_lid
  integer(igp)                       :: p4est_cell_iterator_get_vef_ggid
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  assert ( this%p4est_triangulation%get_ptr_vefs_x_cell(this%get_gid())-1 == this%base_pos_in_lst_vefs_gids ) 
  p4est_cell_iterator_get_vef_ggid = this%p4est_triangulation%lst_vefs_gids%get(this%base_pos_in_lst_vefs_gids+vef_lid)
end function p4est_cell_iterator_get_vef_ggid

function p4est_cell_iterator_get_vef_lid_from_gid (this, vef_gid)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip)                 , intent(in) :: vef_gid
  integer(ip)                        :: p4est_cell_iterator_get_vef_lid_from_gid
  integer(ip)                        :: ivef
  assert ( this%p4est_triangulation%get_ptr_vefs_x_cell(this%get_gid())-1 == this%base_pos_in_lst_vefs_gids ) 
  p4est_cell_iterator_get_vef_lid_from_gid = -1
  ! Find position of vef_lid in local element
  do ivef = 1, this%num_vefs
   if ( this%p4est_triangulation%lst_vefs_gids%get(this%base_pos_in_lst_vefs_gids+ivef) == vef_gid ) then
      p4est_cell_iterator_get_vef_lid_from_gid = ivef
      return 
    end if
  end do
end function p4est_cell_iterator_get_vef_lid_from_gid

function p4est_cell_iterator_get_vef_lid_from_ggid (this, vef_ggid)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(igp)                , intent(in) :: vef_ggid
  integer(ip)                        :: p4est_cell_iterator_get_vef_lid_from_ggid
  integer(ip)                        :: ivef
  assert ( this%p4est_triangulation%get_ptr_vefs_x_cell(this%get_gid())-1 == this%base_pos_in_lst_vefs_gids ) 
  p4est_cell_iterator_get_vef_lid_from_ggid = -1
  !Find position of vef_lid in local element
  do ivef = 1, this%num_vefs
    if ( this%p4est_triangulation%lst_vefs_gids%get(this%base_pos_in_lst_vefs_gids+ivef) == vef_ggid ) then
      p4est_cell_iterator_get_vef_lid_from_ggid = ivef
      return 
    end if
  end do
end function p4est_cell_iterator_get_vef_lid_from_ggid

subroutine p4est_cell_iterator_get_vef (this, vef_lid, vef)
  implicit none
  class(p4est_cell_iterator_t), intent(in)    :: this
  integer(ip),            intent(in)    :: vef_lid
  class(vef_iterator_t),   intent(inout) :: vef
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  assert ( this%p4est_triangulation%get_ptr_vefs_x_cell(this%get_gid())-1 == this%base_pos_in_lst_vefs_gids ) 
  call vef%set_gid(this%p4est_triangulation%lst_vefs_gids%get(this%base_pos_in_lst_vefs_gids+vef_lid))
end subroutine p4est_cell_iterator_get_vef

function p4est_cell_iterator_is_local (this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  logical                            :: p4est_cell_iterator_is_local
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  p4est_cell_iterator_is_local = (this%get_gid() <= this%num_local_cells)
end function p4est_cell_iterator_is_local

function p4est_cell_iterator_is_ghost (this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  logical :: p4est_cell_iterator_is_ghost
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  p4est_cell_iterator_is_ghost = (this%get_gid() > this%num_local_cells)
end function p4est_cell_iterator_is_ghost

function p4est_cell_iterator_is_equal(this,quad_level,quad_linear_id)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip)                 , intent(in) :: quad_level
  integer(ip)                 , intent(in) :: quad_linear_id
  integer(ip) :: quad_coords(2)
  logical     :: p4est_cell_iterator_is_equal
#ifdef ENABLE_P4EST
  call F90_p4est_quadrant_set_morton( quad_level,                    &
                                      int(quad_linear_id,c_int64_t), &
                                      quad_coords(1),                &
                                      quad_coords(2) )
  p4est_cell_iterator_is_equal =  &
   ( F90_p4est_is_equal(this%p4est_triangulation%quad_coords(1,this%get_gid()), &
                           this%p4est_triangulation%quad_coords(2,this%get_gid()), &
                           int(this%get_level(),c_int8_t),                      &
                           quad_coords(1),                                      &
                           quad_coords(2),                                      &
                           int(quad_level,c_int8_t) ) /= 0 )
#else
  call this%p4est_triangulation%not_enabled_error()
#endif 
end function p4est_cell_iterator_is_equal

function p4est_cell_iterator_is_ancestor(this,child_level,child_linear_id)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip)                 , intent(in) :: child_level
  integer(ip)                 , intent(in) :: child_linear_id
  integer(ip) :: child_quad_coords(2)
  logical     :: p4est_cell_iterator_is_ancestor
#ifdef ENABLE_P4EST
  call F90_p4est_quadrant_set_morton( child_level,                    &
                                      int(child_linear_id,c_int64_t), &
                                      child_quad_coords(1),           &
                                      child_quad_coords(2) )
  p4est_cell_iterator_is_ancestor =  &
   ( F90_p4est_is_ancestor(this%p4est_triangulation%quad_coords(1,this%get_gid()), &
                           this%p4est_triangulation%quad_coords(2,this%get_gid()), &
                           int(this%get_level(),c_int8_t),                         &
                           child_quad_coords(1),                                   &
                           child_quad_coords(2),                                   &
                           int(child_level,c_int8_t) ) /= 0 )
#else
  call this%p4est_triangulation%not_enabled_error()
#endif 
end function p4est_cell_iterator_is_ancestor

subroutine p4est_cell_iterator_set_for_coarsening(this)
  implicit none
  class(p4est_cell_iterator_t), intent(inout) :: this
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  assert ( .not. this%is_ghost() )
  if (this%p4est_triangulation%clear_refinement_and_coarsening_flags_pending) then
     call this%p4est_triangulation%clear_refinement_and_coarsening_flags()
  end if
  call this%p4est_triangulation%refinement_and_coarsening_flags%set(this%get_gid(), coarsening)
end subroutine p4est_cell_iterator_set_for_coarsening

subroutine p4est_cell_iterator_set_for_refinement(this)
  implicit none
  class(p4est_cell_iterator_t), intent(inout) :: this
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  assert ( .not. this%is_ghost() )
  if (this%p4est_triangulation%clear_refinement_and_coarsening_flags_pending) then
     call this%p4est_triangulation%clear_refinement_and_coarsening_flags()
  end if 
  call this%p4est_triangulation%refinement_and_coarsening_flags%set(this%get_gid(), refinement)
end subroutine p4est_cell_iterator_set_for_refinement

subroutine p4est_cell_iterator_set_for_do_nothing(this)
  implicit none
  class(p4est_cell_iterator_t), intent(inout) :: this
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  assert ( .not. this%is_ghost() )
  if (this%p4est_triangulation%clear_refinement_and_coarsening_flags_pending) then
     call this%p4est_triangulation%clear_refinement_and_coarsening_flags()
  end if 
  call this%p4est_triangulation%refinement_and_coarsening_flags%set(this%get_gid(), do_nothing)
end subroutine p4est_cell_iterator_set_for_do_nothing

subroutine p4est_cell_iterator_set_weight(this, weight)
  implicit none
  class(p4est_cell_iterator_t), intent(inout) :: this
  integer(ip)                 , intent(in)    :: weight
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  assert ( .not. this%is_ghost() )
  assert ( weight >= 0 )
  call this%p4est_triangulation%cell_weights%set(this%get_gid(), weight)
end subroutine p4est_cell_iterator_set_weight


function p4est_cell_iterator_get_transformation_flag(this)
  implicit none
  class(p4est_cell_iterator_t), intent(inout) :: this
  integer(ip) :: p4est_cell_iterator_get_transformation_flag
  assert ( this%get_gid() >= 1 .and. .not. this%has_finished() )
  
  p4est_cell_iterator_get_transformation_flag = this%p4est_triangulation%refinement_and_coarsening_flags%get(this%get_gid())
end function p4est_cell_iterator_get_transformation_flag

function p4est_cell_iterator_get_permutation_index(this, target_cell, source_vef_lid, target_vef_lid )
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  class(cell_iterator_t)      , intent(in) :: target_cell
  integer(ip)                 , intent(in) :: source_vef_lid
  integer(ip)                 , intent(in) :: target_vef_lid
  integer(ip) :: p4est_cell_iterator_get_permutation_index
  p4est_cell_iterator_get_permutation_index = 1
end function p4est_cell_iterator_get_permutation_index

function p4est_cell_iterator_get_num_subcells( this ) result ( num_subcells )
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip) :: num_subcells
  mcheck(.false.,'This subroutine can only be called by some descendent classes')
end function p4est_cell_iterator_get_num_subcells

function p4est_cell_iterator_get_num_subcell_nodes( this ) result ( num_nodes_subcell )
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  integer(ip) :: num_nodes_subcell
  mcheck(.false.,'This subroutine can only be called by some descendent classes')
end function p4est_cell_iterator_get_num_subcell_nodes

subroutine p4est_cell_iterator_get_phys_coords_of_subcell( this, subcell, points)
  implicit none
  class(p4est_cell_iterator_t), intent(in)    :: this
  integer(ip),                     intent(in)    :: subcell
  type(point_t),                   intent(inout) :: points(:)
  mcheck(.false.,'This subroutine can only be called by some descendent classes')
end subroutine p4est_cell_iterator_get_phys_coords_of_subcell

subroutine p4est_cell_iterator_get_ref_coords_of_subcell( this, subcell, points)
  implicit none
  class(p4est_cell_iterator_t), intent(in)    :: this
  integer(ip),                     intent(in)    :: subcell
  type(point_t),                   intent(inout) :: points(:)
  mcheck(.false.,'This subroutine can only be called by some descendent classes')
end subroutine p4est_cell_iterator_get_ref_coords_of_subcell

function p4est_cell_iterator_get_num_subfacets( this ) result ( num_subfacets )
  implicit none
  class(p4est_cell_iterator_t), intent(in)    :: this
  integer(ip) :: num_subfacets
  mcheck(.false.,'This subroutine can only be called by some descendent classes')
end function p4est_cell_iterator_get_num_subfacets

function p4est_cell_iterator_get_num_subfacet_nodes( this ) result ( num_nodes_subfacet )
  implicit none
  class(p4est_cell_iterator_t), intent(in)    :: this
  integer(ip) :: num_nodes_subfacet
  mcheck(.false.,'This subroutine can only be called by some descendent classes')
end function p4est_cell_iterator_get_num_subfacet_nodes

subroutine p4est_cell_iterator_get_phys_coords_of_subfacet( this, subfacet, points )
  implicit none
  class(p4est_cell_iterator_t), intent(in)    :: this
  integer(ip),                     intent(in)    :: subfacet
  type(point_t),                   intent(inout) :: points(:)
  mcheck(.false.,'This subroutine can only be called by some descendent classes')
end subroutine p4est_cell_iterator_get_phys_coords_of_subfacet

subroutine p4est_cell_iterator_get_ref_coords_of_subfacet( this, subfacet, points )
  implicit none
  class(p4est_cell_iterator_t), intent(in)    :: this
  integer(ip),                     intent(in)    :: subfacet
  type(point_t),                   intent(inout) :: points(:)
  mcheck(.false.,'This subroutine can only be called by some descendent classes')
end subroutine p4est_cell_iterator_get_ref_coords_of_subfacet
 
function p4est_cell_iterator_is_cut(this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  logical :: p4est_cell_iterator_is_cut
  p4est_cell_iterator_is_cut = .false.
end function p4est_cell_iterator_is_cut

function p4est_cell_iterator_is_interior(this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  logical :: p4est_cell_iterator_is_interior
  p4est_cell_iterator_is_interior = .true.
end function p4est_cell_iterator_is_interior

function p4est_cell_iterator_is_exterior(this)
  implicit none
  class(p4est_cell_iterator_t), intent(in) :: this
  logical :: p4est_cell_iterator_is_exterior
  p4est_cell_iterator_is_exterior = .false.
end function p4est_cell_iterator_is_exterior

function p4est_cell_iterator_is_interior_subcell( this, subcell ) result ( is_in )
  implicit none
  class(p4est_cell_iterator_t), intent(in)  :: this
  integer(ip), intent(in) :: subcell
  logical :: is_in
  mcheck(.false.,'This subroutine can only be called by some descendent classes')
end function p4est_cell_iterator_is_interior_subcell

function p4est_cell_iterator_is_exterior_subcell( this, subcell ) result ( is_out )
  implicit none
  class(p4est_cell_iterator_t), intent(in)  :: this
  integer(ip), intent(in) :: subcell
  logical :: is_out
  mcheck(.false.,'This subroutine can only be called by some descendent classes')
end function p4est_cell_iterator_is_exterior_subcell
