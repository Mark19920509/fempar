! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

subroutine p4est_serial_triangulation_create (this, environment, parameters)
  implicit none
  class(p4est_serial_triangulation_t), target, intent(inout) :: this
  type(environment_t)                , target, intent(inout) :: environment
  type(ParameterList_t)                      , intent(inout) :: parameters
  integer(ip) :: istat
  type(std_vector_integer_ip_t) :: old_lst_vefs_gids
  integer(ip) :: num_dims, idime 
  integer(ip), allocatable :: array_size(:)
  real(rp)   , allocatable :: bounding_box_limits(:)
  integer(ip) :: dummy_comm
  
#ifdef ENABLE_P4EST
  call this%free()
  
  call this%set_single_octree_mesh(.true.)
  
  call this%set_environment(environment)
  
  call environment%setup_l1_to_l2_context_all_levels(task_aggregation_among_levels=[1])

  call this%process_parameters(parameters)
  
  call this%reference_fe_geo%create( topology_hex, &
                                     this%get_num_dims(), &
                                     1, &
                                     field_type_scalar, & 
                                     conformity=.true.)  
 
  call this%allocate_and_gen_reference_fe_geo_scratch_data()

  dummy_comm = 0
  call F90_p4est_init(dummy_comm,this%p4est_log_level)
  if ( this%get_num_dims() == 2 ) then
    call F90_p4est_connectivity_new_unitsquare(this%p4est_connectivity)
    call F90_p4est_connectivity_set_bounding_box_limits(this%p4est_connectivity, c_loc(this%bounding_box_limits) )
    call F90_p4est_new(dummy_comm,this%p4est_connectivity, this%p4est)
    call this%update_p4est_mesh()
    call this%update_topology_from_p4est_mesh()
    call this%update_cell_import()
    call this%update_cell_ggids()
    call this%update_cell_myparts()
    call this%extend_p4est_topology_arrays_to_ghost_cells()
    call this%update_lst_vefs_gids_and_cells_around(old_lst_vefs_gids)
    call this%fill_x_cell_vertex_coordinates()
    call old_lst_vefs_gids%free()
    call this%clear_refinement_and_coarsening_flags()
    call this%clear_cell_weights()
    call this%clear_cell_set_ids()
    call this%set_up_lst_itfc_vefs()
    call this%clear_vef_set_ids()
  else if ( this%get_num_dims() == 3 ) then
    call F90_p8est_connectivity_new_unitcube(this%p4est_connectivity)
    call F90_p8est_new(dummy_comm,this%p4est_connectivity, this%p4est)
    call F90_p4est_connectivity_set_bounding_box_limits(this%p4est_connectivity, c_loc(this%bounding_box_limits) )
    call this%update_p4est_mesh()
    call this%update_topology_from_p4est_mesh()
    call this%update_cell_import()
    call this%update_cell_ggids()
    call this%update_cell_myparts()
    call this%extend_p4est_topology_arrays_to_ghost_cells()
    call this%find_missing_corner_neighbours()
    call this%update_lst_vefs_gids_and_cells_around(old_lst_vefs_gids)
    call this%fill_x_cell_vertex_coordinates()
    call old_lst_vefs_gids%free()
    call this%clear_refinement_and_coarsening_flags()
    call this%clear_cell_weights()
    call this%clear_cell_set_ids()
    call this%set_up_lst_itfc_vefs()
    call this%clear_vef_set_ids()
    ! IMPORTANT NOTE: we need to RE-SETUP lst_itfc_vefs as we may have added 
    ! new proper interface VEFs in update_lst_vef_gids_and_cells_around_ghost_cells()
    call this%set_up_lst_itfc_vefs()
  end if  
#else
  call this%not_enabled_error()
#endif
end subroutine p4est_serial_triangulation_create  

subroutine p4est_serial_triangulation_free ( this)
  implicit none
  class(p4est_serial_triangulation_t), target, intent(inout) :: this
  type(cell_import_t), pointer :: cell_import
  
#ifdef ENABLE_P4EST  
  if ( this%get_num_dims() == 2 ) then
    call F90_p4est_destroy(this%p4est)
    call F90_p4est_connectivity_destroy(this%p4est_connectivity)
    call F90_p4est_mesh_destroy(this%p4est_mesh)
    call F90_p4est_ghost_destroy(this%p4est_ghost)
  else if ( this%get_num_dims() == 3 ) then  
    call F90_p8est_destroy(this%p4est)
    call F90_p8est_connectivity_destroy(this%p4est_connectivity)
    call F90_p8est_mesh_destroy(this%p4est_mesh)
    call F90_p4est_locidx_buffer_destroy(this%QHE)
    call F90_p8est_ghost_destroy(this%p4est_ghost)
  end if
  
  this%p4est_connectivity = c_null_ptr
  this%p4est              = c_null_ptr
  this%p4est_mesh         = c_null_ptr
  this%QHE                = c_null_ptr
  this%p4est_ghost        = c_null_ptr
  
  call this%per_cell_vertex_coordinates%free()
  
  call this%lst_vefs_gids%free()
  call this%cell_ggids%free()
  call this%ptr_cells_around_proper_vefs%free()
  call this%lst_cells_around_proper_vefs%free()
  call this%ptr_cells_around_improper_vefs%free()
  call this%lst_cells_around_improper_vefs%free()
  call this%ptr_improper_cells_around%free()
  call this%lst_improper_cells_around%free()
  call this%improper_vefs_improper_cell_around_ivef%free()
  call this%improper_vefs_improper_cell_around_subvef%free()
  call this%proper_vefs_dim%free()
  call this%improper_vefs_dim%free()
  call this%proper_vefs_at_boundary%free()
  call this%proper_vefs_at_interface%free()
  call this%improper_vefs_at_interface%free()
  call this%refinement_and_coarsening_flags%free()
  call this%cell_set_ids%free()
  call this%cell_weights%free()
  call this%proper_vefs_set_ids%free()
  call this%improper_vefs_set_ids%free()
  call this%free_lst_itfc_vefs()
  
  cell_import => this%get_cell_import()
  call cell_import%free()
  
  if (associated(this%quad_to_quad))   deallocate(this%quad_to_quad)
  if (associated(this%quad_to_face))   deallocate(this%quad_to_face)
  if (associated(this%quad_to_half))   deallocate(this%quad_to_half)
  if (associated(this%quad_to_corner)) deallocate(this%quad_to_corner)
  if (associated(this%quad_to_half_by_edge) ) deallocate(this%quad_to_half_by_edge)
  
  if (allocated(this%quad_coords)) &
     call memfree(this%quad_coords, __FILE__, __LINE__)
  
  if (allocated(this%quad_level)) &
    call memfree(this%quad_level, __FILE__, __LINE__)

  if (allocated(this%quad_to_quad_by_edge)) &
    call memfree(this%quad_to_quad_by_edge, __FILE__, __LINE__)

  if (allocated(this%quad_to_edge)) &
    call memfree(this%quad_to_edge, __FILE__, __LINE__)
    
  if (allocated(this%global_first_quadrant)) &
    call memfree(this%global_first_quadrant, __FILE__, __LINE__)
  
  this%k_2_1_balance  = -1
  this%k_ghost_cells = -1
  this%p4est_log_level = -1
  this%num_proper_vefs = -1
  this%num_improper_vefs = -1
  this%bounding_box_limits = 0.0_rp
  this%previous_num_local_cells = -1
  this%previous_num_ghost_cells = -1

  call this%reference_fe_geo%free()
  call this%free_reference_fe_geo_scratch_data()
  
  this%clear_refinement_and_coarsening_flags_pending = .false.
  
  call triangulation_free(this)
#else
  call this%not_enabled_error()
#endif     
end subroutine p4est_serial_triangulation_free
