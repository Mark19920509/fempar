! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

subroutine base_fe_space_free_blocks_dof_import ( this )
  implicit none
  class(base_fe_space_t), intent(inout) :: this 
  integer(ip) :: i, istat
  if ( allocated ( this%blocks_dof_import ) ) then
    do i=1, size(this%blocks_dof_import)
      call this%blocks_dof_import(i)%free()
    end do
    deallocate(this%blocks_dof_import, stat=istat)
    check(istat == 0)
  end if
end subroutine base_fe_space_free_blocks_dof_import 

! IMPORTANT NOTE: this%num_fields is set and consistent on ALL MPI tasks
!                 therefore no need to do MPI task-level dispatching 
function base_fe_space_get_num_fields ( this )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip) :: base_fe_space_get_num_fields
  base_fe_space_get_num_fields = this%num_fields
end function base_fe_space_get_num_fields

subroutine base_fe_space_set_num_fields ( this, num_fields )
  implicit none
  class(base_fe_space_t), intent(inout) :: this
  integer(ip)           , intent(in)    :: num_fields
  this%num_fields = num_fields
end subroutine base_fe_space_set_num_fields

! Although in principle this%fe_space_type_x_field(:) was though to be
! private member variable, I had to make it visible to the exterior
! via a raw pointer it as type(mlbddc_coarse_t) requires it in order to construct 
! the type(par_fe_space_t) instance that it aggregrates. Perhaps there is a 
! better/cleaner solution, but at the present moment, this is the only solution 
! that comes into my mind and lets me advance
function base_fe_space_get_fe_space_type (this)
  implicit none
  class(base_fe_space_t), target, intent(in) :: this
  integer(ip), pointer :: base_fe_space_get_fe_space_type(:)
  class(environment_t), pointer :: environment
  environment => this%get_environment()
  nullify(base_fe_space_get_fe_space_type)
  if ( environment%am_i_l1_task() ) then
     base_fe_space_get_fe_space_type => this%fe_space_type_x_field
  end if
end function base_fe_space_get_fe_space_type

! IMPORTANT NOTE: this%num_blocks is set and consistent on ALL MPI tasks
!                 therefore no need to do MPI task-level dispatching 
function base_fe_space_get_num_blocks( this)
  implicit none
  class(base_fe_space_t), intent(in) :: this 
  integer(ip) :: base_fe_space_get_num_blocks
  assert(.false.)
end function base_fe_space_get_num_blocks

function base_fe_space_get_field_blocks( this )
  implicit none
  class(base_fe_space_t), target, intent(in) :: this
  integer(ip), pointer :: base_fe_space_get_field_blocks(:)
  assert(.false.)
end function base_fe_space_get_field_blocks

function base_fe_space_get_field_coupling( this )
  implicit none
  class(base_fe_space_t), target, intent(in) :: this
  logical, pointer :: base_fe_space_get_field_coupling(:,:)
  assert(.false.)
end function base_fe_space_get_field_coupling

function base_fe_space_get_total_num_dofs ( this )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip) :: base_fe_space_get_total_num_dofs
  class(environment_t), pointer :: environment
  integer(ip) :: field_id
  environment => this%get_environment()
  base_fe_space_get_total_num_dofs = 0
  if ( environment%am_i_l1_task() ) then
    do field_id = 1, this%num_fields
       base_fe_space_get_total_num_dofs = base_fe_space_get_total_num_dofs  + &
           this%num_dofs_x_field(field_id)
    end do      
  end if
end function base_fe_space_get_total_num_dofs

! Returns the number of DoFs associated to field with identifier field_id
function base_fe_space_get_field_num_dofs( this, field_id )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip)           , intent(in) :: field_id
  integer(ip) :: base_fe_space_get_field_num_dofs
  class(environment_t), pointer  :: environment
  environment => this%get_environment()
  base_fe_space_get_field_num_dofs = 0
  if ( environment%am_i_l1_task() ) then
    assert ( field_id >=1 .and. field_id <= this%num_fields ) 
    base_fe_space_get_field_num_dofs = this%num_dofs_x_field(field_id)
  end if
end function base_fe_space_get_field_num_dofs

function base_fe_space_get_num_global_dofs ( this )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(igp) :: base_fe_space_get_num_global_dofs
  class(environment_t), pointer :: environment
  integer(ip) :: field_id
  environment => this%get_environment()
  base_fe_space_get_num_global_dofs = 0
  if ( environment%am_i_l1_task() ) then
    do field_id = 1, this%num_fields
       base_fe_space_get_num_global_dofs = base_fe_space_get_num_global_dofs  + &
           this%num_global_dofs_x_block(field_id)
    end do      
  end if
end function base_fe_space_get_num_global_dofs

! Returns the global number of DoFs associated to block with identifier block_id
function base_fe_space_get_block_num_global_dofs( this, block_id )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip)           , intent(in) :: block_id
  integer(igp) :: base_fe_space_get_block_num_global_dofs
  class(environment_t), pointer  :: environment
  environment => this%get_environment()
  base_fe_space_get_block_num_global_dofs = 0
  if ( environment%am_i_l1_task() ) then
    assert ( block_id >=1 .and. block_id <= size(this%num_global_dofs_x_block) ) 
    base_fe_space_get_block_num_global_dofs = this%num_global_dofs_x_block(block_id)
  end if
end function base_fe_space_get_block_num_global_dofs

! Returns the number of owned (local+interface) DoFs associated to block with identifier block_id
function base_fe_space_get_block_num_owned_dofs( this, block_id )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip)           , intent(in) :: block_id
  integer(ip) :: base_fe_space_get_block_num_owned_dofs
  class(environment_t), pointer  :: environment
  type(dof_import_t)  , pointer  :: dof_import
  integer(ip)         , pointer  :: snd_ptrs(:)
  environment => this%get_environment()
  dof_import  => this%get_block_dof_import(block_id)
  base_fe_space_get_block_num_owned_dofs = 0
  if ( environment%am_i_l1_task() ) then
    base_fe_space_get_block_num_owned_dofs = this%blocks_dof_import(block_id)%get_num_interior_dofs()
    ! Withdraw non-owned dofs  
    snd_ptrs => dof_import%get_snd_ptrs()
    base_fe_space_get_block_num_owned_dofs = base_fe_space_get_block_num_owned_dofs + (snd_ptrs(dof_import%get_num_snd()+1)-1)
  end if
end function base_fe_space_get_block_num_owned_dofs

subroutine base_fe_space_set_field_num_dofs( this, field_id, field_num_dofs )
  implicit none
  class(base_fe_space_t), intent(inout) :: this
  integer(ip)           , intent(in)    :: field_id
  integer(ip)           , intent(in)    :: field_num_dofs
  class(environment_t), pointer  :: environment
  environment => this%get_environment()
  if ( environment%am_i_l1_task() ) then
     assert ( field_id >=1 .and. field_id <= this%num_fields )
     this%num_dofs_x_field(field_id) = field_num_dofs
  end if
end subroutine base_fe_space_set_field_num_dofs

! Returns the number of DoFs associated to block with identifier block_id
function base_fe_space_get_block_num_dofs ( this, block_id )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip)          , intent(in) :: block_id
  integer(ip)                       :: base_fe_space_get_block_num_dofs
  assert(.false.)
end function base_fe_space_get_block_num_dofs

function base_fe_space_get_total_num_interior_dofs ( this )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip)                       :: base_fe_space_get_total_num_interior_dofs
  class(environment_t), pointer  :: environment
  integer(ip) :: block_id
  environment => this%get_environment()
  base_fe_space_get_total_num_interior_dofs = 0
  if ( environment%am_i_l1_task() ) then
     do block_id = 1, this%get_num_blocks()
        base_fe_space_get_total_num_interior_dofs = base_fe_space_get_total_num_interior_dofs + &
             this%get_block_num_interior_dofs(block_id)
     end do
  end if
end function base_fe_space_get_total_num_interior_dofs

function base_fe_space_get_total_num_interface_dofs ( this )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip)                       :: base_fe_space_get_total_num_interface_dofs
  class(environment_t), pointer  :: environment
  integer(ip) :: block_id
  environment => this%get_environment()
  base_fe_space_get_total_num_interface_dofs = 0
  if ( environment%am_i_l1_task() ) then
     do block_id = 1, this%get_num_blocks()
        base_fe_space_get_total_num_interface_dofs = base_fe_space_get_total_num_interface_dofs + &
             this%get_block_num_interface_dofs(block_id)
     end do
  end if
end function base_fe_space_get_total_num_interface_dofs

function base_fe_space_get_block_num_interior_dofs ( this, block_id )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip)          , intent(in) :: block_id
  integer(ip)                       :: base_fe_space_get_block_num_interior_dofs
  class(environment_t), pointer  :: environment
  environment => this%get_environment()
  base_fe_space_get_block_num_interior_dofs = 0
  if ( environment%am_i_l1_task() ) then
     base_fe_space_get_block_num_interior_dofs = this%blocks_dof_import(block_id)%get_num_interior_dofs()
  end if
end function base_fe_space_get_block_num_interior_dofs

function base_fe_space_get_block_num_interface_dofs ( this, block_id )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip)          , intent(in) :: block_id
  integer(ip)                       :: base_fe_space_get_block_num_interface_dofs
  class(environment_t), pointer  :: environment
  environment => this%get_environment()
  base_fe_space_get_block_num_interface_dofs = 0
  if ( environment%am_i_l1_task() ) then
     base_fe_space_get_block_num_interface_dofs = this%blocks_dof_import(block_id)%get_num_interface_dofs()
  end if
end function base_fe_space_get_block_num_interface_dofs

function base_fe_space_get_block_dof_import ( this, block_id )
  implicit none
  class(base_fe_space_t), target, intent(in) :: this
  integer(ip)                      , intent(in) :: block_id
  type(dof_import_t), pointer                   :: base_fe_space_get_block_dof_import
  base_fe_space_get_block_dof_import => this%blocks_dof_import(block_id)
end function base_fe_space_get_block_dof_import

function base_fe_space_get_coarse_fe_space(this)
  implicit none
  class(base_fe_space_t), target, intent(in) :: this
  type(coarse_fe_space_t), pointer :: base_fe_space_get_coarse_fe_space
  base_fe_space_get_coarse_fe_space => this%coarse_fe_space
end function base_fe_space_get_coarse_fe_space

function base_fe_space_coarse_fe_space_is_set_up(this) result(is_set_up)
  implicit none
  class(base_fe_space_t), intent(in) :: this
  logical :: is_set_up
  is_set_up = this%coarse_fe_space_set_up
end function base_fe_space_coarse_fe_space_is_set_up

subroutine base_fe_space_set_coarse_fe_space_is_set_up(this,is_set_up)
  implicit none
  class(base_fe_space_t), intent(inout) :: this
  logical               , intent(in)    :: is_set_up
  this%coarse_fe_space_set_up = is_set_up 
end subroutine base_fe_space_set_coarse_fe_space_is_set_up

function base_fe_space_get_environment(this) result(environment)
  implicit none
  class(base_fe_space_t), intent(in)    :: this 
  class(environment_t), pointer:: environment 
  assert(.false.)
end function base_fe_space_get_environment

function base_fe_space_get_total_num_coarse_dofs ( this )
  implicit none
  class(base_fe_space_t), intent(in) :: this
  integer(ip) :: base_fe_space_get_total_num_coarse_dofs
  assert(.false.)
end function base_fe_space_get_total_num_coarse_dofs

function base_fe_space_get_block_num_coarse_dofs ( this, block_id )
  implicit none
  class(base_fe_space_t), intent(in)    :: this
  integer(ip)           , intent(in)    :: block_id
  integer(ip)                            :: base_fe_space_get_block_num_coarse_dofs 
  assert(.false.)
end function base_fe_space_get_block_num_coarse_dofs
