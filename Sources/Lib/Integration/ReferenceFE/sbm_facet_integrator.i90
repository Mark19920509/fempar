! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! cell_map_facet_restriction_t type procedures
subroutine cell_map_facet_restriction_create( this, quadrature, reference_fe_geometry )
  implicit none
  ! Parameters
  class(cell_map_facet_restriction_t), intent(inout) :: this
  type(quadrature_t)           , intent(in)    :: quadrature
  class(reference_fe_t)           , intent(in)    :: reference_fe_geometry

  integer(ip)           :: facet_lid, subfacet_lid, cell_map_index, istat

  call this%free()
  this%num_facets = reference_fe_geometry%get_num_facets()
  this%num_subfacets = reference_fe_geometry%get_num_subfacets()
  allocate(this%cell_map(this%num_facets*(this%num_subfacets+1)),stat = istat); check(istat == 0);
  do facet_lid = 1,this%num_facets
    do subfacet_lid = 0,this%num_subfacets
      cell_map_index = facet_lid + subfacet_lid*this%num_facets
      call this%cell_map(cell_map_index)%restricted_to_facet( facet_lid,      &
                                                     subfacet_lid-1, &
                                                     quadrature,    &
                                                     reference_fe_geometry )
    end do
  end do
end subroutine cell_map_facet_restriction_create

!==================================================================================================
subroutine cell_map_facet_restriction_update( this, cell_lev, facet_lid, subfacet_lid, quadrature, cell_ressemblance, scaling_factor)
  implicit none
  ! Parameters
  class(cell_map_facet_restriction_t), intent(inout) :: this
  integer(ip)                        , intent(in)    :: cell_lev
  integer(ip)                        , intent(in)    :: facet_lid
  integer(ip)                        , intent(in)    :: subfacet_lid
  type(quadrature_t)                 , intent(in)    :: quadrature
  integer(ip)                        , intent(in)    :: cell_ressemblance
  real(rp)                           , intent(in)    :: scaling_factor
  this%current_facet_lid = facet_lid
  this%current_subfacet_lid = subfacet_lid
  call this%cell_map(facet_lid+subfacet_lid*this%num_facets)%update(cell_lev,quadrature,cell_ressemblance,scaling_factor)
end subroutine cell_map_facet_restriction_update

!==================================================================================================
subroutine cell_map_facet_restriction_update_interpolation( this, quadrature, reference_fe_geometry )
  implicit none
  ! Parameters
  class(cell_map_facet_restriction_t), intent(inout) :: this
  type(quadrature_t)           , intent(in)    :: quadrature
  class(reference_fe_t)           , intent(in)    :: reference_fe_geometry

  integer(ip)           :: facet_lid, subfacet_lid, cell_map_index, istat

  this%num_facets = reference_fe_geometry%get_num_facets()
  this%num_subfacets = reference_fe_geometry%get_num_subfacets()
  do facet_lid = 1,this%num_facets
    do subfacet_lid = 0,this%num_subfacets
      cell_map_index = facet_lid + subfacet_lid*this%num_facets
      call this%cell_map(cell_map_index)%update_interpolation_restricted_to_facet( facet_lid,      &
                                                     subfacet_lid-1, &
                                                     quadrature,    &
                                                     reference_fe_geometry )
    end do
  end do
end subroutine cell_map_facet_restriction_update_interpolation

!==================================================================================================
subroutine cell_map_facet_restriction_free( this)
  implicit none
  ! Parameters
  class(cell_map_facet_restriction_t), intent(inout) :: this
  integer(ip) :: facet_lid , istat
  do facet_lid = 1, this%num_facets*(this%num_subfacets+1)
     call this%cell_map(facet_lid)%free()
  end do
  if (allocated(this%cell_map)) then
     deallocate(this%cell_map, stat = istat)
     check(istat == 0)
  end if
  this%num_facets = 0
  this%num_subfacets = 0
  this%current_facet_lid = 0
  this%current_subfacet_lid = 0
end subroutine cell_map_facet_restriction_free

!==================================================================================================
subroutine cell_map_facet_restriction_copy( this, other )
  implicit none
  ! Parameters
  class(cell_map_facet_restriction_t), intent(inout) :: this
  type (cell_map_facet_restriction_t), intent(in)    :: other
  integer(ip) :: i, istat
  call this%free()
  this%num_facets = other%num_facets
  this%num_subfacets = other%num_subfacets
  this%current_facet_lid = other%current_facet_lid
  this%current_subfacet_lid = other%current_subfacet_lid
  if (allocated(other%cell_map)) then
    allocate( this%cell_map(size(other%cell_map)), stat = istat ); check(istat==0);
    do i = 1, size(this%cell_map)
      call assign_cell_map(this%cell_map(i),other%cell_map(i))
    end do
  end if
end subroutine cell_map_facet_restriction_copy

!==================================================================================================
function cell_map_facet_restriction_get_coordinates(this,facet_lid,subfacet_lid)
  implicit none
  ! Parameters
  class(cell_map_facet_restriction_t), intent(in) :: this
  integer(ip)                     , intent(in) :: facet_lid
  integer(ip)                     , intent(in) :: subfacet_lid
  type(point_t), pointer :: cell_map_facet_restriction_get_coordinates(:)
  integer(ip) :: cell_map_index
  cell_map_index = facet_lid + subfacet_lid * this%num_facets
  cell_map_facet_restriction_get_coordinates => this%cell_map(cell_map_index)%get_coordinates()
end function cell_map_facet_restriction_get_coordinates

!==================================================================================================
function cell_map_facet_restriction_get_current_cell_map(this)
  implicit none
  ! Parameters
  class(cell_map_facet_restriction_t), target, intent(in) :: this
  type(cell_map_t), pointer :: cell_map_facet_restriction_get_current_cell_map
  assert ( this%current_facet_lid >= 1 .and. this%current_facet_lid <= this%num_facets )
  assert ( this%current_subfacet_lid >= 0 .and. this%current_subfacet_lid <= this%num_subfacets )
  cell_map_facet_restriction_get_current_cell_map => this%cell_map( this%current_facet_lid + &
                                         this%current_subfacet_lid * this%num_facets )
end function cell_map_facet_restriction_get_current_cell_map

!==================================================================================================
function cell_map_facet_restriction_get_last_visited_cell_lev(this,facet_lid,subfacet_lid)
  implicit none
  ! Parameters
  class(cell_map_facet_restriction_t), intent(in) :: this
  integer(ip)                        , intent(in) :: facet_lid
  integer(ip)                        , intent(in) :: subfacet_lid
  integer(ip) :: cell_map_facet_restriction_get_last_visited_cell_lev
  assert ( facet_lid >= 1 .and. facet_lid <= this%num_facets )
  assert ( subfacet_lid >= 0 .and. subfacet_lid <= this%num_subfacets )
  cell_map_facet_restriction_get_last_visited_cell_lev = & 
    this%cell_map(facet_lid+subfacet_lid * this%num_facets)%get_last_visited_cell_lev()
end function  cell_map_facet_restriction_get_last_visited_cell_lev
  

!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! facet_maps_t procedures
subroutine facet_maps_create(this, quadrature, left_geo_reference_fe, right_geo_reference_fe )
  implicit none
  ! Parameters
  class(facet_maps_t)             , intent(inout) :: this
  class(reference_fe_t), pointer, intent(in)    :: left_geo_reference_fe, right_geo_reference_fe
  type(quadrature_t)         , intent(in)    :: quadrature

  call this%free()

  this%is_at_boundary = (.not. associated(right_geo_reference_fe))

  this%num_dims = left_geo_reference_fe%get_num_dims()
  call this%facet_map%create(quadrature,left_geo_reference_fe)
  call this%cell_maps(1)%create(quadrature,left_geo_reference_fe)
  if (associated(right_geo_reference_fe)) then
     call this%cell_maps(2)%create(quadrature,right_geo_reference_fe)
  end if
  call memallocp(quadrature%get_num_quadrature_points(), &
                 this%aux_characteristic_lengths, &
                 __FILE__, __LINE__ )
end subroutine facet_maps_create

!==================================================================================================
subroutine facet_maps_free(this)
  implicit none
  ! Parameters
  class(facet_maps_t), intent(inout) :: this
  integer(ip) :: i
  call this%facet_map%free()
  do i=1,2
     call this%cell_maps(i)%free()
  end do
  if ( associated(this%aux_characteristic_lengths) ) then
    call memfreep(this%aux_characteristic_lengths,__FILE__,__LINE__)
  end if
end subroutine facet_maps_free

!==================================================================================================
subroutine facet_maps_update(this, &
                             cell_lev, &
                             facet_lid, &
                             subfacet_lid, &
                             facet_quadrature, &
                             left_reference_fe_geo, &
                             cell_ressemblance, &
                             scaling_factor)
  implicit none
  ! Parameters
  class(facet_maps_t)  , intent(inout) :: this
  integer(ip)          , intent(in)    :: cell_lev(2)
  integer(ip)          , intent(in)    :: facet_lid(2)
  integer(ip)          , intent(in)    :: subfacet_lid(2)
  type(quadrature_t)   , intent(in)    :: facet_quadrature
  class(reference_fe_t), intent(in)    :: left_reference_fe_geo
  integer(ip)          , intent(in)    :: cell_ressemblance(2)    
  real(rp)             , intent(in)    :: scaling_factor(2)
  real   (rp) :: reorientation_factor

  ! Update cell_maps
  call this%cell_maps(1)%update(cell_lev(1),facet_lid(1),subfacet_lid(1),facet_quadrature,cell_ressemblance(1),scaling_factor(1))
  if (.not. this%is_at_boundary) then
     assert ( facet_lid(2) >= 1 )
     call this%cell_maps(2)%update(cell_lev(2),facet_lid(2),subfacet_lid(2),facet_quadrature,cell_ressemblance(2),scaling_factor(2))
  end if
  
  ! Compute normals reorientation factors from |J|'s original sign and face orientation
  reorientation_factor = left_reference_fe_geo%get_normal_orientation_factor(&
                           facet_lid(1),this%cell_maps(1)%cell_map(facet_lid(1))%is_det_jacobian_positive())
   
  ! Update facet_map
  call this%facet_map%update(reorientation_factor,facet_quadrature)
end subroutine facet_maps_update

!==================================================================================================
function facet_maps_compute_characteristic_length(this,qpoin)
  implicit none
  class(facet_maps_t), target, intent(in) :: this
  integer(ip)              , intent(in) :: qpoin
  real(rp) :: facet_maps_compute_characteristic_length
  real(rp)    :: h
  integer(ip) :: cell_map_index
  cell_map_index = this%cell_maps(1)%current_facet_lid + & 
                 this%cell_maps(1)%current_subfacet_lid * this%cell_maps(1)%num_facets 
  facet_maps_compute_characteristic_length = this%cell_maps(1)%cell_map(cell_map_index)%compute_h(qpoin)
  if (.not. this%is_at_boundary) then
     cell_map_index = this%cell_maps(2)%current_facet_lid + & 
                    this%cell_maps(2)%current_subfacet_lid * this%cell_maps(2)%num_facets
     h = this%cell_maps(2)%cell_map(cell_map_index)%compute_h(qpoin) 
     facet_maps_compute_characteristic_length = min(facet_maps_compute_characteristic_length, h)
  end if
end function facet_maps_compute_characteristic_length

!==================================================================================================
subroutine facet_maps_compute_characteristic_lengths(this,characteristic_lengths)
  implicit none
  class(facet_maps_t), intent(in)    :: this
  real(rp)           , intent(inout) :: characteristic_lengths(:)
  integer(ip) :: cell_map_index,i
  cell_map_index = this%cell_maps(1)%current_facet_lid + & 
                 this%cell_maps(1)%current_subfacet_lid * this%cell_maps(1)%num_facets 
  call this%cell_maps(1)%cell_map(cell_map_index)%compute_hs(characteristic_lengths)
  if (.not. this%is_at_boundary) then
     cell_map_index = this%cell_maps(2)%current_facet_lid + & 
                    this%cell_maps(2)%current_subfacet_lid * this%cell_maps(2)%num_facets
     call this%cell_maps(2)%cell_map(cell_map_index)%compute_hs(this%aux_characteristic_lengths) 
     do i=1,size(this%aux_characteristic_lengths)
       characteristic_lengths(i) = min(characteristic_lengths(i),this%aux_characteristic_lengths(i))
     end do 
  end if
end subroutine facet_maps_compute_characteristic_lengths

!==================================================================================================
function facet_maps_get_facet_coordinates(this)
  implicit none
  ! Parameters
  class(facet_maps_t), target, intent(in) :: this
  type(point_t), pointer :: facet_maps_get_facet_coordinates(:)
  
  facet_maps_get_facet_coordinates => this%facet_map%get_coordinates()
end function facet_maps_get_facet_coordinates

!==================================================================================================
function facet_maps_get_quadrature_points_coordinates(this)
  implicit none
  ! Parameters
  class(facet_maps_t), target, intent(in) :: this
  type(point_t), pointer :: facet_maps_get_quadrature_points_coordinates(:)
  
  facet_maps_get_quadrature_points_coordinates => this%facet_map%get_quadrature_points_coordinates()
end function facet_maps_get_quadrature_points_coordinates

!==================================================================================================
function facet_maps_get_coordinates_neighbour(this,neighbour_id,facet_lid,subfacet_lid)
  implicit none
  ! Parameters
  class(facet_maps_t), target, intent(in) :: this
  integer(ip)               , intent(in) :: neighbour_id
  integer(ip)               , intent(in) :: facet_lid
  integer(ip)               , intent(in) :: subfacet_lid
  type(point_t), pointer :: facet_maps_get_coordinates_neighbour(:)
  integer(ip) :: indx
  assert( (neighbour_id == 1) .or. ((neighbour_id == 2) .and. (.not. this%is_at_boundary)))
  indx = facet_lid+subfacet_lid*this%cell_maps(neighbour_id)%num_facets
  facet_maps_get_coordinates_neighbour => this%cell_maps(neighbour_id)%cell_map(indx)%nodes_coordinates
end function facet_maps_get_coordinates_neighbour

!==================================================================================================
function facet_maps_get_neighbour_cell_map(this,neighbour_id)
  implicit none
  ! Parameters
  class(facet_maps_t), target, intent(in) :: this
  integer(ip)                           :: neighbour_id
  type(cell_map_facet_restriction_t), pointer :: facet_maps_get_neighbour_cell_map

  assert( (neighbour_id == 1) .or. ((neighbour_id == 2) .and. (.not. this%is_at_boundary)))
  facet_maps_get_neighbour_cell_map => this%cell_maps(neighbour_id)
end function facet_maps_get_neighbour_cell_map

!=================================================================================================
subroutine facet_maps_get_normal (this, qpoint, normal)
  implicit none
  class(facet_maps_t), intent(in)    :: this
  integer(ip)             , intent(in)    :: qpoint
  type(vector_field_t)    , intent(out)   :: normal(2)

  integer(ip) :: idime
  do idime = 1, SPACE_DIM
     call normal(1)%set(idime,this%facet_map%normals(idime,qpoint))
     call normal(2)%set(idime,- this%facet_map%normals(idime,qpoint))
  end do
end subroutine facet_maps_get_normal

!=================================================================================================
subroutine facet_maps_get_normals (this, normals)
  implicit none
  class(facet_maps_t)     , intent(in)    :: this
  type(vector_field_t)    , intent(out)   :: normals(:,:)
  assert ( size(normals,2) == 2 )
  call init_vector_field_1D_array_plain_2D_array(this%facet_map%normals,normals(:,1))
  call init_vector_field_1D_array_minus_plain_2D_array(this%facet_map%normals,normals(:,2))
end subroutine facet_maps_get_normals

!=================================================================================================
function facet_maps_get_det_jacobian ( this, i )
  implicit none
  class(facet_maps_t), intent(in) :: this
  integer(ip)    , intent(in) :: i
  real(rp) :: facet_maps_get_det_jacobian
  facet_maps_get_det_jacobian = this%facet_map%get_det_jacobian(i)
end function facet_maps_get_det_jacobian

!=================================================================================================
subroutine facet_maps_get_det_jacobians ( this, det_jacobians )
  implicit none
  class(facet_maps_t), intent(in)    :: this
  real(rp)           , intent(inout) :: det_jacobians(:)
  det_jacobians(1:this%facet_map%num_quadrature_points) = this%facet_map%det_jacobian(1:this%facet_map%num_quadrature_points)
end subroutine facet_maps_get_det_jacobians

!=================================================================================================
function facet_maps_get_facet_map ( this )
  implicit none
  class(facet_maps_t), target, intent(in) :: this
  type(facet_map_t), pointer :: facet_maps_get_facet_map
  facet_maps_get_facet_map => this%facet_map
end function facet_maps_get_facet_map

!==================================================================================================
subroutine assign_facet_maps(this,other)
  implicit none
  ! Parameters
  type(facet_maps_t), intent(inout) :: this
  type(facet_maps_t), intent(in)    :: other
  call this%free()
  this%is_at_boundary = other%is_at_boundary
  call assign_facet_map(this%facet_map,other%facet_map)
  call this%cell_maps(1)%copy(other%cell_maps(1))
  if ( .not. this%is_at_boundary ) then 
    call this%cell_maps(2)%copy(other%cell_maps(2))
  end if
  this%num_dims = other%num_dims
  call memallocp (size(other%aux_characteristic_lengths), & 
                  this%aux_characteristic_lengths, __FILE__, __LINE__ )
  this%aux_characteristic_lengths(:) = other%aux_characteristic_lengths(:)
end subroutine assign_facet_maps

!==================================================================================================
subroutine assign_facet_maps_array ( facet_maps_array1, facet_maps_array2 ) 
  implicit none       
  type(facet_maps_t), intent(inout) :: facet_maps_array1(:)
  type(facet_maps_t), intent(in)    :: facet_maps_array2(:)
  integer(ip) :: i
  assert( size(facet_maps_array1) == size(facet_maps_array2) )
  do i = 1,size(facet_maps_array1)
    call assign_facet_maps(facet_maps_array1(i),facet_maps_array2(i))
  end do
end subroutine assign_facet_maps_array

function facet_maps_get_cell_maps ( this )
  implicit none
  class(facet_maps_t), target, intent(in) :: this
  type(cell_map_facet_restriction_t), pointer :: facet_maps_get_cell_maps(:)
  facet_maps_get_cell_maps => this%cell_maps
end function facet_maps_get_cell_maps

function facet_maps_get_is_at_boundary ( this )
  implicit none
  class(facet_maps_t), intent(in) :: this
  logical :: facet_maps_get_is_at_boundary
  facet_maps_get_is_at_boundary = this%is_at_boundary
end function facet_maps_get_is_at_boundary

function facet_maps_get_current_facet_lid ( this, neighbour_id ) 
  implicit none
  class(facet_maps_t), intent(in) :: this
  integer(ip)        , intent(in) :: neighbour_id
  integer(ip) :: facet_maps_get_current_facet_lid
  assert( (neighbour_id == 1) .or. ((neighbour_id == 2) .and. (.not. this%is_at_boundary)))
  facet_maps_get_current_facet_lid = this%cell_maps(neighbour_id)%current_facet_lid
end function facet_maps_get_current_facet_lid

function facet_maps_get_current_subfacet_lid ( this, neighbour_id ) 
  implicit none
  class(facet_maps_t), intent(in) :: this
  integer(ip)        , intent(in) :: neighbour_id
  integer(ip) :: facet_maps_get_current_subfacet_lid
  assert( (neighbour_id == 1) .or. ((neighbour_id == 2) .and. (.not. this%is_at_boundary)))
  facet_maps_get_current_subfacet_lid = this%cell_maps(neighbour_id)%current_subfacet_lid
end function facet_maps_get_current_subfacet_lid

function facet_maps_get_last_visited_cell_lev ( this, neighbour_id, facet_lid, subfacet_lid ) 
  implicit none
  class(facet_maps_t), intent(in) :: this
  integer(ip)        , intent(in) :: neighbour_id
  integer(ip)        , intent(in) :: facet_lid
  integer(ip)        , intent(in) :: subfacet_lid
  integer(ip) :: facet_maps_get_last_visited_cell_lev
  integer(ip) :: indx
  assert( (neighbour_id == 1) .or. ((neighbour_id == 2) .and. (.not. this%is_at_boundary)))
  indx = facet_lid+subfacet_lid*this%cell_maps(neighbour_id)%num_facets
  facet_maps_get_last_visited_cell_lev = this%cell_maps(neighbour_id)%cell_map(indx)%get_last_visited_cell_lev()
end function facet_maps_get_last_visited_cell_lev


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!cell_integrator_facet_restriction_t type bound procedures
subroutine cell_integrator_facet_restriction_create(this, quadrature, reference_fe)
  implicit none
  ! Parameters
  class(cell_integrator_facet_restriction_t), intent(inout) :: this
  type(quadrature_t)                       , intent(in)    :: quadrature
  class(reference_fe_t)                    , intent(in)    :: reference_fe
  integer(ip) :: facet_lid, subfacet_lid, cell_int_index, istat
  call this%free()
  this%current_facet_lid = -1
  this%current_subfacet_lid = -1
  this%num_facets = reference_fe%get_num_facets()
  this%num_subfacets = reference_fe%get_num_subfacets()
  allocate(this%cell_integrator(this%num_facets*(this%num_subfacets+1)), stat = istat); check(istat==0);
  do facet_lid = 1,this%num_facets
    do subfacet_lid = 0,this%num_subfacets
      cell_int_index = facet_lid + subfacet_lid*this%num_facets
      call this%cell_integrator(cell_int_index)%restricted_to_facet(quadrature,reference_fe,facet_lid,subfacet_lid-1)
    end do
  end do
end subroutine cell_integrator_facet_restriction_create

!==================================================================================================
subroutine cell_integrator_facet_restriction_update(this, &
                                                    cell_lev, &
                                                    cell_map, &
                                                    facet_lid, &
                                                    subfacet_lid, &
                                                    cell_ressemblance, &
                                                    scaling_factor)
  implicit none
  class(cell_integrator_facet_restriction_t), intent(inout) :: this
  integer(ip)                               , intent(in)    :: cell_lev
  type(cell_map_t)                          , intent(in)    :: cell_map
  integer(ip)                               , intent(in)    :: facet_lid
  integer(ip)                               , intent(in)    :: subfacet_lid
  integer(ip)                               , intent(in)    :: cell_ressemblance
  real(rp)                                  , intent(in)    :: scaling_factor
  this%current_facet_lid = facet_lid
  this%current_subfacet_lid = subfacet_lid
  call this%cell_integrator(facet_lid+subfacet_lid*this%num_facets)%update(cell_lev,cell_ressemblance,cell_map,scaling_factor)
end subroutine cell_integrator_facet_restriction_update

!==================================================================================================
subroutine cell_integrator_facet_restriction_update_interpolation(this, quadrature, reference_fe)
  implicit none
  ! Parameters
  class(cell_integrator_facet_restriction_t), intent(inout) :: this
  type(quadrature_t)                       , intent(in)    :: quadrature
  class(reference_fe_t)                    , intent(in)    :: reference_fe
  integer(ip) :: facet_lid, subfacet_lid, cell_int_index
  do facet_lid = 1,this%num_facets
    do subfacet_lid = 0,this%num_subfacets
      cell_int_index = facet_lid + subfacet_lid*this%num_facets
      call this%cell_integrator(cell_int_index)%update_interpolation_restricted_to_facet(quadrature,reference_fe,facet_lid,subfacet_lid-1)
    end do
  end do
end subroutine cell_integrator_facet_restriction_update_interpolation

!==================================================================================================
subroutine cell_integrator_facet_restriction_free(this)
  implicit none
  ! Parameters
  class(cell_integrator_facet_restriction_t), intent(inout) :: this
  integer(ip) :: i, istat
  if (allocated(this%cell_integrator)) then
     do i = 1, this%num_facets*(this%num_subfacets+1)
       call this%cell_integrator(i)%free()
     end do
     deallocate(this%cell_integrator, stat = istat); check(istat==0);
  end if
  this%num_facets = 0
  this%num_subfacets = 0
  this%current_facet_lid = 0
  this%current_subfacet_lid = 0
end subroutine cell_integrator_facet_restriction_free

!==================================================================================================
subroutine cell_integrator_facet_restriction_copy(this, other)
  implicit none
  ! Parameters
  class(cell_integrator_facet_restriction_t), intent(inout) :: this
  type (cell_integrator_facet_restriction_t), intent(in)    :: other
  integer(ip) :: i, istat
  call this%free()
  this%num_facets = other%num_facets
  this%num_subfacets = other%num_subfacets
  this%current_facet_lid = other%current_facet_lid
  this%current_subfacet_lid = other%current_subfacet_lid
  if (allocated(other%cell_integrator)) then
    allocate( this%cell_integrator(size(other%cell_integrator)), stat = istat ); check(istat==0);
    do i = 1, size(this%cell_integrator)
      call assign_cell_integrator(this%cell_integrator(i),other%cell_integrator(i))
    end do
  end if
end subroutine cell_integrator_facet_restriction_copy

!==================================================================================================
function cell_integrator_facet_restriction_get_current_cell_integrator(this)
  implicit none
  ! Parameters
  class(cell_integrator_facet_restriction_t), target, intent(in) :: this
  type(cell_integrator_t), pointer :: cell_integrator_facet_restriction_get_current_cell_integrator
  assert ( this%current_facet_lid >= 1 .and. this%current_facet_lid <= this%num_facets )
  assert ( this%current_subfacet_lid >= 0 .and. this%current_subfacet_lid <= this%num_subfacets )
  cell_integrator_facet_restriction_get_current_cell_integrator => & 
    this%cell_integrator(this%current_facet_lid+this%current_subfacet_lid*this%num_facets)
end function cell_integrator_facet_restriction_get_current_cell_integrator

!==================================================================================================
function cell_integrator_facet_restriction_get_last_visited_cell_lev(this,facet_lid,subfacet_lid)
  implicit none
  ! Parameters
  class(cell_integrator_facet_restriction_t), intent(in) :: this
  integer(ip)                               , intent(in) :: facet_lid
  integer(ip)                               , intent(in) :: subfacet_lid
  integer(ip) :: cell_integrator_facet_restriction_get_last_visited_cell_lev
  assert ( facet_lid >= 1 .and. facet_lid <= this%num_facets )
  assert ( subfacet_lid >= 0 .and. subfacet_lid <= this%num_subfacets )
  cell_integrator_facet_restriction_get_last_visited_cell_lev = & 
    this%cell_integrator(facet_lid+subfacet_lid * this%num_facets)%get_last_visited_cell_lev()
end function  cell_integrator_facet_restriction_get_last_visited_cell_lev


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!facet_integrator_t type procedures
subroutine facet_integrator_create(this,quadrature,left_reference_fe,right_reference_fe,is_identity_perm)
  implicit none
  ! Parameters
  class(facet_integrator_t)      , intent(inout) :: this
  type(quadrature_t)             , intent(in)    :: quadrature
  class(reference_fe_t) , pointer, intent(in)    :: left_reference_fe, right_reference_fe
  logical, optional :: is_identity_perm
  
  integer(ip) :: i
  logical :: is_identity_perm_
  
  call this%free()
  
  is_identity_perm_ = .false.
  if (present(is_identity_perm)) then
    is_identity_perm_ = is_identity_perm
  end if
  
  call this%set_is_at_boundary_and_active_cell_id( left_reference_fe, right_reference_fe )
  
  this%reference_fe(1)%p => left_reference_fe
  this%reference_fe(2)%p => right_reference_fe
  call this%cell_integrator_facet_restriction(1)%create( quadrature,this%reference_fe(1)%p )
  
  if (.not. this%is_at_boundary) then
     call this%cell_integrator_facet_restriction(2)%create(quadrature,this%reference_fe(2)%p)
  end if
  
  this%current_permutation_index = 1
  
  if (is_identity_perm_) then
    call this%qpoints_perm%create(quadrature%get_num_quadrature_points(),1)
    forall (i = 1:this%qpoints_perm%nd1) this%qpoints_perm%a(i,:) = i
  else
    call this%reference_fe(this%active_cell_id(1))%p%fill_qpoints_permutations( quadrature, this%qpoints_perm )
  end if
  
end subroutine facet_integrator_create

!==================================================================================================
subroutine facet_integrator_free(this)
  implicit none
  ! Parameters
  class(facet_integrator_t)     , intent(inout) :: this
  integer(ip) :: i
  this%is_at_boundary = .false.
  this%active_cell_id = 0
  do i=1,2
     this%reference_fe(i)%p => NULL()
     call this%cell_integrator_facet_restriction(i)%free()
  end do
  call this%qpoints_perm%free()
end subroutine facet_integrator_free

!==================================================================================================
subroutine facet_integrator_update(this, &
                                   cell_lev, &
                                   facet_lid, &
                                   subfacet_lid, &
                                   facet_map, &
                                   permutation_index, &
                                   cell_ressemblance, &
                                   scaling_factor)
  implicit none
  ! Parameters
  class(facet_integrator_t), intent(inout) :: this
  integer(ip)              , intent(in)    :: cell_lev(2)
  integer(ip)              , intent(in)    :: facet_lid(2)
  integer(ip)              , intent(in)    :: subfacet_lid(2)
  type(facet_maps_t)       , intent(in)    :: facet_map
  integer(ip)              , intent(in)    :: permutation_index
  integer(ip)              , intent(in)    :: cell_ressemblance(2)
  real(rp)                 , intent(in)    :: scaling_factor(2)

  call this%cell_integrator_facet_restriction(1)%update( cell_lev(1), &
                                                         facet_map%cell_maps(1)%get_current_cell_map(), &
                                                         facet_lid(1), & 
                                                         subfacet_lid(1), &
                                                         cell_ressemblance(1), &
                                                         scaling_factor(1) )
  if (.not. this%is_at_boundary) then
     this%current_permutation_index = permutation_index
     call this%cell_integrator_facet_restriction(2)%update( cell_lev(2), &
                                                            facet_map%cell_maps(2)%get_current_cell_map(), &
                                                            facet_lid(2), &
                                                            subfacet_lid(2), &
                                                            cell_ressemblance(2), &
                                                            scaling_factor(2) )
  end if
end subroutine facet_integrator_update

!==================================================================================================
subroutine facet_integrator_set_is_at_boundary_and_active_cell_id (this,left_reference_fe,right_reference_fe)
  implicit none
  class(facet_integrator_t)        , intent(inout) :: this
  class(reference_fe_t)   , pointer, intent(in)    :: left_reference_fe, right_reference_fe
  logical :: left_is_void, right_is_void
  
  this%active_cell_id(1) = 1
  this%active_cell_id(2) = 2
  this%is_at_boundary = (.not. associated(right_reference_fe))
  this%is_at_field_interior = .true.
  
  left_is_void  = .false.
  right_is_void = .false.
  select type (left_reference_fe)
    class is (void_reference_fe_t)  
        left_is_void = .true.
        if ( .not. this%is_at_boundary ) then
           this%active_cell_id(1) = 2
           this%active_cell_id(2) = 1
        end if
  end select
  if ( .not. this%is_at_boundary ) then
    select type (right_reference_fe)
      class is (void_reference_fe_t)  
         right_is_void = .true.  
     end select
  end if
  
  if ( this%is_at_boundary ) then
    this%is_at_field_interior = .false.
    this%is_at_field_interior = .false.
    if ( left_is_void ) then
       this%is_at_field_boundary = .false.
    else
       this%is_at_field_boundary = .true.
    end if   
  else
    if ( left_is_void .neqv. right_is_void ) then
      this%is_at_field_boundary = .true.
      this%is_at_field_interior = .false.
    else
      this%is_at_field_interior = .true.
      this%is_at_field_boundary = .false.
      if (left_is_void ) then 
         this%is_at_field_interior = .false.
      end if 
    end if
  end if
end subroutine facet_integrator_set_is_at_boundary_and_active_cell_id

subroutine facet_integrator_update_interpolation(this,quadrature)
  implicit none
  ! Parameters
  class(facet_integrator_t)      , intent(inout) :: this
  type(quadrature_t)            , intent(in)    :: quadrature
  assert(associated(this%reference_fe(1)%p))
  call this%cell_integrator_facet_restriction(1)%update_interpolation( quadrature,this%reference_fe(1)%p )  
  if (.not. this%is_at_boundary) then
     assert(associated(this%reference_fe(2)%p))
     call this%cell_integrator_facet_restriction(2)%update_interpolation(quadrature,this%reference_fe(2)%p)
  end if
  end subroutine facet_integrator_update_interpolation

!==================================================================================================
function facet_integrator_get_is_at_boundary (this)
  implicit none
  class(facet_integrator_t), intent(in)    :: this
  logical                                  :: facet_integrator_get_is_at_boundary
  facet_integrator_get_is_at_boundary = this%is_at_boundary
end function facet_integrator_get_is_at_boundary

!==================================================================================================
function facet_integrator_get_is_at_field_boundary (this)
  implicit none
  class(facet_integrator_t), intent(in)    :: this
  logical                                  :: facet_integrator_get_is_at_field_boundary
  facet_integrator_get_is_at_field_boundary = this%is_at_field_boundary
end function facet_integrator_get_is_at_field_boundary

!==================================================================================================
function facet_integrator_get_is_at_field_interior (this)
  implicit none
  class(facet_integrator_t), intent(in)    :: this
  logical                                  :: facet_integrator_get_is_at_field_interior
  facet_integrator_get_is_at_field_interior = this%is_at_field_interior
end function facet_integrator_get_is_at_field_interior

!==================================================================================================
function facet_integrator_get_active_cell_id (this,neighbour_id)
  implicit none
  class(facet_integrator_t), intent(in)    :: this
  integer(ip)              , intent(in)    :: neighbour_id
  integer(ip)                              :: facet_integrator_get_active_cell_id
  facet_integrator_get_active_cell_id = this%active_cell_id(neighbour_id)
end function facet_integrator_get_active_cell_id

!==================================================================================================
subroutine facet_integrator_get_value_scalar (this, ishape, qpoint, ineigh, scalar_field)
  implicit none
  class(facet_integrator_t), intent(in)    :: this
  integer(ip)             , intent(in)    :: ishape
  integer(ip)             , intent(in)    :: qpoint
  integer(ip)             , intent(in)    :: ineigh
  real(rp)                , intent(out)   :: scalar_field
  integer(ip) :: actual_qpoint
  type(cell_integrator_t), pointer :: cell_integrator
  assert( (ineigh == 1) .or. ((ineigh == 2) .and. (.not. this%is_at_boundary)))
  assert( this%reference_fe(ineigh)%p%field_type == field_type_scalar )
  cell_integrator => this%cell_integrator_facet_restriction(ineigh)%get_current_cell_integrator()
  if ( ineigh == 1 ) then 
    actual_qpoint = qpoint
  else   
    actual_qpoint = this%qpoints_perm%a(qpoint,this%current_permutation_index)
  end if
  call cell_integrator%get_value(ishape,actual_qpoint,scalar_field)
end subroutine facet_integrator_get_value_scalar

!==================================================================================================
subroutine facet_integrator_get_value_vector (this, ishape, qpoint, ineigh, vector_field)
  implicit none
  class(facet_integrator_t), intent(in)    :: this
  integer(ip)             , intent(in)    :: ishape
  integer(ip)             , intent(in)    :: qpoint
  integer(ip)             , intent(in)    :: ineigh
  type(vector_field_t)    , intent(out)   :: vector_field

  integer(ip) :: actual_qpoint
  type(cell_integrator_t), pointer :: cell_integrator
  assert( (ineigh == 1) .or. ((ineigh == 2) .and. (.not. this%is_at_boundary)))
  assert( this%reference_fe(ineigh)%p%field_type == field_type_vector )
  cell_integrator => this%cell_integrator_facet_restriction(ineigh)%get_current_cell_integrator()
  if ( ineigh == 1 ) then 
    actual_qpoint = qpoint
  else   
    actual_qpoint = this%qpoints_perm%a(qpoint,this%current_permutation_index)
  end if
  call cell_integrator%get_value(ishape,actual_qpoint,vector_field)
end subroutine facet_integrator_get_value_vector

!==================================================================================================
subroutine facet_integrator_get_values_scalar (this, ineigh, values)
  implicit none
  class(facet_integrator_t), intent(in)    :: this
  integer(ip)             , intent(in)    :: ineigh
  real(rp), allocatable   , intent(inout) :: values(:,:)
  type(cell_integrator_t), pointer :: cell_integrator
  assert( (ineigh == 1) .or. ((ineigh == 2) .and. (.not. this%is_at_boundary)))
  assert( this%reference_fe(ineigh)%p%field_type == field_type_scalar )
  cell_integrator => this%cell_integrator_facet_restriction(ineigh)%get_current_cell_integrator()
  if (ineigh==1) then 
    call cell_integrator%get_values(values)
  else   
    call cell_integrator%get_values(values,this%qpoints_perm%a(:,this%current_permutation_index))
  end if
end subroutine facet_integrator_get_values_scalar

!==================================================================================================
subroutine facet_integrator_get_values_vector (this, ineigh, values)
  implicit none
  class(facet_integrator_t)         , intent(in)    :: this
  integer(ip)                      , intent(in)    :: ineigh
  type(vector_field_t), allocatable, intent(inout) :: values(:,:)
  type(cell_integrator_t), pointer :: cell_integrator
  assert( (ineigh == 1) .or. ((ineigh == 2) .and. (.not. this%is_at_boundary)))
  assert( this%reference_fe(ineigh)%p%field_type == field_type_vector )
  cell_integrator => this%cell_integrator_facet_restriction(ineigh)%get_current_cell_integrator()
  if ( ineigh == 1 ) then 
    call cell_integrator%get_values(values)
  else   
    call cell_integrator%get_values(values,this%qpoints_perm%a(:,this%current_permutation_index))
  end if
end subroutine facet_integrator_get_values_vector

!=================================================================================================
subroutine facet_integrator_get_gradient_scalar (this, ishape, qpoint, ineigh, vector_field)
  implicit none
  class(facet_integrator_t), intent(in)    :: this
  integer(ip)             , intent(in)    :: ishape
  integer(ip)             , intent(in)    :: qpoint
  integer(ip)             , intent(in)    :: ineigh
  type(vector_field_t)    , intent(out)   :: vector_field
  
  integer(ip) :: actual_qpoint
  type(cell_integrator_t), pointer :: cell_integrator
  assert( (ineigh == 1) .or. ((ineigh == 2) .and. (.not. this%is_at_boundary)))
  assert( this%reference_fe(ineigh)%p%field_type == field_type_scalar )
  if ( ineigh == 1 ) then 
    actual_qpoint = qpoint
  else   
    actual_qpoint = this%qpoints_perm%a(qpoint,this%current_permutation_index)
  end if
  cell_integrator => this%cell_integrator_facet_restriction(ineigh)%get_current_cell_integrator()
  call cell_integrator%get_gradient(ishape,actual_qpoint,vector_field)
end subroutine facet_integrator_get_gradient_scalar

!=================================================================================================
subroutine facet_integrator_get_gradients_scalar (this, ineigh, gradients)
  implicit none
  class(facet_integrator_t)         , intent(in)    :: this
  integer(ip)                      , intent(in)    :: ineigh
  type(vector_field_t), allocatable, intent(inout) :: gradients(:,:)
  type(cell_integrator_t), pointer :: cell_integrator
  assert( (ineigh == 1) .or. ((ineigh == 2) .and. (.not. this%is_at_boundary)))
  assert( this%reference_fe(ineigh)%p%field_type == field_type_scalar )
  cell_integrator => this%cell_integrator_facet_restriction(ineigh)%get_current_cell_integrator()
  if ( ineigh == 1 ) then 
    call cell_integrator%get_gradients(gradients)
  else   
    call cell_integrator%get_gradients(gradients,this%qpoints_perm%a(:,this%current_permutation_index))
  end if
end subroutine facet_integrator_get_gradients_scalar

!=================================================================================================
subroutine facet_integrator_get_curl_vector (this, ishape, qpoint, ineigh, vector_field)
  implicit none
  class(facet_integrator_t), intent(in)    :: this
  integer(ip)             , intent(in)    :: ishape
  integer(ip)             , intent(in)    :: qpoint
  integer(ip)             , intent(in)    :: ineigh
  type(vector_field_t)    , intent(out)   :: vector_field
  
  integer(ip) :: actual_qpoint
  type(cell_integrator_t), pointer :: cell_integrator
  assert( (ineigh == 1) .or. ((ineigh == 2) .and. (.not. this%is_at_boundary)))
  assert( this%reference_fe(ineigh)%p%field_type == field_type_vector )
  cell_integrator => this%cell_integrator_facet_restriction(ineigh)%get_current_cell_integrator()
  if ( ineigh == 1 ) then 
    actual_qpoint = qpoint
  else   
    actual_qpoint = this%qpoints_perm%a(qpoint,this%current_permutation_index)
  end if  
  call cell_integrator%get_curl(ishape,actual_qpoint,vector_field)
end subroutine facet_integrator_get_curl_vector

!=================================================================================================
subroutine facet_integrator_get_curls_vector (this, ineigh, curls)
  implicit none
  class(facet_integrator_t)             , intent(in)    :: this
  integer(ip)                          , intent(in)    :: ineigh
  type(vector_field_t)    , allocatable, intent(inout) :: curls(:,:)
  type(cell_integrator_t), pointer :: cell_integrator
  assert( (ineigh == 1) .or. ((ineigh == 2) .and. (.not. this%is_at_boundary)))
  assert( this%reference_fe(ineigh)%p%field_type == field_type_vector )
  cell_integrator => this%cell_integrator_facet_restriction(ineigh)%get_current_cell_integrator()
  if ( ineigh == 1 ) then 
    call cell_integrator%get_curls(curls)
  else   
    call cell_integrator%get_curls(curls,this%qpoints_perm%a(:,this%current_permutation_index))
  end if
end subroutine facet_integrator_get_curls_vector

!=================================================================================================
function facet_integrator_get_current_qpoints_perm ( this, neighbour_id )
  implicit none
  class(facet_integrator_t), target, intent(in)    :: this
  integer(ip)                     , intent(in)    :: neighbour_id
  integer(ip), pointer :: facet_integrator_get_current_qpoints_perm(:)
  
  if ( neighbour_id == 1 ) then
    facet_integrator_get_current_qpoints_perm => this%qpoints_perm%a(:,1)
  else
    facet_integrator_get_current_qpoints_perm => this%qpoints_perm%a(:,this%current_permutation_index)
  end if
    
end function facet_integrator_get_current_qpoints_perm

!==================================================================================================
function facet_integrator_get_last_visited_cell_lev(this,neighbour_id,facet_lid,subfacet_lid)
  implicit none
  ! Parameters
  class(facet_integrator_t), intent(in) :: this
  integer(ip)              , intent(in) :: neighbour_id
  integer(ip)              , intent(in) :: facet_lid
  integer(ip)              , intent(in) :: subfacet_lid
  integer(ip) :: facet_integrator_get_last_visited_cell_lev
  integer(ip) :: indx
  assert( (neighbour_id == 1) .or. ((neighbour_id == 2) .and. (.not. this%is_at_boundary)))
  indx = facet_lid+subfacet_lid*this%cell_integrator_facet_restriction(neighbour_id)%num_facets
  facet_integrator_get_last_visited_cell_lev = & 
    this%cell_integrator_facet_restriction(neighbour_id)%cell_integrator(indx)%get_last_visited_cell_lev()
end function  facet_integrator_get_last_visited_cell_lev

!=================================================================================================
subroutine facet_integrator_evaluate_fe_function_scalar ( this,                     &
                                                         neighbour_id,             &
                                                         nodal_values,             &
                                                         quadrature_points_values )
  implicit none
  class(facet_integrator_t), intent(in)    :: this
  integer(ip)             , intent(in)    :: neighbour_id
  real(rp)                , intent(in)    :: nodal_values(:)
  real(rp), allocatable   , intent(inout) :: quadrature_points_values(:)
  type(cell_integrator_t), pointer :: cell_integrator
  cell_integrator => this%cell_integrator_facet_restriction(neighbour_id)%get_current_cell_integrator()
  call cell_integrator%evaluate_fe_function(nodal_values,quadrature_points_values)
end subroutine facet_integrator_evaluate_fe_function_scalar

!=================================================================================================
subroutine facet_integrator_evaluate_fe_function_vector ( this,                     &
                                                         neighbour_id,             &
                                                         nodal_values,             &
                                                         quadrature_points_values )
  implicit none
  class(facet_integrator_t)         , intent(in)    :: this
  integer(ip)                      , intent(in)    :: neighbour_id
  real(rp)                         , intent(in)    :: nodal_values(:)
  type(vector_field_t), allocatable, intent(inout) :: quadrature_points_values(:)
  type(cell_integrator_t), pointer :: cell_integrator
  cell_integrator => this%cell_integrator_facet_restriction(neighbour_id)%get_current_cell_integrator()
  call cell_integrator%evaluate_fe_function(nodal_values,quadrature_points_values)
end subroutine facet_integrator_evaluate_fe_function_vector

!=================================================================================================
subroutine facet_integrator_evaluate_fe_function_tensor ( this,                     &
                                                         neighbour_id,             &
                                                         nodal_values,             &
                                                         quadrature_points_values )
  implicit none
  class(facet_integrator_t)         , intent(in)    :: this
  integer(ip)                      , intent(in)    :: neighbour_id
  real(rp)                         , intent(in)    :: nodal_values(:)
  type(tensor_field_t), allocatable, intent(inout) :: quadrature_points_values(:)
  type(cell_integrator_t), pointer :: cell_integrator
  cell_integrator => this%cell_integrator_facet_restriction(neighbour_id)%get_current_cell_integrator()
  call cell_integrator%evaluate_fe_function(nodal_values,quadrature_points_values)
end subroutine facet_integrator_evaluate_fe_function_tensor

!=================================================================================================
subroutine facet_integrator_evaluate_gradient_fe_function_scalar ( this,                     &
                                                                  neighbour_id,             &
                                                                  nodal_values,             &
                                                                  quadrature_points_values )
  implicit none
  class(facet_integrator_t)         , intent(in)    :: this
  integer(ip)                      , intent(in)    :: neighbour_id
  real(rp)                         , intent(in)    :: nodal_values(:)
  type(vector_field_t), allocatable, intent(inout) :: quadrature_points_values(:)
  integer(ip) :: indx
  indx = this%cell_integrator_facet_restriction(neighbour_id)%current_facet_lid + &
         this%cell_integrator_facet_restriction(neighbour_id)%current_subfacet_lid* &
         this%cell_integrator_facet_restriction(neighbour_id)%num_facets
  call this%cell_integrator_facet_restriction(neighbour_id)%cell_integrator(indx)%evaluate_gradient_fe_function(nodal_values,quadrature_points_values)
end subroutine facet_integrator_evaluate_gradient_fe_function_scalar

!=================================================================================================
subroutine facet_integrator_evaluate_gradient_fe_function_vector ( this,                     &
                                                                  neighbour_id,             &
                                                                  nodal_values,             &
                                                                  quadrature_points_values )
  implicit none
  class(facet_integrator_t)         , intent(in)    :: this
  integer(ip)                      , intent(in)    :: neighbour_id
  real(rp)                         , intent(in)    :: nodal_values(:)
  type(tensor_field_t), allocatable, intent(inout) :: quadrature_points_values(:)
  type(cell_integrator_t), pointer :: cell_integrator
  cell_integrator => this%cell_integrator_facet_restriction(neighbour_id)%get_current_cell_integrator()
  call cell_integrator%evaluate_gradient_fe_function(nodal_values,quadrature_points_values)
end subroutine facet_integrator_evaluate_gradient_fe_function_vector

!==================================================================================================
subroutine assign_facet_integrator(this,other)
  implicit none
  type(facet_integrator_t)     , intent(inout) :: this
  type(facet_integrator_t)     , intent(in)    :: other
  call this%free()
  this%is_at_boundary = other%is_at_boundary
  this%is_at_field_boundary = other%is_at_field_boundary
  this%is_at_field_interior = other%is_at_field_interior
  this%active_cell_id = other%active_cell_id
  this%reference_fe(1)%p => other%reference_fe(1)%p
  call this%cell_integrator_facet_restriction(1)%copy(other%cell_integrator_facet_restriction(1))
  if ( .not. this%is_at_boundary ) then
     call this%cell_integrator_facet_restriction(2)%copy(other%cell_integrator_facet_restriction(2))
  end if 
  this%reference_fe(2)%p => other%reference_fe(2)%p
  this%current_permutation_index = other%current_permutation_index
  call this%qpoints_perm%create(other%qpoints_perm%nd1,other%qpoints_perm%nd2)
  this%qpoints_perm%a = other%qpoints_perm%a
end subroutine assign_facet_integrator

!==================================================================================================
subroutine assign_facet_integrator_array ( facet_integrator_array1, facet_integrator_array2 ) 
  implicit none       
  type(facet_integrator_t), intent(inout) :: facet_integrator_array1(:)
  type(facet_integrator_t), intent(in)    :: facet_integrator_array2(:)
  integer(ip) :: i
  assert( size(facet_integrator_array1) == size(facet_integrator_array2) )
  do i = 1,size(facet_integrator_array1)
    call assign_facet_integrator(facet_integrator_array1(i),facet_integrator_array2(i))
  end do
end subroutine assign_facet_integrator_array
