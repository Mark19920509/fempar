! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published byfill_inter
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!**************************************************************************************************
! Deferred TBP implementors from reference_fe_t
!**************************************************************************************************

!==================================================================================================
function hex_raviart_thomas_reference_fe_check_compatibility_of_n_faces                   &
     &                      (target_reference_fe,source_reference_fe, source_n_face_id,target_n_face_id)
  implicit none
  class(hex_raviart_thomas_reference_fe_t), intent(in)  :: target_reference_fe
  class(reference_fe_t)               , intent(in)  :: source_reference_fe
  integer(ip)                         , intent(in)  :: source_n_face_id ! Local n-face ID
  integer(ip)                         , intent(in)  :: target_n_face_id ! Local n-face ID
  logical :: hex_raviart_thomas_reference_fe_check_compatibility_of_n_faces 
  integer(ip) :: idime

  select type(source_reference_fe)
     class is(hex_raviart_thomas_reference_fe_t)
        ! Get number nodes per dimension
     assert (target_reference_fe%num_dims == source_reference_fe%num_dims)
     do idime = 1, target_reference_fe%num_dims
        assert (target_reference_fe%order_vector(idime) == source_reference_fe%order_vector(idime))
     end do
     assert (target_reference_fe%get_n_face_dim(target_n_face_id) == source_reference_fe%get_n_face_dim(source_n_face_id))
     assert (target_reference_fe%get_n_face_dim(target_n_face_id) < 3)
     assert (target_reference_fe%num_field_components == source_reference_fe%num_field_components)
     assert (target_reference_fe%get_num_own_dofs_n_face(target_n_face_id) == source_reference_fe%get_num_own_dofs_n_face(source_n_face_id))
     hex_raviart_thomas_reference_fe_check_compatibility_of_n_faces = .true.
     class default
     hex_raviart_thomas_reference_fe_check_compatibility_of_n_faces = .false.
  end select

end function hex_raviart_thomas_reference_fe_check_compatibility_of_n_faces

!==================================================================================================
function hex_raviart_thomas_reference_fe_get_characteristic_length ( this )
  implicit none 
  class(hex_raviart_thomas_reference_fe_t), intent(in) :: this 
  real(rp)  :: hex_raviart_thomas_reference_fe_get_characteristic_length 
  hex_raviart_thomas_reference_fe_get_characteristic_length =  2.0_rp
end function hex_raviart_thomas_reference_fe_get_characteristic_length

!**************************************************************************************************
! Deferred TBP implementors from raviart_thomas_reference_fe_t
!**************************************************************************************************

subroutine hex_raviart_thomas_reference_fe_fill_quadrature ( this, quadrature ) 
  implicit none
  class(hex_raviart_thomas_reference_fe_t), intent(in)    :: this
  type(quadrature_t)                      , intent(inout) :: quadrature
  call quadrature%fill_hex_gauss_legendre()
end subroutine hex_raviart_thomas_reference_fe_fill_quadrature


!==================================================================================================
subroutine hex_raviart_thomas_reference_fe_fill_interpolation( this, quadrature, interpolation, order_vector )
  implicit none
  class(hex_raviart_thomas_reference_fe_t), intent(in) :: this
  type(quadrature_t)              , intent(in)         :: quadrature
  type(interpolation_t)           , intent(inout)      :: interpolation    
  integer(ip)        , optional   , intent(in)         :: order_vector(SPACE_DIM)
  
  integer(ip)           :: i, j, idime, jdime, qpoint
  type(interpolation_t) :: interpolation_pre_basis
  
  if ( .not. this%basis_changed ) then
    call this%fill_interpolation_pre_basis ( quadrature, interpolation, order_vector )
  else
    call interpolation_pre_basis%clone(interpolation)
    call this%fill_interpolation_pre_basis ( quadrature, interpolation_pre_basis, order_vector ) 
    call this%apply_change_basis_matrix_to_interpolation ( interpolation_pre_basis, interpolation )
    call interpolation_pre_basis%free()
  end if
  
end subroutine hex_raviart_thomas_reference_fe_fill_interpolation


! This subroutine fills the interpolation using the polynomial_names machinery
!==================================================================================================
subroutine hex_raviart_thomas_reference_fe_fill_interpolation_pre_basis( this, quadrature, interpolation, order_vector )
  implicit none
  class(hex_raviart_thomas_reference_fe_t), intent(in) :: this
  type(quadrature_t)              , intent(in)         :: quadrature
  type(interpolation_t)           , intent(inout)      :: interpolation    
  integer(ip)        , optional   , intent(in)         :: order_vector(SPACE_DIM)
  
  type(tensor_product_polynomial_space_t) :: tensor_product_polynomial_space
  type(polynomial_basis_t)    :: polynomial_1D_basis(SPACE_DIM)
  type(lagrange_polynomial_t)             :: polynomial_1D

  real(rp), allocatable :: tensor_product_values(:)
  real(rp), allocatable :: tensor_product_gradients(:,:)
  integer(ip) :: order_vector_(SPACE_DIM)
  integer(ip) :: perm_order_vector_(SPACE_DIM)
  integer(ip) :: idime, jdime, q_point, i, c, aux

  ! Initialize both shape functions and derivatives to zero.
  ! This initialization step CANNOT be avoided. Shape-functions
  ! in the RT pre-basis have only one non-zero component. Clients
  ! of type(interpolation_t) may consume all components of each shape 
  ! function (even if they have a single non-zero component), therefore 
  ! they must be initialized provided the code below just computes the
  ! single non-zero component of each shape function
  interpolation%shape_functions   = 0.0_rp
  if(interpolation%my_duties%compute_first_derivatives_is_assigned()) interpolation%shape_derivatives = 0.0_rp
  if(interpolation%my_duties%compute_second_derivatives_is_assigned()) then
     mcheck(.false.,'hex raviart thomas FE cannot provide hessian')
  end if
  
  if ( present(order_vector) ) then
    order_vector_ = order_vector
  else
    order_vector_  = this%order_vector
  end if

  do idime=1, interpolation%num_dims
     perm_order_vector_   = order_vector_ 

     ! Swap positions 1 and idime of perm_order_vector_
     aux                       = perm_order_vector_(1)
     perm_order_vector_(1)     = perm_order_vector_(idime)
     perm_order_vector_(idime) = aux 

     ! Generate a basis of 1D polynomials per coordinate direction 
     ! (X,Y,(Z)) with order given by order_vector_(SPACE_DIM)
     do jdime=1,interpolation%num_dims
       call polynomial_1D%generate_basis( perm_order_vector_(jdime), & 
                                          polynomial_1D_basis(jdime) )
     end do

     ! Create an scalar-valued space of  2/3D polynomials from the 
     ! tensor product of the basis of 1D polynomials
     call tensor_product_polynomial_space%create(interpolation%num_dims,&
                                                 polynomial_1D_basis)
     call tensor_product_polynomial_space%fill( quadrature%get_pointer_coordinates() )

     call memalloc(tensor_product_polynomial_space%get_num_polynomials(),&
                   tensor_product_values,__FILE__,__LINE__)
     do q_point=1, quadrature%get_num_quadrature_points()
        call tensor_product_polynomial_space%evaluate_values( q_point, tensor_product_values )
        c=(idime-1)*tensor_product_polynomial_space%get_num_polynomials()
        do i=1, tensor_product_polynomial_space%get_num_polynomials()
           c = c+1
           interpolation%shape_functions(idime,c,q_point) = tensor_product_values(i)
        end do
     end do
     call memfree(tensor_product_values,__FILE__,__LINE__)
     
     if(interpolation%my_duties%compute_first_derivatives_is_assigned()) then
        call memalloc(SPACE_DIM,&
                      tensor_product_polynomial_space%get_num_polynomials(),&
                      tensor_product_gradients,__FILE__,__LINE__)
        do q_point=1, quadrature%get_num_quadrature_points()
           call tensor_product_polynomial_space%evaluate_gradients( q_point, tensor_product_gradients )
           c=(idime-1)*tensor_product_polynomial_space%get_num_polynomials()
           do i=1, tensor_product_polynomial_space%get_num_polynomials()
              c = c+1
              do jdime = 1,interpolation%num_dims
                 interpolation%shape_derivatives(idime,jdime,c,q_point) = tensor_product_gradients(jdime,i)
              end do
           end do
        end do
        call memfree(tensor_product_gradients,__FILE__,__LINE__)
     end if
   
     ! Free auxiliary memory
     do jdime=1,interpolation%num_dims
        call polynomial_1D_basis(jdime)%free()
     end do
     call tensor_product_polynomial_space%free()
     call polynomial_1D%free()
  
  end do

end subroutine hex_raviart_thomas_reference_fe_fill_interpolation_pre_basis

! Here we define the dim-1 quadrature and next translate the nodes
! using the facet type to dim. Next, use the same machinary as for the volume with this new quadrature.
!!==================================================================================================
subroutine hex_raviart_thomas_reference_fe_fill_interp_restricted_to_facet( this, local_quadrature, &
     & facet_lid, subfacet_lid, facet_interpolation )
  implicit none
  class(hex_raviart_thomas_reference_fe_t), intent(in)    :: this
  type(quadrature_t)                      , intent(in)    :: local_quadrature
  integer(ip)                             , intent(in)    :: facet_lid
  integer(ip)                             , intent(in)    :: subfacet_lid
  type(interpolation_t)                   , intent(inout) :: facet_interpolation
  type(quadrature_t) :: aux_quadrature
  integer(ip) :: c,idime,iface,n_face_index
  ! Exit if attempts to fill the interpolation of a subface
  if ( subfacet_lid >= 0 ) return
  ! Add offset to have same numbering as in polytope
  n_face_index = facet_lid+this%get_first_facet_id()-1
  ! Create a d-dimensional quadrature as follows
  call aux_quadrature%create( this%num_dims, local_quadrature%num_quadrature_points )
  c = 0
  do idime = 0,this%num_dims-1
     if ( this%polytope%n_face_dir_is_fixed( n_face_index, idime ) == 1 ) then
        c = c+1
        aux_quadrature%coordinates(idime+1,:) = local_quadrature%coordinates(c,:)
     else if ( this%polytope%n_face_dir_coordinate( n_face_index, idime ) == 0 ) then
        aux_quadrature%coordinates(idime+1,:) = -1.0_rp
     else
        aux_quadrature%coordinates(idime+1,:) = 1.0_rp
     end if
  end do
  call this%fill_interpolation( aux_quadrature, facet_interpolation ) 
  call aux_quadrature%free()
end subroutine hex_raviart_thomas_reference_fe_fill_interp_restricted_to_facet

subroutine hex_raviart_thomas_reference_fe_change_basis(this) 
  implicit none
  class(hex_raviart_thomas_reference_fe_t), intent(inout) ::  this
  
  ! Local variables required by boundary moments integration
  type(hex_lagrangian_reference_fe_t) :: d_1_fe
  type(quadrature_t)                  :: d_1_quadrature
  type(interpolation_t)               :: d_1_interpolation, facet_interpolation
  type(facet_map_t)                    :: facet_map
  type(point_t), pointer              :: facet_map_coordinates(:)
  real(rp)                            :: shape_test
  type(vector_field_t)                :: normal

  ! Local variables required by interior moments integration
  type(quadrature_t)                  :: cell_quadrature
  type(interpolation_t)               :: reduced_order_cell_interpolation, cell_interpolation
  integer(ip)                         :: reduced_order_vector(SPACE_DIM)
  integer(ip)                         :: num_interior_moments
  type(vector_field_t)                :: v_shape_test
  
  ! Local variables requires for both boundary/interior moments integration
  type(hex_lagrangian_reference_fe_t) :: d_fe_geo
  type(vector_field_t)                :: v_shape_trial
  integer(ip)                         :: ishape, jshape, qpoint
  real(rp)                            :: factor
  integer(ip)                         :: idime
  
  ! Local variable required for normals reorientation calcs (required to update_facet_map)
  integer(ip)                         :: facet_lid
  
  ! Rest of local variables
  integer(ip)                         :: c, d, i, j, istat
  integer(ip)                         :: num_rows_own_node_permutations
  integer(ip)                         :: num_cols_own_node_permutations
  type(list_iterator_t)               :: interior_dofs_iterator
  
  ! Facets and vertices within reference cell traversal-related data structures
  type(list_iterator_t)               :: vertex_iterator
  integer(ip)                         :: vertex_within_cell_id
  integer(ip)                         :: vertex_within_face_id
  integer(ip)                         :: facet_id
  
  assert ( .not. this%basis_changed )
  assert ( this%conformity .and. this%continuity )
 
  ! Allocate change_basis_matrix
  if ( allocated(this%change_basis_matrix) ) & 
      call memfree(this%change_basis_matrix, __FILE__, __LINE__)    
      
  call memalloc(this%num_shape_functions, &
                this%num_shape_functions, &
                this%change_basis_matrix, &
                __FILE__, &
                __LINE__)
  
  ! Create a d-1-dim scalar lagrangian reference FE of order k
  call d_1_fe%create(topology          = this%get_topology(), &
                     num_dims = this%num_dims-1, &
                     order             = this%order, &
                     field_type        = field_type_scalar, &
                     conformity        = .true. )

  ! Create a d-dim scalar lagrangian reference FE of order 1 (geometry)
  call d_fe_geo%create(topology          = this%get_topology(), &
                       num_dims = this%num_dims, &
                       order             = 1, &
                       field_type        = field_type_scalar, &
                       conformity        = .true. )

  ! Create a d-1 dimension quadrature from RT reference FE
  ! Project it later to d dimensions on facet_quadrature
  call this%create_facet_quadrature( d_1_quadrature )
  
  call d_1_fe%create_interpolation( d_1_quadrature, d_1_interpolation )
  
  call facet_map%create( d_1_quadrature, d_fe_geo )

  ! Initialize change of basis matrix
  this%change_basis_matrix = 0.0_rp
  
  d = 0
  do facet_id = this%get_first_facet_id(), this%get_first_facet_id() + this%get_num_facets()-1
  
     ! Get face map coordinates
     facet_map_coordinates => facet_map%get_coordinates()
   
     ! Extract coordinates of the vertices within the face
     vertex_within_face_id = 1
     vertex_iterator = this%vertices_n_face%create_iterator(facet_id)
     do while ( .not. vertex_iterator%is_upper_bound () )
        vertex_within_cell_id = vertex_iterator%get_current()
        call facet_map_coordinates(vertex_within_face_id)%init(d_fe_geo%nodal_quadrature%coordinates(:, vertex_within_cell_id))
        call vertex_iterator%next()
        vertex_within_face_id = vertex_within_face_id + 1
     end do

     ! Update facet_map on current face (only being used to compute the faceet normal)
     facet_lid = facet_id - d_fe_geo%get_first_facet_id()+1
     call facet_map%update(reorientation_factor   = d_fe_geo%get_normal_orientation_factor(facet_lid), &
                                   quadrature             = d_1_quadrature ) 
     
     call this%create_interpolation_restricted_to_facet ( facet_id - d_fe_geo%get_first_facet_id()+1, &
                                           -1, d_1_quadrature, facet_interpolation )
     
     ! Integrate boundary moments int_Face(u.n q), q \in Q_k
     do qpoint = 1, d_1_quadrature%num_quadrature_points
        !factor = facet_map%get_det_jacobian(qpoint) * d_1_quadrature%get_weight(qpoint)
        factor = d_1_quadrature%get_weight(qpoint) / ( d_1_fe%get_characteristic_length() ** d_1_fe%get_num_dims() ) 
        call facet_map%get_normal(qpoint, normal)
        ! Compute normal such that (for oriented meshes) two elements sharing a face have a
        ! moment determined with the same normal, in order to have conformity
        normal = (-1.0_rp)**(this%orientation%a(facet_id)) * normal
        !do i=1, SPACE_DIM
        !   call normal%set(i, abs(normal%get(i)))
        !end do
        
        do ishape=1, d_1_interpolation%num_shape_functions
           call d_1_fe%get_value(d_1_interpolation, ishape, qpoint, shape_test)
           do jshape=1, facet_interpolation%num_shape_functions
              call this%get_value(facet_interpolation, jshape, qpoint, v_shape_trial)
              this%change_basis_matrix(d+ishape,jshape) = this%change_basis_matrix(d+ishape,jshape) &
                                                          + shape_test * v_shape_trial * normal * factor
           end do
        end do
     end do
     d = d + d_1_interpolation%num_shape_functions
  end do
  
  ! number shape functions Qk-1,k,k x Qk,k-1,k x Qk,k,k-1
  
  ! reduced order vector
  reduced_order_vector = this%order_vector
  reduced_order_vector(1) = this%order_vector(1)-2
  
  ! compute number shape functions for reduced order element
  num_interior_moments = 1
  do idime = 1, this%num_dims
     num_interior_moments = num_interior_moments*(reduced_order_vector(idime)+1)
  end do
  num_interior_moments = num_interior_moments*this%num_dims
  
  ! create cell quadrature
  call this%create_quadrature(cell_quadrature)
  
  ! create reduced order interpolation
  call reduced_order_cell_interpolation%create( this%num_dims, &
                                                num_interior_moments, &
                                                cell_quadrature%num_quadrature_points)
  
  call this%fill_interpolation_pre_basis( cell_quadrature, reduced_order_cell_interpolation, reduced_order_vector)
  
  ! Create PRE-BASIS cell-interpolation from this RT REF FE 
  call this%create_interpolation( cell_quadrature, cell_interpolation )
  
  ! Integration of interior moments int_K (u.q), q \in Qk-1,k,k x Qk,k-1,k x Qk,k,k-1     
  do qpoint = 1, cell_quadrature%num_quadrature_points
     factor = ( this%get_characteristic_length() ** this%get_num_dims() )  * cell_quadrature%get_weight(qpoint)
     do ishape=1, reduced_order_cell_interpolation%num_shape_functions
        call this%get_value(reduced_order_cell_interpolation, ishape, qpoint, v_shape_test)
        do jshape=1, cell_interpolation%num_shape_functions
         call this%get_value(cell_interpolation, jshape, qpoint, v_shape_trial)
         this%change_basis_matrix(d+ishape,jshape) = this%change_basis_matrix(d+ishape,jshape) + &
                                                     v_shape_test * v_shape_trial * factor
        end do
     end do
   end do
   
  ! Invert change_basis_matrix
  call this%invert_change_basis_matrix()
  
  ! Transform type(list_t) member variables of this to reflect change of basis
  call this%own_dofs_n_face%create( this%num_n_faces + 1 )
  do facet_id = this%get_first_facet_id(), this%get_first_facet_id() + this%get_num_facets()-1
     call this%own_dofs_n_face%sum_to_pointer_index(facet_id, d_1_interpolation%num_shape_functions )
  end do   
  call this%own_dofs_n_face%sum_to_pointer_index(this%num_n_faces + 1, num_interior_moments)
  call this%own_dofs_n_face%calculate_header()
  call this%own_dofs_n_face%allocate_list_from_pointer()
  
  c = 1
  do facet_id = this%get_first_facet_id(), this%get_first_facet_id() + this%get_num_facets()-1
     interior_dofs_iterator = this%own_dofs_n_face%create_iterator(facet_id)
     do while ( .not. interior_dofs_iterator%is_upper_bound() )
        call interior_dofs_iterator%set_current(c)
        c = c + 1
        call interior_dofs_iterator%next()
     end do
     call interior_dofs_iterator%next()
  end do   
  
  interior_dofs_iterator = this%own_dofs_n_face%create_iterator(this%num_n_faces + 1)
  do while ( .not. interior_dofs_iterator%is_upper_bound() )
     call interior_dofs_iterator%set_current(c)
     c = c + 1
     call interior_dofs_iterator%next()
  end do
  
  this%dofs_n_face      = this%own_dofs_n_face
  
  ! Re-define own_node_permutations-related stuff
  if ( allocated(this%num_rotations_x_dim) )  call memfree (this%num_rotations_x_dim,__FILE__,__LINE__)
  if ( allocated(this%num_orientations_x_dim) ) call memfree (this%num_orientations_x_dim,__FILE__,__LINE__)
  if (allocated(this%own_dof_permutations)) then
     do i = 1, this%num_dims-1
        call this%own_dof_permutations(i)%free()
     end do
     deallocate(this%own_dof_permutations, stat=istat)
     check(istat==0)
  end if
  
  call memalloc (this%num_dims-1,this%num_rotations_x_dim,__FILE__,__LINE__)
  call memalloc (this%num_dims-1,this%num_orientations_x_dim,__FILE__,__LINE__)
  
  do idime = 1, this%num_dims-1
     call this%node_array_vector(1)%compute_num_rot_and_perm( idime, &
                                                              this%polytope, &
                                                              this%num_rotations_x_dim(idime), &
                                                              this%num_orientations_x_dim(idime))
  end do
  
  allocate(this%own_dof_permutations(this%num_dims-1)) 
  do idime = 1, this%num_dims-1
    num_cols_own_node_permutations = this%num_rotations_x_dim(idime)*this%num_orientations_x_dim(idime)
    if ( idime == 1 .and. this%num_dims == 3 ) then
      num_rows_own_node_permutations = 0
    else
      num_rows_own_node_permutations = d_1_interpolation%num_shape_functions
    end if   
  
   call this%own_dof_permutations(this%num_dims-1)%create(num_rows_own_node_permutations, &
                                                                    num_cols_own_node_permutations)
   
   ! Warning: temporarily initializing this%own_node_permutations(num_dims-1)%a(:)
   !          to the identity. This only will work provided that for all faces F within the 
   !          triangulation, F is oriented the same way in both cells around it
   if (num_rows_own_node_permutations > 0) then
     do j=1, num_cols_own_node_permutations
       do i=1, num_rows_own_node_permutations
         this%own_dof_permutations(this%num_dims-1)%a(i,j) = i
       end do
     end do
   end if
 end do  
  
  ! Flag change of basis
  this%basis_changed = .true.
  
  ! Free all local data structures required for boundary/interior moments integration
  call d_fe_geo%free()
  call d_1_fe%free()
  call d_1_quadrature%free()
  call d_1_interpolation%free()
  call facet_interpolation%free()
  call facet_map%free()
  
  call cell_quadrature%free()
  call reduced_order_cell_interpolation%free()
  call cell_interpolation%free()
  
  end subroutine hex_raviart_thomas_reference_fe_change_basis 

   ! @sbadia: It could be replaced by an anisotropic quadrature
   !==================================================================================================
   function hrtrf_compute_num_quadrature_points( this, degree, dimension )
     implicit none
     class(hex_raviart_thomas_reference_fe_t), intent(in)    :: this
     integer(ip)                         , intent(in)    :: degree
     integer(ip)                         , intent(in)    :: dimension
     integer(ip) :: hrtrf_compute_num_quadrature_points
     hrtrf_compute_num_quadrature_points = int(ceiling(real(degree + 1,rp)/2.0_rp)**real(dimension,rp),ip)
   end function hrtrf_compute_num_quadrature_points
   
   
!==================================================================================================
subroutine hrtrf_fill_qpoints_permutations(this, quadrature, qpoints_perm)
  implicit none
  class(hex_raviart_thomas_reference_fe_t), intent(in)    :: this
  type(quadrature_t)                  , intent(in)    :: quadrature
  type(allocatable_array_ip2_t)       , intent(inout) :: qpoints_perm
  integer(ip)    :: ndime, n_q_points, order
  
  ndime      = quadrature%get_num_dims()
  n_q_points = quadrature%get_num_quadrature_points()
  order      = int(real(n_q_points,rp)**(1.0_rp/real(ndime,rp)),ip)+1
  
  call this%node_array%fill_permutations( order, &
                                          ndime, &
                                          this%polytope, &
                                          qpoints_perm )
  
end subroutine hrtrf_fill_qpoints_permutations

   !**************************************************************************************************
   ! Concrete TBPs of this derived data type
   !**************************************************************************************************

   !**************************************************************************************************
   ! Support functions
   !**************************************************************************************************
