! Copyright (C) 2014 Santiago Badia, Alberto F. Mart√≠n and Javier Principe
!
! This file is part of FEMPAR (Finite Element Multiphysics PARallel library)
!
! FEMPAR is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! FEMPAR is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with FEMPAR. If not, see <http://www.gnu.org/licenses/>.
!
! Additional permission under GNU GPL version 3 section 7
!
! If you modify this Program, or any covered work, by linking or combining it 
! with the Intel Math Kernel Library and/or the Watson Sparse Matrix Package 
! and/or the HSL Mathematical Software Library (or a modified version of them), 
! containing parts covered by the terms of their respective licenses, the
! licensors of this Program grant you additional permission to convey the 
! resulting work. 
!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

!**************************************************************************************************
! Deferred TBP implementors from reference_fe_t
!**************************************************************************************************

!==================================================================================================
function tet_raviart_thomas_check_compatibility_of_n_faces                   &
     &                      (target_reference_fe,source_reference_fe, source_n_face_id,target_n_face_id)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)  :: target_reference_fe
  class(reference_fe_t)               , intent(in)  :: source_reference_fe
  integer(ip)                         , intent(in)  :: source_n_face_id ! Local n-face ID
  integer(ip)                         , intent(in)  :: target_n_face_id ! Local n-face ID
  logical :: tet_raviart_thomas_check_compatibility_of_n_faces 
  integer(ip) :: idime

  select type(source_reference_fe)
     class is(tet_raviart_thomas_reference_fe_t)
        ! Get number nodes per dimension
     assert (target_reference_fe%num_dims == source_reference_fe%num_dims)
     do idime = 1, target_reference_fe%num_dims
        assert (target_reference_fe%order_vector(idime) == source_reference_fe%order_vector(idime))
     end do
     assert (target_reference_fe%get_n_face_dim(target_n_face_id) ==  source_reference_fe%get_n_face_dim(source_n_face_id))
     assert (target_reference_fe%get_n_face_dim(target_n_face_id) < 3)
     assert (target_reference_fe%num_field_components == source_reference_fe%num_field_components)
     assert (target_reference_fe%get_num_own_dofs_n_face(target_n_face_id) == source_reference_fe%get_num_own_dofs_n_face(source_n_face_id))
     tet_raviart_thomas_check_compatibility_of_n_faces = .true.
     class default
     tet_raviart_thomas_check_compatibility_of_n_faces = .false.
  end select

end function tet_raviart_thomas_check_compatibility_of_n_faces

!=================================================================================================
function tet_raviart_thomas_get_characteristic_length ( this )
  implicit none 
  class(tet_raviart_thomas_reference_fe_t), intent(in) :: this 
  real(rp)  :: tet_raviart_thomas_get_characteristic_length 
  tet_raviart_thomas_get_characteristic_length =   &
       &   real(get_factorial(this%num_dims),rp)**(-1.0_rp/real(this%num_dims,rp))
end function tet_raviart_thomas_get_characteristic_length

!==================================================================================================
subroutine tet_raviart_thomas_get_subelements_connectivity ( this, connectivity )
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  integer(ip),                          intent(inout) :: connectivity(:,:)
  integer(ip) :: num_subelems
  integer(ip) :: subelem
  integer(ip) :: geo_nnodes
  integer(ip) :: local_node
  integer(ip) :: first_coord(this%num_dims)
  integer(ip) :: local_coord(this%num_dims)
  integer(ip) :: global_coord(this%num_dims)

  write(*,*) ' ERROR in: ',__FILE__,__LINE__
  write(*,*) ' Subroutine not implemented for triangles/tetrahedra '
  check( .false. )

end subroutine tet_raviart_thomas_get_subelements_connectivity

!==================================================================================================
subroutine tet_raviart_thomas_blending(this,values)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  type(point_t)                       , intent(inout) :: values(:)
  check(.false.)
end subroutine tet_raviart_thomas_blending

!**************************************************************************************************
! Deferred TBP implementors from lagrangian_reference_fe_t
!**************************************************************************************************

!==================================================================================================
subroutine tet_raviart_thomas_fill_quadrature ( this, quadrature ) 
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  type(quadrature_t)                      , intent(inout) :: quadrature
  call quadrature%fill_tet_gauss_legendre()
end subroutine tet_raviart_thomas_fill_quadrature

!==================================================================================================
subroutine tet_raviart_thomas_fill_interpolation ( this, quadrature, interpolation, order_vector ) 
  implicit none 
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  type(quadrature_t)              , intent(in)    :: quadrature
  type(interpolation_t)           , intent(inout) :: interpolation 
  integer(ip) , optional          , intent(in)    :: order_vector(SPACE_DIM)
  real(rp), pointer :: coord_ip(:,:)
  type(interpolation_t)        :: scalar_interpolation
  type(interpolation_duties_t) :: scalar_interpolation_duties
  integer(ip) :: iquad,idime,ishape

  coord_ip => quadrature%get_pointer_coordinates()

  mcheck(.not.interpolation%my_duties%compute_second_derivatives_is_assigned(),'Hessian not defined for vector Lagrangian')

  ! Create an auxiliary interpolation with num_nodes_scalar shape functions (scalar one)
  call scalar_interpolation_duties%assign_compute_first_derivatives(.true.)
  call scalar_interpolation_duties%assign_compute_second_derivatives(.false.)
  call scalar_interpolation%create( interpolation%num_dims, this%node_array%num_nodes, &
       interpolation%num_quadrature_points, scalar_interpolation_duties )

  do iquad = 1,interpolation%num_quadrature_points
     call this%raviart_thomas_evaluate_interpolation( coord_ip(:,iquad), &
          &           scalar_interpolation%num_dims, &
          &           scalar_interpolation%num_shape_functions, &
          &           scalar_interpolation%num_entries_symmetric_tensor, &
          &           scalar_interpolation%shape_functions(1,:,iquad), &
          &           scalar_interpolation%shape_derivatives(1,:,:,iquad) )
  end do

  interpolation%shape_functions = 0.0_rp
  do idime = 1,this%num_dims
     do ishape = 1,this%num_shape_functions
        do iquad = 1, interpolation%num_quadrature_points
           interpolation%shape_functions(this%node_component_array(ishape,2),ishape,iquad) &
                & = scalar_interpolation%shape_functions(1,this%node_component_array(ishape,1),iquad)
        end do
     end do
  end do
  if(interpolation%my_duties%compute_first_derivatives_is_assigned()) then
     interpolation%shape_derivatives = 0.0_rp  
     do idime = 1,this%num_dims
        do ishape = 1,this%num_shape_functions
           do iquad = 1, interpolation%num_quadrature_points
              interpolation%shape_derivatives(this%node_component_array(ishape,2),:,ishape,iquad) &
                   & = scalar_interpolation%shape_derivatives(1,:,this%node_component_array(ishape,1),iquad)
           end do
        end do
     end do
  end if

  call scalar_interpolation%free()

end subroutine tet_raviart_thomas_fill_interpolation

!==================================================================================================

subroutine tet_raviart_thomas_fill_interp_restricted_to_facet (this, local_quadrature, &
     & facet_lid, subfacet_lid, facet_interpolation)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  type(quadrature_t)                  , intent(in)    :: local_quadrature
  integer(ip)                         , intent(in)    :: facet_lid
  integer(ip)                         , intent(in)    :: subfacet_lid
  type(interpolation_t)               , intent(inout) :: facet_interpolation

  real(rp)   , allocatable :: global_coordinates(:)
  integer(ip)              :: idime, iquad, ishape, p_local_coordinate
  type(interpolation_t)    :: scalar_interpolation
  type(interpolation_duties_t) :: scalar_interpolation_duties

  ! Exit if attempts to fill the interpolation of a subface
  if ( subfacet_lid >= 0 ) return
 
  mcheck(.not.facet_interpolation%my_duties%compute_second_derivatives_is_assigned(),'Hessian not defined for vector Lagrangian')
  
  ! Create an auxiliary interpolation with num_nodes_scalar shape functions (scalar one)
  call scalar_interpolation_duties%assign_compute_first_derivatives(.true.)
  call scalar_interpolation_duties%assign_compute_second_derivatives(.false.)
  call scalar_interpolation%create( facet_interpolation%num_dims, this%node_array%num_nodes, &
       facet_interpolation%num_quadrature_points, scalar_interpolation_duties )

  call memalloc(facet_interpolation%num_dims,global_coordinates,__FILE__,__LINE__)

  do iquad = 1,scalar_interpolation%num_quadrature_points
     ! Transform face local coordinates to element global coordinates
     if (facet_lid <= scalar_interpolation%num_dims ) then 
        ! Orthogonal face in the reference element
        p_local_coordinate = 1
        do idime = 1, scalar_interpolation%num_dims
           if (idime == scalar_interpolation%num_dims + 1 - facet_lid ) then
              global_coordinates(idime) = 0.0_rp
           else
              global_coordinates(idime) = local_quadrature%coordinates(p_local_coordinate,iquad)
              p_local_coordinate = p_local_coordinate + 1
           end if
        end do
     else 
        ! Non-orthogonal face in the reference element
        global_coordinates(1) = 1 - sum(local_quadrature%coordinates(:,iquad))
        global_coordinates(2:scalar_interpolation%num_dims) = & 
             & local_quadrature%coordinates(:,iquad)
     end if
     ! Evaluate shape functions and derivatives at the gauss points
     call this%raviart_thomas_evaluate_interpolation( global_coordinates,                                 &
          scalar_interpolation%num_dims,               &
             scalar_interpolation%num_shape_functions,          &
             scalar_interpolation%num_entries_symmetric_tensor, &
             scalar_interpolation%shape_functions(1,:,iquad),        &
             scalar_interpolation%shape_derivatives(1,:,:,iquad))
  end do

  facet_interpolation%shape_functions = 0.0_rp
  do idime = 1,this%num_dims
     do ishape = 1,this%num_shape_functions
        do iquad = 1, facet_interpolation%num_quadrature_points
           facet_interpolation%shape_functions(this%node_component_array(ishape,2),ishape,iquad) &
                & = scalar_interpolation%shape_functions(1,this%node_component_array(ishape,1),iquad)
        end do
     end do
  end do
  if(facet_interpolation%my_duties%compute_first_derivatives_is_assigned()) then
     facet_interpolation%shape_derivatives = 0.0_rp  
     do idime = 1,this%num_dims
        do ishape = 1,this%num_shape_functions
           do iquad = 1, facet_interpolation%num_quadrature_points
              facet_interpolation%shape_derivatives(this%node_component_array(ishape,2),:,ishape,iquad) &
                   & = scalar_interpolation%shape_derivatives(1,:,this%node_component_array(ishape,1),iquad)
           end do
        end do
     end do
  end if
  call memfree(global_coordinates,__FILE__,__LINE__)

end subroutine tet_raviart_thomas_fill_interp_restricted_to_facet

!==================================================================================================
subroutine tet_raviart_thomas_reference_fe_change_basis(this) 
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(inout) ::  this
  check(.false.)
end subroutine tet_raviart_thomas_reference_fe_change_basis 


!==================================================================================================
function tet_raviart_thomas_get_node_local_id (this, local_coordinates, & 
     & num_dims, order)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  integer(ip)                         , intent(in)    :: local_coordinates(:)
  integer(ip)                         , intent(in)    :: num_dims
  integer(ip)                         , intent(in)    :: order
  integer(ip) :: tet_raviart_thomas_get_node_local_id
  integer(ip) :: k,q

  if (sum(local_coordinates)>order) then
     write(*,*) 'ijk', local_coordinates
     write(*,*) 'tets_setting:: gijk:: ERROR i+j+k<=p'
     check(.false.)
  end if

  tet_raviart_thomas_get_node_local_id = 1
  do k =1,num_dims-1
     q = order-local_coordinates(k+1)
     tet_raviart_thomas_get_node_local_id =   & 
          & tet_raviart_thomas_get_node_local_id + & 
          & this%raviart_thomas_compute_sum_of_dofs_in_simplices(k,q-local_coordinates(k)+1,q)
  end do
  tet_raviart_thomas_get_node_local_id =   & 
       & tet_raviart_thomas_get_node_local_id + & 
       & this%raviart_thomas_compute_sum_of_dofs_in_simplices(k,order-local_coordinates(num_dims)+1,order)

end function tet_raviart_thomas_get_node_local_id

!=================================================================================================
subroutine tet_raviart_thomas_set_permutation_2D( this, permutation, num_nodes_x_dim, &
     & orientation, rotation )
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  integer(ip)                         , intent(inout) :: permutation(:)
  integer(ip)                         , intent(in)    :: num_nodes_x_dim,orientation,rotation
  integer(ip) :: o_r,i,j,ij_t(3)     ! ij_t = (i,j,p-i-j)
  integer(ip) :: ij_n(2),go,gn
  integer(ip) :: ij_perm_tet(2,6) = reshape((/ 1, 2, 2, 3, 3, 1, 2, 1, 3, 2, 1, 3/), (/2,6/) )

  ! Generic loop+rotation identifier  
  o_r = 3*(orientation-1)+rotation
  do j = 0,num_nodes_x_dim-1
     ij_t(2) = j
     do i = 0,num_nodes_x_dim-j-1
        ij_t(1) = i
        ij_t(3) = num_nodes_x_dim-i-j-1
        ! Get the global numbering of node (i,j)
        go = this%get_node_local_id(ij_t(1:2),2,num_nodes_x_dim-1)
        ! i,j coordinates for the o_r permutation
        ij_n(1:2) = ij_t(ij_perm_tet(1:2,o_r)) 
        ! Store the global numbering of node ij_n 
        permutation(go) = this%get_node_local_id(ij_n,2,num_nodes_x_dim-1)
     end do
  end do

end subroutine tet_raviart_thomas_set_permutation_2D

!=================================================================================================
function tet_raviart_thomas_compute_num_quadrature_points( this, degree, dimension )
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  integer(ip)                         , intent(in)    :: degree
  integer(ip)                         , intent(in)    :: dimension
  integer(ip) :: tet_raviart_thomas_compute_num_quadrature_points
  !tet_raviart_thomas_set_num_quadrature_points = & 
  ! & this%compute_num_nodes_scalar( order, dimension )
  !if( dimension == 2 ) then
  !   if( order == 3 ) then
  !      tet_raviart_thomas_set_num_quadrature_points = 13
  !   end if
  !elseif( dimension == 3 ) then
  !   if( order == 2) then
  !      tet_raviart_thomas_set_num_quadrature_points = 11
  !   end if
  !end if
end function tet_raviart_thomas_compute_num_quadrature_points

!=================================================================================================
recursive function tet_raviart_thomas_compute_num_nodes_scalar(this, order, dimension)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this 
  integer(ip)                         , intent(in)    :: dimension
  integer(ip)                         , intent(in)    :: order
  integer(ip) :: tet_raviart_thomas_compute_num_nodes_scalar
  integer(ip) :: q
  !if (dimension == 0) then
  !   tet_raviart_thomas_compute_num_nodes_scalar = 1
  !elseif (order == 0) then
  !   tet_raviart_thomas_compute_num_nodes_scalar = 1
  !elseif (dimension == 1) then
  !   tet_raviart_thomas_compute_num_nodes_scalar = order+1
  !elseif (dimension == 2) then
  !   tet_raviart_thomas_compute_num_nodes_scalar = int((order+1)*(order+2)/2)
  !else
  !   tet_raviart_thomas_compute_num_nodes_scalar = & 
  !     & this%compute_num_nodes_scalar(dimension-1,0)
  !   do q=1,order
  !      tet_raviart_thomas_compute_num_nodes_scalar = & 
  !        & tet_raviart_thomas_compute_num_nodes_scalar + & 
  !        & this%compute_num_nodes_scalar(dimension-1,q)
  !   end do
  !end if
end function tet_raviart_thomas_compute_num_nodes_scalar

!=================================================================================================
function tet_raviart_thomas_get_num_interior_points_x_dim(this,                   & 
     & num_interior_points, & 
     & dimension)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  integer(ip)                         , intent(in)    :: num_interior_points
  integer(ip)                         , intent(in)    :: dimension
  integer(ip) :: tet_raviart_thomas_get_num_interior_points_x_dim 
  if (dimension == 1) then
     tet_raviart_thomas_get_num_interior_points_x_dim = num_interior_points
  else
     tet_raviart_thomas_get_num_interior_points_x_dim = & 
          & (-1 + int(sqrt(real(1+8*num_interior_points))))/2
  end if
end function tet_raviart_thomas_get_num_interior_points_x_dim

!**************************************************************************************************
! Concrete TBPs of this derived data type
!**************************************************************************************************

!==================================================================================================
recursive subroutine tet_raviart_thomas_fill_nodes_n_face(this,ntxob,c3,ini,end, &
     & i,idm,nd,k,p,objec,nt)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  integer(ip)                         , intent(in)    :: ini,end,nd,k,p,objec(nd,nd+1),nt,i
  integer(ip)                         , intent(inout) :: ntxob(nt),c3,idm(nd)
  integer(ip) :: j,ijk(nd),m

  if (k==0) then
     ! Dimension 0: objec gives the coordinates of the corner
     ijk = p*objec(:,1)
     ntxob(c3) = this%get_node_local_id(ijk,nd,p)
     c3 = c3 + 1
  else
     ! Loop over the possible values of the i-th factor
     do j=ini,end
        ! Assign value of the i-th factor
        idm(i) = j
        if (i<k) then
           ! Assign values of the i+1-th factor
           call this%raviart_thomas_fill_nodes_n_face(ntxob,c3,ini,end-j,i+1,idm,nd,k,p,objec,nt)
        else
           ! Compute the coordinate of the c3-th node: objec(:,1)+idm*objec(:,2:k)
           ijk = p*objec(:,1)
           do m=1,k
              ijk = ijk+idm(k-m+1)*objec(:,m+1)
           end do
           ! Store in ntxob the corresponding identifier of the node
           ntxob(c3) = this%get_node_local_id(ijk,nd,p)
           c3 = c3 + 1
        end if
     end do
  end if

end subroutine tet_raviart_thomas_fill_nodes_n_face

!==================================================================================================
recursive subroutine tet_raviart_thomas_fill_n_face_dim_and_vertices (this,       &
     n_face_dim,        &
     vertex_position,      &
     num_dims, &
     initial_vertex,       &
     num_n_faces,       &
     n_face_id,               &
     vertices_of_n_faces,      &
     n_face_dim_and_vertices)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  integer(ip)                         , intent(in)    :: n_face_dim
  integer(ip)                         , intent(in)    :: vertex_position
  integer(ip)                         , intent(in)    :: num_dims
  integer(ip)                         , intent(in)    :: initial_vertex
  integer(ip)                         , intent(in)    :: num_n_faces
  integer(ip)                         , intent(inout) :: n_face_dim_and_vertices(:,:)
  integer(ip)                         , intent(inout) :: vertices_of_n_faces(:)
  integer(ip)                         , intent(inout) :: n_face_id
  integer(ip) :: vertex_id

  do vertex_id=initial_vertex,num_dims+1
     vertices_of_n_faces(vertex_position) = vertex_id
     if(vertex_position+1<n_face_dim+2) then
        call this%raviart_thomas_fill_n_face_dim_and_vertices(n_face_dim,                      &
             vertex_position+1,                  &
             num_dims,               &
             vertices_of_n_faces(vertex_position)+1, &
             num_n_faces,                     &
             n_face_id,                             &
             vertices_of_n_faces,                    &
             n_face_dim_and_vertices)
     else
        n_face_dim_and_vertices(1,n_face_id) = n_face_dim
        n_face_dim_and_vertices(2:n_face_dim+2,n_face_id) = vertices_of_n_faces(1:n_face_dim+1)
        n_face_id = n_face_id + 1
     end if
  end do

end subroutine tet_raviart_thomas_fill_n_face_dim_and_vertices

!=================================================================================================
recursive function tet_raviart_thomas_compute_num_interior_dofs(this,dimension,order)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this  
  integer(ip)                         , intent(in)    :: dimension, order
  integer(ip) :: tet_raviart_thomas_compute_num_interior_dofs
  integer(ip) :: q
  if (dimension == 0) then
     tet_raviart_thomas_compute_num_interior_dofs = 1
  elseif (order == 1) then
     tet_raviart_thomas_compute_num_interior_dofs = 0
  elseif (dimension == 1) then
     tet_raviart_thomas_compute_num_interior_dofs = order-1
  elseif (dimension == 2) then
     tet_raviart_thomas_compute_num_interior_dofs = int((order-2)*(order-1)/2)
  else
     tet_raviart_thomas_compute_num_interior_dofs = & 
          & this%compute_num_interior_dofs(dimension-1,1)
     do q=2,order-1
        tet_raviart_thomas_compute_num_interior_dofs =    & 
             & tet_raviart_thomas_compute_num_interior_dofs + & 
             & this%compute_num_interior_dofs(dimension-1,q)
     end do
  end if
end function tet_raviart_thomas_compute_num_interior_dofs

!=================================================================================================
function tet_raviart_thomas_compute_sum_of_dofs_in_simplices(this,dimension, & 
     & ini_order,end_order)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  integer(ip)                         , intent(in)    :: dimension, ini_order, end_order
  integer(ip) :: tet_raviart_thomas_compute_sum_of_dofs_in_simplices
  integer(ip) :: q
  !if (dimension == 0) then
  !   tet_raviart_thomas_compute_sum_of_nodes_in_simplices = 1
  !elseif (ini_order > end_order) then
  !   tet_raviart_thomas_compute_sum_of_nodes_in_simplices = 0
  !else
  !   tet_raviart_thomas_compute_sum_of_nodes_in_simplices = & 
  !     & this%compute_num_nodes_scalar(dimension-1,ini_order)
  !   do q = ini_order+1,end_order
  !      tet_raviart_thomas_compute_sum_of_nodes_in_simplices =   & 
  !      & tet_raviart_thomas_compute_sum_of_nodes_in_simplices + &
  !      & this%compute_num_nodes_scalar(dimension-1,q)
  !   end do
  !end if
end function tet_raviart_thomas_compute_sum_of_dofs_in_simplices

!==================================================================================================
subroutine tet_raviart_thomas_evaluate_interpolation(this,coord,ndime,nnode, & 
     & ntens,shape,deriv,heslo)
  !-----------------------------------------------------------------------
  !
  ! This routine evaluates shape functions and their first and second
  ! derivatives for 2D or 3D continuos standard interpolation elements.
  !
  !    BARS                2  &   3  nodes
  !    TRIANGLES       3   6  &  10  nodes
  !    TETRAHEDRA          4  &  10  nodes
  !
  !-----------------------------------------------------------------------
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  real(rp)                            , intent(in)    :: coord(:)
  integer(ip)                         , intent(in)    :: ndime,nnode,ntens
  real(rp)                            , intent(inout) :: shape(:),deriv(:,:)
  real(rp)                  , optional, intent(inout) :: heslo(:,:)
  integer(ip) :: i
  real(rp)    :: a1,a2,a3,a4,c
  shape = 0.0_rp
  deriv = 0.0_rp
  if (present(heslo)) then
     heslo = 0.0_rp
  end if
  if(ndime==1) then 
     ! Hessian not computed for face interpolation
     ! Linear bar
     if(nnode==2) then
        shape(1)=1.0_rp-coord(1)                              
        shape(2)=coord(1)                                    
        deriv(1,1)=-1.0_rp                                   
        deriv(1,2)= 1.0_rp                                   
        ! Quadratic bar
     else if(nnode==3) then
        shape(1)=2.0_rp*(coord(1)-0.5_rp)*(coord(1)-1.0_rp)                           
        shape(2)=-4.0_rp*coord(1)*(coord(1)-1.0_rp)  
        shape(3)=2.0_rp*coord(1)*(coord(1)-0.5_rp)
        deriv(1,1)=2.0_rp*(2.0_rp*coord(1)-1.5_rp)                                    
        deriv(1,2)=-4.0_rp*(2.0_rp*coord(1)-1.0_rp)
        deriv(1,3)=2.0_rp*(2.0_rp*coord(1)-0.5_rp)
        ! Cubic bar
     else if(nnode==4) then
        write(*,*) __FILE__,__LINE__,'ERROR:: Interpolation not defined',ndime,nnode
        check(.false.)
     end if
  elseif(ndime==2) then
     ! Linear triangle
     if(nnode==3) then     
        shape(1)=1.0_rp-coord(1)-coord(2)                                
        shape(2)=coord(1)                                  
        shape(3)=coord(2)                                           
        deriv(1,1)=-1.0_rp                                   !  3 
        deriv(1,2)= 1.0_rp                                   !
        deriv(1,3)= 0.0_rp                                   !
        deriv(2,1)=-1.0_rp                                   !         
        deriv(2,2)= 0.0_rp                                   !  1       2
        deriv(2,3)= 1.0_rp
        ! Quadratic triangle
     else if(nnode==6) then
        a1=1.0_rp-coord(1)-coord(2)
        a2=coord(1)                                             
        a3=coord(2)
        shape( 1)=(2.0_rp*a1-1.0_rp)*a1                      !  6
        shape( 3)=(2.0_rp*a2-1.0_rp)*a2                      !   
        shape( 6)=(2.0_rp*a3-1.0_rp)*a3                      !   
        shape( 2)=4.0_rp*a1*a2                               !  4      5
        shape( 5)=4.0_rp*a2*a3                               !     
        shape( 4)=4.0_rp*a1*a3                               !                                !  1     2     3
        deriv(1,1)= 1.0_rp-4.0_rp*a1                        
        deriv(1,3)= 4.0_rp*a2-1.0_rp    
        deriv(1,6)= 0.0_rp           
        deriv(1,2)= 4.0_rp*(a1-a2)   
        deriv(1,5)= 4.0_rp*a3        
        deriv(1,4)=-4.0_rp*a3       
        deriv(2,1)= 1.0_rp-4.0_rp*a1    
        deriv(2,3)= 0.0_rp           
        deriv(2,6)= 4.0_rp*a3-1.0_rp    
        deriv(2,2)=-4.0_rp*a2       
        deriv(2,5)= 4.0_rp*a2        
        deriv(2,4)= 4.0_rp*(a1-a3)
        if (present(heslo)) then
           heslo(1,1)= 4.0_rp
           heslo(1,3)= 4.0_rp
           heslo(1,2)=-8.0_rp
           heslo(2,1)= 4.0_rp
           heslo(2,6)= 4.0_rp
           heslo(2,4)=-8.0_rp
           heslo(3,1)= 4.0_rp
           heslo(3,2)=-4.0_rp
           heslo(3,5)= 4.0_rp
           heslo(3,4)=-4.0_rp
        end if
        ! Cubic triangle
     else if(nnode==10) then
        c=9.0_rp/2.0_rp
        a1=1.0_rp-coord(1)-coord(2)
        a2=2.0_rp/3.0_rp-coord(1)-coord(2)
        a3=1.0_rp/3.0_rp-coord(1)-coord(2)
        shape( 1)=c*a1*a2*a3                                 !  10
        shape( 4)=c*(1.0_rp/3.0_rp-coord(1))*(2.0_rp/3.0_rp-coord(1))*coord(1)    !
        shape(10)=c*(1.0_rp/3.0_rp-coord(2))*(2.0_rp/3.0_rp-coord(2))*coord(2)    !
        shape( 2)= 3.0_rp*c*a1*a2*coord(1)                          !  8    9
        shape( 3)=-3.0_rp*c*a1*(1.0_rp/3.0_rp-coord(1))*coord(1)           !
        shape( 7)=-3.0_rp*c*(1.0_rp/3.0_rp-coord(1))*coord(1)*coord(2)            !
        shape( 9)=-3.0_rp*c*coord(1)*(1.0_rp/3.0_rp-coord(2))*coord(2)            !  5    6     7
        shape( 8)=-3.0_rp*c*a1*(1.0_rp/3.0_rp-coord(2))*coord(2)           !
        shape( 5)= 3.0_rp*c*a1*a2*coord(2)                          !
        shape( 6)= 6.0_rp*c*a1*coord(1)*coord(2)                           !  1    2    3    4
        deriv(1, 1)=-c*(a1*a2+a1*a3+a2*a3)       
        deriv(1, 4)=-c*((2.0_rp/3.0_rp-coord(1))*coord(1)&
             + (1.0_rp/3.0_rp-coord(1))*coord(1)-(1.0_rp/3.0_rp-coord(1))*(2.0_rp/3.0_rp-coord(1)))
        deriv(1, 10)=0.0_rp
        deriv(1, 2)= 3.0_rp*c*(a1*a2-a1*coord(1)-a2*coord(1))
        deriv(1, 3)=-3.0_rp*c*(a1*(1.0_rp/3.0_rp-coord(1))&
             - a1*coord(1)-(1.0_rp/3.0_rp-coord(1))*coord(1))
        deriv(1, 7)=-3.0_rp*c*((1.0_rp/3.0_rp-coord(1))*coord(2)-coord(1)*coord(2))
        deriv(1, 9)=-3.0_rp*c*((1.0_rp/3.0_rp-coord(2))*coord(2))
        deriv(1, 8)= 3.0_rp*c*((1.0_rp/3.0_rp-coord(2))*coord(2))
        deriv(1, 5)= 3.0_rp*c*(-a1*coord(2)-a2*coord(2))
        deriv(1,6)= 6.0_rp*c*(a1*coord(2)-coord(1)*coord(2))
        deriv(2, 1)=-c*(a1*a2+a1*a3+a2*a3)
        deriv(2, 4)= 0.0_rp
        deriv(2, 10)=-c*((2.0_rp/3.0_rp-coord(2))*coord(2)&
             + (1.0_rp/3.0_rp-coord(2))*coord(2)-(1.0_rp/3.0_rp-coord(2))*(2.0_rp/3.0_rp-coord(2)))
        deriv(2, 2)= 3.0_rp*c*(-a1*coord(1)-a2*coord(1))
        deriv(2, 3)=-3.0_rp*c*(-(1.0_rp/3.0_rp-coord(1))*coord(1))
        deriv(2, 7)=-3.0_rp*c*((1.0_rp/3.0_rp-coord(1))*coord(1))
        deriv(2, 9)=-3.0_rp*c*((1.0_rp/3.0_rp-coord(2))*coord(1)-coord(1)*coord(2))
        deriv(2, 8)=-3.0_rp*c*(-(1.0_rp/3.0_rp-coord(2))*coord(2)&
             - a1*coord(2)+a1*(1.0_rp/3.0_rp-coord(2)))
        deriv(2, 5)= 3.0_rp*c*(-a1*coord(2)-a2*coord(2)+a1*a2)
        deriv(2,6)= 6.0_rp*c*(a1*coord(1)-coord(1)*coord(2))
        if (present(heslo)) then
           heslo(1, 1)= c*2.0_rp*(a1+a2+a3) 
           heslo(1, 4)= c*(6.0_rp*coord(1)-2.0_rp) 
           heslo(1, 10)= 0.0_rp 
           heslo(1, 2)= c*( 18.0_rp*coord(1)+12.0_rp*coord(2)-10.0_rp)
           heslo(1, 3)= c*(-18.0_rp*coord(1)- 6.0_rp*coord(2)+ 8.0_rp)
           heslo(1, 7)= c*6.0_rp*coord(2) 
           heslo(1, 9)= 0.0_rp 
           heslo(1, 8)= 0.0_rp  
           heslo(1, 5)= c*6.0_rp*coord(2) 
           heslo(1,6)=-c*12.0_rp*coord(2) 
           heslo(2, 1)= c*2.0_rp*(a1+a2+a3) 
           heslo(2, 4)= 0.0_rp 
           heslo(2, 10)= c*(6.0_rp*coord(2)-2.0_rp) 
           heslo(2, 2)= c*6.0_rp*coord(1)
           heslo(2, 3)= 0.0_rp
           heslo(2, 7)= 0.0_rp
           heslo(2, 9)= c*6.0_rp*coord(1)
           heslo(2, 8)= c*( -6.0_rp*coord(1)-18.0*coord(2)+ 8.0_rp)
           heslo(2, 5)= c*( 12.0_rp*coord(1)+18.0*coord(2)-10.0_rp)
           heslo(2,6)=-c*12.0_rp*coord(1)
           heslo(3, 1)= 2.0_rp*c*(a1+a2+a3) 
           heslo(3, 4)= 0.0_rp  
           heslo(3, 10)= 0.0_rp 
           heslo(3, 2)= c*( 12.0_rp*coord(1)+6.0_rp*coord(2)-5.0_rp) 
           heslo(3, 3)= c*(- 6.0_rp*coord(1)+1.0_rp) 
           heslo(3, 7)= c*(  6.0_rp*coord(1)-1.0_rp) 
           heslo(3, 9)= c*(  6.0_rp*coord(2)-1.0_rp) 
           heslo(3, 8)= c*(- 6.0_rp*coord(2)+1.0_rp)  
           heslo(3, 5)= c*(  6.0_rp*coord(1)+12.0_rp*coord(2)-5.0_rp) 
           heslo(3,6)= c*(-12.0_rp*coord(1)-12.0_rp*coord(2)+6.0_rp) 
        end if
     end if
  elseif (ndime==3) then
     ! Linear tetrahedron 
     if(nnode==4) then
        shape(   1) = 1.0_rp-coord(1)-coord(2)-coord(3)
        shape(   2) = coord(1)
        shape(   3) = coord(2)
        shape(   4) = coord(3)
        deriv(1, 1) =-1.0_rp
        deriv(2, 1) =-1.0_rp
        deriv(3, 1) =-1.0_rp
        deriv(3, 4) = 1.0_rp
        deriv(1, 2) = 1.0_rp
        deriv(2, 3) = 1.0_rp
        ! Quadratic tetrahedron 
     else if(nnode==10) then
        a1= 1.0_rp-coord(1)-coord(2)-coord(3)
        a2=coord(1)
        a3=coord(2)
        a4=coord(3)
        shape(   1) = (2.0_rp*a1-1.0_rp)*a1
        deriv(1, 1) = 1.0_rp-4.0_rp*a1
        deriv(2, 1) = 1.0_rp-4.0_rp*a1
        deriv(3, 1) = 1.0_rp-4.0_rp*a1
        shape(   3) = (2.0_rp*a2-1.0_rp)*a2
        deriv(1, 3) = 4.0_rp*a2-1.0_rp
        shape(   6) = (2.0_rp*a3-1.0_rp)*a3
        deriv(2, 6) = 4.0_rp*a3-1.0_rp
        shape(  10) = (2.0_rp*a4-1.0_rp)*a4
        deriv(3,10) = 4.0_rp*a4-1.0_rp
        shape(   2) = 4.0_rp*a1*a2
        deriv(1, 2) = 4.0_rp*(a1-a2)
        deriv(2, 2) =-4.0_rp*a2
        deriv(3, 2) =-4.0_rp*a2
        shape(   5) = 4.0_rp*a2*a3
        deriv(1, 5) = 4.0_rp*a3
        deriv(2, 5) = 4.0_rp*a2
        shape(   4) = 4.0_rp*a1*a3
        deriv(1, 4) =-4.0_rp*a3
        deriv(2, 4) = 4.0_rp*(a1-a3)
        deriv(3, 4) =-4.0_rp*a3
        shape(   7) = 4.0_rp*a1*a4
        deriv(1, 7) =-4.0_rp*a4
        deriv(2, 7) =-4.0_rp*a4
        deriv(3, 7) = 4.0_rp*(a1-a4)
        shape(   8) = 4.0_rp*a2*a4
        deriv(1, 8) = 4.0_rp*a4
        deriv(3, 8) = 4.0_rp*a2
        shape(   9) = 4.0_rp*a3*a4
        deriv(2, 9) = 4.0_rp*a4
        deriv(3, 9) = 4.0_rp*a3
        if (present(heslo)) then
           do i = 1,6
              heslo(i, 1) = 4.0_rp
           end do
           heslo(1, 3) = 4.0_rp
           heslo(2, 6) = 4.0_rp
           heslo(3,10) = 4.0_rp
           heslo(1, 2) =-8.0_rp
           heslo(4, 2) =-4.0_rp
           heslo(5, 2) =-4.0_rp
           heslo(4, 5) = 4.0_rp
           heslo(2, 4) =-8.0_rp
           heslo(4, 4) =-4.0_rp
           heslo(6, 4) =-4.0_rp
           heslo(3, 7) =-8.0_rp
           heslo(5, 7) =-4.0_rp
           heslo(6, 7) =-4.0_rp
           heslo(5, 8) = 4.0_rp
           heslo(6, 9) = 4.0_rp
        end if
     end if
  end if
end subroutine tet_raviart_thomas_evaluate_interpolation

!==================================================================================================
subroutine tet_raviart_thomas_get_n_face_orientation(this,o,od,nd,io)
  implicit none
  class(tet_raviart_thomas_reference_fe_t), intent(in)    :: this
  integer(ip)                         , intent(inout) :: o
  integer(ip)                         , intent(in)    :: od
  integer(ip)                         , intent(in)    :: nd
  integer(ip)                         , intent(in)    :: io  ! io=numbering of the n-face in the od dimension
  if (nd == 3 .and. od == 2) then
     o = modulo(io+1,2)
  elseif (nd>3) then
     write(*,*) __FILE__,__LINE__,'WARNING!! the orientation is not defined for dimension >3'
  else
     o = 0
  end if
end subroutine tet_raviart_thomas_get_n_face_orientation
